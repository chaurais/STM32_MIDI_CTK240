
stm32f103-midi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000000  08005d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000186c  20000180  08005f10  00020180  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  200019ec  08005f10  000219ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cef3  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b99  00000000  00000000  0003d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000af3d  00000000  00000000  00040c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001040  00000000  00000000  0004bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012e0  00000000  00000000  0004cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001c2e2  00000000  00000000  0004de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018740  00000000  00000000  0006a17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008e7d8  00000000  00000000  000828ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00111092  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003074  00000000  00000000  001110e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d08 	.word	0x08005d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08005d08 	.word	0x08005d08

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a2 	bl	80002ac <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f855 	bl	8000228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000118 	.word	0x20000118

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 f82f 	bl	8000204 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f005 fbba 	bl	8005924 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000208 	.word	0x20000208
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000208 	.word	0x20000208

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000206:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000208:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020c:	041b      	lsls	r3, r3, #16
 800020e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000210:	0200      	lsls	r0, r0, #8
 8000212:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000216:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800021c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000220:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000228:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <HAL_NVIC_SetPriority+0x60>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000232:	f1c3 0407 	rsb	r4, r3, #7
 8000236:	2c04      	cmp	r4, #4
 8000238:	bf28      	it	cs
 800023a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	1d1d      	adds	r5, r3, #4
 800023e:	2d06      	cmp	r5, #6
 8000240:	d918      	bls.n	8000274 <HAL_NVIC_SetPriority+0x4c>
 8000242:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	f04f 35ff 	mov.w	r5, #4294967295
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	ea21 0104 	bic.w	r1, r1, r4
 8000250:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000252:	fa05 f303 	lsl.w	r3, r5, r3
 8000256:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
 800025e:	db0b      	blt.n	8000278 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	0109      	lsls	r1, r1, #4
 8000262:	b2c9      	uxtb	r1, r1
 8000264:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000268:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800026c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000270:	bc30      	pop	{r4, r5}
 8000272:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000274:	2300      	movs	r3, #0
 8000276:	e7e5      	b.n	8000244 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f000 000f 	and.w	r0, r0, #15
 800027c:	0109      	lsls	r1, r1, #4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4b02      	ldr	r3, [pc, #8]	; (800028c <HAL_NVIC_SetPriority+0x64>)
 8000282:	5419      	strb	r1, [r3, r0]
 8000284:	e7f4      	b.n	8000270 <HAL_NVIC_SetPriority+0x48>
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ed14 	.word	0xe000ed14

08000290 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000290:	2800      	cmp	r0, #0
 8000292:	db07      	blt.n	80002a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000294:	f000 021f 	and.w	r2, r0, #31
 8000298:	0940      	lsrs	r0, r0, #5
 800029a:	2301      	movs	r3, #1
 800029c:	4093      	lsls	r3, r2
 800029e:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_NVIC_EnableIRQ+0x18>)
 80002a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ac:	3801      	subs	r0, #1
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d20a      	bcs.n	80002ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x24>)
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <HAL_SYSTICK_Config+0x28>)
 80002ba:	21f0      	movs	r1, #240	; 0xf0
 80002bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	2000      	movs	r0, #0
 80002c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e010 	.word	0xe000e010
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d8:	b4f0      	push	{r4, r5, r6, r7}
 80002da:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002dc:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 80002de:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002e0:	e0a3      	b.n	800042a <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e2:	4f7f      	ldr	r7, [pc, #508]	; (80004e0 <HAL_GPIO_Init+0x208>)
 80002e4:	42bb      	cmp	r3, r7
 80002e6:	d010      	beq.n	800030a <HAL_GPIO_Init+0x32>
 80002e8:	d907      	bls.n	80002fa <HAL_GPIO_Init+0x22>
 80002ea:	4f7e      	ldr	r7, [pc, #504]	; (80004e4 <HAL_GPIO_Init+0x20c>)
 80002ec:	42bb      	cmp	r3, r7
 80002ee:	d00c      	beq.n	800030a <HAL_GPIO_Init+0x32>
 80002f0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80002f4:	42bb      	cmp	r3, r7
 80002f6:	d008      	beq.n	800030a <HAL_GPIO_Init+0x32>
 80002f8:	e013      	b.n	8000322 <HAL_GPIO_Init+0x4a>
 80002fa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80002fe:	42bb      	cmp	r3, r7
 8000300:	d003      	beq.n	800030a <HAL_GPIO_Init+0x32>
 8000302:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000306:	42bb      	cmp	r3, r7
 8000308:	d107      	bne.n	800031a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800030a:	688b      	ldr	r3, [r1, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d058      	beq.n	80003c2 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000310:	2b01      	cmp	r3, #1
 8000312:	d051      	beq.n	80003b8 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000314:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000316:	2508      	movs	r5, #8
 8000318:	e003      	b.n	8000322 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800031a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800031e:	42bb      	cmp	r3, r7
 8000320:	d0f3      	beq.n	800030a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000322:	2eff      	cmp	r6, #255	; 0xff
 8000324:	d84f      	bhi.n	80003c6 <HAL_GPIO_Init+0xee>
 8000326:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000328:	2eff      	cmp	r6, #255	; 0xff
 800032a:	d84f      	bhi.n	80003cc <HAL_GPIO_Init+0xf4>
 800032c:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032e:	f8dc 3000 	ldr.w	r3, [ip]
 8000332:	270f      	movs	r7, #15
 8000334:	4097      	lsls	r7, r2
 8000336:	ea23 0307 	bic.w	r3, r3, r7
 800033a:	fa05 f202 	lsl.w	r2, r5, r2
 800033e:	4313      	orrs	r3, r2
 8000340:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000344:	684b      	ldr	r3, [r1, #4]
 8000346:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800034a:	d06d      	beq.n	8000428 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034c:	4b66      	ldr	r3, [pc, #408]	; (80004e8 <HAL_GPIO_Init+0x210>)
 800034e:	699a      	ldr	r2, [r3, #24]
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	619a      	str	r2, [r3, #24]
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0301 	and.w	r3, r3, #1
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000360:	08a2      	lsrs	r2, r4, #2
 8000362:	1c97      	adds	r7, r2, #2
 8000364:	4b61      	ldr	r3, [pc, #388]	; (80004ec <HAL_GPIO_Init+0x214>)
 8000366:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800036a:	f004 0703 	and.w	r7, r4, #3
 800036e:	00bf      	lsls	r7, r7, #2
 8000370:	f04f 0c0f 	mov.w	ip, #15
 8000374:	fa0c fc07 	lsl.w	ip, ip, r7
 8000378:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800037c:	4b5c      	ldr	r3, [pc, #368]	; (80004f0 <HAL_GPIO_Init+0x218>)
 800037e:	4298      	cmp	r0, r3
 8000380:	d02a      	beq.n	80003d8 <HAL_GPIO_Init+0x100>
 8000382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000386:	4298      	cmp	r0, r3
 8000388:	f000 808a 	beq.w	80004a0 <HAL_GPIO_Init+0x1c8>
 800038c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000390:	4298      	cmp	r0, r3
 8000392:	f000 8087 	beq.w	80004a4 <HAL_GPIO_Init+0x1cc>
 8000396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800039a:	4298      	cmp	r0, r3
 800039c:	d01a      	beq.n	80003d4 <HAL_GPIO_Init+0xfc>
 800039e:	2304      	movs	r3, #4
 80003a0:	e01b      	b.n	80003da <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003a2:	68cd      	ldr	r5, [r1, #12]
          break;
 80003a4:	e7bd      	b.n	8000322 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003a6:	68cd      	ldr	r5, [r1, #12]
 80003a8:	3504      	adds	r5, #4
          break;
 80003aa:	e7ba      	b.n	8000322 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003ac:	68cd      	ldr	r5, [r1, #12]
 80003ae:	3508      	adds	r5, #8
          break;
 80003b0:	e7b7      	b.n	8000322 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003b2:	68cd      	ldr	r5, [r1, #12]
 80003b4:	350c      	adds	r5, #12
          break;
 80003b6:	e7b4      	b.n	8000322 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80003b8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003ba:	2508      	movs	r5, #8
 80003bc:	e7b1      	b.n	8000322 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003be:	2500      	movs	r5, #0
 80003c0:	e7af      	b.n	8000322 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003c2:	2504      	movs	r5, #4
 80003c4:	e7ad      	b.n	8000322 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c6:	f100 0c04 	add.w	ip, r0, #4
 80003ca:	e7ad      	b.n	8000328 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80003cc:	f1a4 0208 	sub.w	r2, r4, #8
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	e7ac      	b.n	800032e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003d4:	2303      	movs	r3, #3
 80003d6:	e000      	b.n	80003da <HAL_GPIO_Init+0x102>
 80003d8:	2300      	movs	r3, #0
 80003da:	40bb      	lsls	r3, r7
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80003e0:	3202      	adds	r2, #2
 80003e2:	4f42      	ldr	r7, [pc, #264]	; (80004ec <HAL_GPIO_Init+0x214>)
 80003e4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003e8:	684b      	ldr	r3, [r1, #4]
 80003ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80003ee:	d05b      	beq.n	80004a8 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003f0:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 80003f2:	6813      	ldr	r3, [r2, #0]
 80003f4:	4333      	orrs	r3, r6
 80003f6:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003f8:	684b      	ldr	r3, [r1, #4]
 80003fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80003fe:	d059      	beq.n	80004b4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000400:	4a3c      	ldr	r2, [pc, #240]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 8000402:	6853      	ldr	r3, [r2, #4]
 8000404:	4333      	orrs	r3, r6
 8000406:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000408:	684b      	ldr	r3, [r1, #4]
 800040a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800040e:	d057      	beq.n	80004c0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000410:	4a38      	ldr	r2, [pc, #224]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 8000412:	6893      	ldr	r3, [r2, #8]
 8000414:	4333      	orrs	r3, r6
 8000416:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000418:	684b      	ldr	r3, [r1, #4]
 800041a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800041e:	d055      	beq.n	80004cc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000420:	4a34      	ldr	r2, [pc, #208]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 8000422:	68d3      	ldr	r3, [r2, #12]
 8000424:	431e      	orrs	r6, r3
 8000426:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000428:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042a:	680b      	ldr	r3, [r1, #0]
 800042c:	fa33 f204 	lsrs.w	r2, r3, r4
 8000430:	d052      	beq.n	80004d8 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000432:	2201      	movs	r2, #1
 8000434:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000436:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 800043a:	ea32 0303 	bics.w	r3, r2, r3
 800043e:	d1f3      	bne.n	8000428 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000440:	684b      	ldr	r3, [r1, #4]
 8000442:	2b12      	cmp	r3, #18
 8000444:	f63f af4d 	bhi.w	80002e2 <HAL_GPIO_Init+0xa>
 8000448:	2b12      	cmp	r3, #18
 800044a:	f63f af6a 	bhi.w	8000322 <HAL_GPIO_Init+0x4a>
 800044e:	a701      	add	r7, pc, #4	; (adr r7, 8000454 <HAL_GPIO_Init+0x17c>)
 8000450:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000454:	0800030b 	.word	0x0800030b
 8000458:	080003a3 	.word	0x080003a3
 800045c:	080003ad 	.word	0x080003ad
 8000460:	080003bf 	.word	0x080003bf
 8000464:	08000323 	.word	0x08000323
 8000468:	08000323 	.word	0x08000323
 800046c:	08000323 	.word	0x08000323
 8000470:	08000323 	.word	0x08000323
 8000474:	08000323 	.word	0x08000323
 8000478:	08000323 	.word	0x08000323
 800047c:	08000323 	.word	0x08000323
 8000480:	08000323 	.word	0x08000323
 8000484:	08000323 	.word	0x08000323
 8000488:	08000323 	.word	0x08000323
 800048c:	08000323 	.word	0x08000323
 8000490:	08000323 	.word	0x08000323
 8000494:	08000323 	.word	0x08000323
 8000498:	080003a7 	.word	0x080003a7
 800049c:	080003b3 	.word	0x080003b3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80004a0:	2301      	movs	r3, #1
 80004a2:	e79a      	b.n	80003da <HAL_GPIO_Init+0x102>
 80004a4:	2302      	movs	r3, #2
 80004a6:	e798      	b.n	80003da <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 80004aa:	6813      	ldr	r3, [r2, #0]
 80004ac:	ea23 0306 	bic.w	r3, r3, r6
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	e7a1      	b.n	80003f8 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 80004b6:	6853      	ldr	r3, [r2, #4]
 80004b8:	ea23 0306 	bic.w	r3, r3, r6
 80004bc:	6053      	str	r3, [r2, #4]
 80004be:	e7a3      	b.n	8000408 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 80004c2:	6893      	ldr	r3, [r2, #8]
 80004c4:	ea23 0306 	bic.w	r3, r3, r6
 80004c8:	6093      	str	r3, [r2, #8]
 80004ca:	e7a5      	b.n	8000418 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <HAL_GPIO_Init+0x21c>)
 80004ce:	68d3      	ldr	r3, [r2, #12]
 80004d0:	ea23 0606 	bic.w	r6, r3, r6
 80004d4:	60d6      	str	r6, [r2, #12]
 80004d6:	e7a7      	b.n	8000428 <HAL_GPIO_Init+0x150>
  }
}
 80004d8:	b002      	add	sp, #8
 80004da:	bcf0      	pop	{r4, r5, r6, r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	10220000 	.word	0x10220000
 80004e4:	10310000 	.word	0x10310000
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000
 80004f0:	40010800 	.word	0x40010800
 80004f4:	40010400 	.word	0x40010400

080004f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004f8:	6883      	ldr	r3, [r0, #8]
 80004fa:	4219      	tst	r1, r3
 80004fc:	d001      	beq.n	8000502 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80004fe:	2001      	movs	r0, #1
 8000500:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000502:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000504:	4770      	bx	lr

08000506 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000506:	b10a      	cbz	r2, 800050c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000508:	6101      	str	r1, [r0, #16]
 800050a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800050c:	0409      	lsls	r1, r1, #16
 800050e:	6101      	str	r1, [r0, #16]
  }
}
 8000510:	4770      	bx	lr

08000512 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8000512:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000514:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8000518:	d043      	beq.n	80005a2 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800051a:	6804      	ldr	r4, [r0, #0]
 800051c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8000520:	b29b      	uxth	r3, r3
 8000522:	780d      	ldrb	r5, [r1, #0]
 8000524:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000528:	3302      	adds	r3, #2
 800052a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800052e:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8000532:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8000536:	698b      	ldr	r3, [r1, #24]
 8000538:	42a3      	cmp	r3, r4
 800053a:	d328      	bcc.n	800058e <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 800053c:	1b1b      	subs	r3, r3, r4
 800053e:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8000540:	698b      	ldr	r3, [r1, #24]
 8000542:	b97b      	cbnz	r3, 8000564 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000544:	6806      	ldr	r6, [r0, #0]
 8000546:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000564:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000568:	d00e      	beq.n	8000588 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800056a:	6802      	ldr	r2, [r0, #0]
 800056c:	780d      	ldrb	r5, [r1, #0]
 800056e:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8000572:	b29b      	uxth	r3, r3
 8000574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800057c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000584:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8000588:	b924      	cbnz	r4, 8000594 <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 800058a:	4620      	mov	r0, r4
 800058c:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800058e:	2300      	movs	r3, #0
 8000590:	618b      	str	r3, [r1, #24]
 8000592:	e7d5      	b.n	8000540 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000594:	4623      	mov	r3, r4
 8000596:	890a      	ldrh	r2, [r1, #8]
 8000598:	6949      	ldr	r1, [r1, #20]
 800059a:	6800      	ldr	r0, [r0, #0]
 800059c:	f002 fdea 	bl	8003174 <USB_ReadPMA>
 80005a0:	e7f3      	b.n	800058a <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80005a2:	6804      	ldr	r4, [r0, #0]
 80005a4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	780d      	ldrb	r5, [r1, #0]
 80005ac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80005b0:	3306      	adds	r3, #6
 80005b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80005b6:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 80005ba:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 80005be:	698b      	ldr	r3, [r1, #24]
 80005c0:	42a3      	cmp	r3, r4
 80005c2:	d32e      	bcc.n	8000622 <HAL_PCD_EP_DB_Receive+0x110>
      ep->xfer_len -= count;
 80005c4:	1b1b      	subs	r3, r3, r4
 80005c6:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 80005c8:	698b      	ldr	r3, [r1, #24]
 80005ca:	b97b      	cbnz	r3, 80005ec <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80005cc:	6806      	ldr	r6, [r0, #0]
 80005ce:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80005e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80005ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80005f0:	d10e      	bne.n	8000610 <HAL_PCD_EP_DB_Receive+0xfe>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80005f2:	6802      	ldr	r2, [r0, #0]
 80005f4:	780d      	ldrb	r5, [r1, #0]
 80005f6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800060c:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8000610:	2c00      	cmp	r4, #0
 8000612:	d0ba      	beq.n	800058a <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000614:	4623      	mov	r3, r4
 8000616:	894a      	ldrh	r2, [r1, #10]
 8000618:	6949      	ldr	r1, [r1, #20]
 800061a:	6800      	ldr	r0, [r0, #0]
 800061c:	f002 fdaa 	bl	8003174 <USB_ReadPMA>
 8000620:	e7b3      	b.n	800058a <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8000622:	2300      	movs	r3, #0
 8000624:	618b      	str	r3, [r1, #24]
 8000626:	e7cf      	b.n	80005c8 <HAL_PCD_EP_DB_Receive+0xb6>

08000628 <HAL_PCD_Init>:
{
 8000628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062a:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800062c:	2800      	cmp	r0, #0
 800062e:	d07f      	beq.n	8000730 <HAL_PCD_Init+0x108>
 8000630:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000632:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000636:	b1db      	cbz	r3, 8000670 <HAL_PCD_Init+0x48>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000638:	2303      	movs	r3, #3
 800063a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800063e:	6820      	ldr	r0, [r4, #0]
 8000640:	f001 fdfe 	bl	8002240 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000644:	4625      	mov	r5, r4
 8000646:	f855 7b10 	ldr.w	r7, [r5], #16
 800064a:	466e      	mov	r6, sp
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	6033      	str	r3, [r6, #0]
 8000654:	1d23      	adds	r3, r4, #4
 8000656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000658:	4638      	mov	r0, r7
 800065a:	f001 fde1 	bl	8002220 <USB_CoreInit>
 800065e:	4605      	mov	r5, r0
 8000660:	b158      	cbz	r0, 800067a <HAL_PCD_Init+0x52>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000662:	2302      	movs	r3, #2
 8000664:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000668:	2501      	movs	r5, #1
}
 800066a:	4628      	mov	r0, r5
 800066c:	b007      	add	sp, #28
 800066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000670:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8000674:	f005 f9b6 	bl	80059e4 <HAL_PCD_MspInit>
 8000678:	e7de      	b.n	8000638 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800067a:	2100      	movs	r1, #0
 800067c:	6820      	ldr	r0, [r4, #0]
 800067e:	f001 fde9 	bl	8002254 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000682:	462b      	mov	r3, r5
 8000684:	e019      	b.n	80006ba <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800068c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8000690:	2001      	movs	r0, #1
 8000692:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8000694:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8000698:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800069c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80006a0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80006a4:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80006a6:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 80006aa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80006ae:	2000      	movs	r0, #0
 80006b0:	70f0      	strb	r0, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80006b2:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80006b4:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80006b6:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006b8:	b2d3      	uxtb	r3, r2
 80006ba:	6861      	ldr	r1, [r4, #4]
 80006bc:	428b      	cmp	r3, r1
 80006be:	d3e2      	bcc.n	8000686 <HAL_PCD_Init+0x5e>
 80006c0:	e016      	b.n	80006f0 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 80006c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80006c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80006d0:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80006d4:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80006d8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80006dc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80006e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80006e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80006e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006ec:	3501      	adds	r5, #1
 80006ee:	b2ed      	uxtb	r5, r5
 80006f0:	42a9      	cmp	r1, r5
 80006f2:	d8e6      	bhi.n	80006c2 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006f4:	4625      	mov	r5, r4
 80006f6:	f855 7b10 	ldr.w	r7, [r5], #16
 80006fa:	466e      	mov	r6, sp
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	6033      	str	r3, [r6, #0]
 8000704:	1d23      	adds	r3, r4, #4
 8000706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000708:	4638      	mov	r0, r7
 800070a:	f001 fda5 	bl	8002258 <USB_DevInit>
 800070e:	4605      	mov	r5, r0
 8000710:	b120      	cbz	r0, 800071c <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000712:	2302      	movs	r3, #2
 8000714:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000718:	2501      	movs	r5, #1
 800071a:	e7a6      	b.n	800066a <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000722:	2301      	movs	r3, #1
 8000724:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000728:	6820      	ldr	r0, [r4, #0]
 800072a:	f002 f8af 	bl	800288c <USB_DevDisconnect>
  return HAL_OK;
 800072e:	e79c      	b.n	800066a <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8000730:	2501      	movs	r5, #1
 8000732:	e79a      	b.n	800066a <HAL_PCD_Init+0x42>

08000734 <HAL_PCD_Start>:
{
 8000734:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000736:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800073a:	2b01      	cmp	r3, #1
 800073c:	d011      	beq.n	8000762 <HAL_PCD_Start+0x2e>
 800073e:	4604      	mov	r4, r0
 8000740:	2501      	movs	r5, #1
 8000742:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000746:	6800      	ldr	r0, [r0, #0]
 8000748:	f001 fd71 	bl	800222e <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800074c:	4629      	mov	r1, r5
 800074e:	4620      	mov	r0, r4
 8000750:	f000 fe85 	bl	800145e <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8000754:	6820      	ldr	r0, [r4, #0]
 8000756:	f002 f897 	bl	8002888 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800075a:	2000      	movs	r0, #0
 800075c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8000760:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000762:	2002      	movs	r0, #2
 8000764:	e7fc      	b.n	8000760 <HAL_PCD_Start+0x2c>

08000766 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8000766:	b570      	push	{r4, r5, r6, lr}
 8000768:	4605      	mov	r5, r0
 800076a:	460c      	mov	r4, r1
 800076c:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800076e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000772:	f000 810d 	beq.w	8000990 <HAL_PCD_EP_DB_Transmit+0x22a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000776:	6802      	ldr	r2, [r0, #0]
 8000778:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800077c:	b29b      	uxth	r3, r3
 800077e:	7809      	ldrb	r1, [r1, #0]
 8000780:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000784:	3302      	adds	r3, #2
 8000786:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800078a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800078e:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8000792:	69a3      	ldr	r3, [r4, #24]
 8000794:	4293      	cmp	r3, r2
 8000796:	d952      	bls.n	800083e <HAL_PCD_EP_DB_Transmit+0xd8>
    {
      ep->xfer_len -= TxByteNbre;
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800079c:	69a3      	ldr	r3, [r4, #24]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d16a      	bne.n	8000878 <HAL_PCD_EP_DB_Transmit+0x112>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80007a2:	7863      	ldrb	r3, [r4, #1]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d14d      	bne.n	8000844 <HAL_PCD_EP_DB_Transmit+0xde>
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80007ae:	b292      	uxth	r2, r2
 80007b0:	4413      	add	r3, r2
 80007b2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80007b6:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 80007c6:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 80007ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80007ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	7862      	ldrb	r2, [r4, #1]
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d13e      	bne.n	800085e <HAL_PCD_EP_DB_Transmit+0xf8>
 80007e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80007e4:	b292      	uxth	r2, r2
 80007e6:	4413      	add	r3, r2
 80007e8:	7822      	ldrb	r2, [r4, #0]
 80007ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80007ee:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80007f2:	b292      	uxth	r2, r2
 80007f4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80007f8:	b292      	uxth	r2, r2
 80007fa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80007fe:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000802:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000806:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800080a:	b292      	uxth	r2, r2
 800080c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000810:	7821      	ldrb	r1, [r4, #0]
 8000812:	4628      	mov	r0, r5
 8000814:	f002 fd8f 	bl	8003336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000818:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800081c:	d041      	beq.n	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800081e:	682a      	ldr	r2, [r5, #0]
 8000820:	7821      	ldrb	r1, [r4, #0]
 8000822:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000826:	b29b      	uxth	r3, r3
 8000828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800082c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800083c:	e031      	b.n	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 800083e:	2300      	movs	r3, #0
 8000840:	61a3      	str	r3, [r4, #24]
 8000842:	e7ab      	b.n	800079c <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000844:	2b01      	cmp	r3, #1
 8000846:	d1c7      	bne.n	80007d8 <HAL_PCD_EP_DB_Transmit+0x72>
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800084e:	b292      	uxth	r2, r2
 8000850:	4413      	add	r3, r2
 8000852:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8000856:	2300      	movs	r3, #0
 8000858:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 800085c:	e7bc      	b.n	80007d8 <HAL_PCD_EP_DB_Transmit+0x72>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800085e:	2a01      	cmp	r2, #1
 8000860:	d1d6      	bne.n	8000810 <HAL_PCD_EP_DB_Transmit+0xaa>
 8000862:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000866:	b292      	uxth	r2, r2
 8000868:	4413      	add	r3, r2
 800086a:	7822      	ldrb	r2, [r4, #0]
 800086c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000870:	2200      	movs	r2, #0
 8000872:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000876:	e7cb      	b.n	8000810 <HAL_PCD_EP_DB_Transmit+0xaa>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000878:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800087c:	d00d      	beq.n	800089a <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800087e:	6828      	ldr	r0, [r5, #0]
 8000880:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000884:	b29b      	uxth	r3, r3
 8000886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800088a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800089a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d012      	beq.n	80008c8 <HAL_PCD_EP_DB_Transmit+0x162>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80008a2:	682a      	ldr	r2, [r5, #0]
 80008a4:	7821      	ldrb	r1, [r4, #0]
 80008a6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008b4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80008b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 80008c4:	2000      	movs	r0, #0
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 80008c8:	6963      	ldr	r3, [r4, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 80008ce:	69e3      	ldr	r3, [r4, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 80008d4:	6a21      	ldr	r1, [r4, #32]
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	4299      	cmp	r1, r3
 80008da:	d31f      	bcc.n	800091c <HAL_PCD_EP_DB_Transmit+0x1b6>
          ep->xfer_len_db -= len;
 80008dc:	1ac9      	subs	r1, r1, r3
 80008de:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80008e0:	7862      	ldrb	r2, [r4, #1]
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	d13f      	bne.n	8000966 <HAL_PCD_EP_DB_Transmit+0x200>
 80008e6:	682a      	ldr	r2, [r5, #0]
 80008e8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80008ec:	b289      	uxth	r1, r1
 80008ee:	440a      	add	r2, r1
 80008f0:	7821      	ldrb	r1, [r4, #0]
 80008f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80008f6:	b9eb      	cbnz	r3, 8000934 <HAL_PCD_EP_DB_Transmit+0x1ce>
 80008f8:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80008fc:	b289      	uxth	r1, r1
 80008fe:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000902:	b289      	uxth	r1, r1
 8000904:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000908:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 800090c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8000910:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000914:	b289      	uxth	r1, r1
 8000916:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800091a:	e026      	b.n	800096a <HAL_PCD_EP_DB_Transmit+0x204>
        else if (ep->xfer_len_db == 0U)
 800091c:	b921      	cbnz	r1, 8000928 <HAL_PCD_EP_DB_Transmit+0x1c2>
          ep->xfer_fill_db = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8000924:	4613      	mov	r3, r2
 8000926:	e7db      	b.n	80008e0 <HAL_PCD_EP_DB_Transmit+0x17a>
          ep->xfer_fill_db = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800092e:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8000930:	460b      	mov	r3, r1
 8000932:	e7d5      	b.n	80008e0 <HAL_PCD_EP_DB_Transmit+0x17a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000934:	2b3e      	cmp	r3, #62	; 0x3e
 8000936:	d809      	bhi.n	800094c <HAL_PCD_EP_DB_Transmit+0x1e6>
 8000938:	0859      	lsrs	r1, r3, #1
 800093a:	f013 0f01 	tst.w	r3, #1
 800093e:	d000      	beq.n	8000942 <HAL_PCD_EP_DB_Transmit+0x1dc>
 8000940:	3101      	adds	r1, #1
 8000942:	0289      	lsls	r1, r1, #10
 8000944:	b289      	uxth	r1, r1
 8000946:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800094a:	e00e      	b.n	800096a <HAL_PCD_EP_DB_Transmit+0x204>
 800094c:	0959      	lsrs	r1, r3, #5
 800094e:	f013 0f1f 	tst.w	r3, #31
 8000952:	d100      	bne.n	8000956 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8000954:	3901      	subs	r1, #1
 8000956:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800095a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800095e:	b289      	uxth	r1, r1
 8000960:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000964:	e001      	b.n	800096a <HAL_PCD_EP_DB_Transmit+0x204>
 8000966:	2a01      	cmp	r2, #1
 8000968:	d006      	beq.n	8000978 <HAL_PCD_EP_DB_Transmit+0x212>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800096a:	b29b      	uxth	r3, r3
 800096c:	8922      	ldrh	r2, [r4, #8]
 800096e:	6961      	ldr	r1, [r4, #20]
 8000970:	6828      	ldr	r0, [r5, #0]
 8000972:	f001 ff93 	bl	800289c <USB_WritePMA>
 8000976:	e794      	b.n	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000978:	682a      	ldr	r2, [r5, #0]
 800097a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800097e:	b289      	uxth	r1, r1
 8000980:	440a      	add	r2, r1
 8000982:	7821      	ldrb	r1, [r4, #0]
 8000984:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000988:	b299      	uxth	r1, r3
 800098a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800098e:	e7ec      	b.n	800096a <HAL_PCD_EP_DB_Transmit+0x204>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000990:	6802      	ldr	r2, [r0, #0]
 8000992:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000996:	b29b      	uxth	r3, r3
 8000998:	7809      	ldrb	r1, [r1, #0]
 800099a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800099e:	3306      	adds	r3, #6
 80009a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80009a4:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 80009a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 80009ac:	69a3      	ldr	r3, [r4, #24]
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d353      	bcc.n	8000a5a <HAL_PCD_EP_DB_Transmit+0x2f4>
      ep->xfer_len -= TxByteNbre;
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 80009b6:	69a3      	ldr	r3, [r4, #24]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d16b      	bne.n	8000a94 <HAL_PCD_EP_DB_Transmit+0x32e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80009bc:	7863      	ldrb	r3, [r4, #1]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d14e      	bne.n	8000a60 <HAL_PCD_EP_DB_Transmit+0x2fa>
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80009c8:	b292      	uxth	r2, r2
 80009ca:	4413      	add	r3, r2
 80009cc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80009d0:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 80009e0:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 80009e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	7862      	ldrb	r2, [r4, #1]
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d13f      	bne.n	8000a7a <HAL_PCD_EP_DB_Transmit+0x314>
 80009fa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80009fe:	b292      	uxth	r2, r2
 8000a00:	4413      	add	r3, r2
 8000a02:	7822      	ldrb	r2, [r4, #0]
 8000a04:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000a08:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000a12:	b292      	uxth	r2, r2
 8000a14:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000a18:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000a1c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000a20:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000a24:	b292      	uxth	r2, r2
 8000a26:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a2a:	7821      	ldrb	r1, [r4, #0]
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f002 fc82 	bl	8003336 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000a32:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000a36:	f47f af34 	bne.w	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000a3a:	682a      	ldr	r2, [r5, #0]
 8000a3c:	7821      	ldrb	r1, [r4, #0]
 8000a3e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000a58:	e723      	b.n	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61a3      	str	r3, [r4, #24]
 8000a5e:	e7aa      	b.n	80009b6 <HAL_PCD_EP_DB_Transmit+0x250>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d1c6      	bne.n	80009f2 <HAL_PCD_EP_DB_Transmit+0x28c>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000a6a:	b292      	uxth	r2, r2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8000a78:	e7bb      	b.n	80009f2 <HAL_PCD_EP_DB_Transmit+0x28c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000a7a:	2a01      	cmp	r2, #1
 8000a7c:	d1d5      	bne.n	8000a2a <HAL_PCD_EP_DB_Transmit+0x2c4>
 8000a7e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000a82:	b292      	uxth	r2, r2
 8000a84:	4413      	add	r3, r2
 8000a86:	7822      	ldrb	r2, [r4, #0]
 8000a88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000a92:	e7ca      	b.n	8000a2a <HAL_PCD_EP_DB_Transmit+0x2c4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000a94:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8000a98:	d10d      	bne.n	8000ab6 <HAL_PCD_EP_DB_Transmit+0x350>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000a9a:	6828      	ldr	r0, [r5, #0]
 8000a9c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000ab6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	f47f aef1 	bne.w	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
        ep->xfer_buff += TxByteNbre;
 8000ac0:	6963      	ldr	r3, [r4, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8000ac6:	69e3      	ldr	r3, [r4, #28]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8000acc:	6a21      	ldr	r1, [r4, #32]
 8000ace:	6923      	ldr	r3, [r4, #16]
 8000ad0:	4299      	cmp	r1, r3
 8000ad2:	d31f      	bcc.n	8000b14 <HAL_PCD_EP_DB_Transmit+0x3ae>
          ep->xfer_len_db -= len;
 8000ad4:	1ac9      	subs	r1, r1, r3
 8000ad6:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000ad8:	682a      	ldr	r2, [r5, #0]
 8000ada:	7861      	ldrb	r1, [r4, #1]
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d13e      	bne.n	8000b5e <HAL_PCD_EP_DB_Transmit+0x3f8>
 8000ae0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000ae4:	b289      	uxth	r1, r1
 8000ae6:	440a      	add	r2, r1
 8000ae8:	7821      	ldrb	r1, [r4, #0]
 8000aea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000aee:	b9eb      	cbnz	r3, 8000b2c <HAL_PCD_EP_DB_Transmit+0x3c6>
 8000af0:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8000af4:	b289      	uxth	r1, r1
 8000af6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8000afa:	b289      	uxth	r1, r1
 8000afc:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000b00:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8000b04:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8000b08:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000b0c:	b289      	uxth	r1, r1
 8000b0e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000b12:	e026      	b.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x3fc>
        else if (ep->xfer_len_db == 0U)
 8000b14:	b921      	cbnz	r1, 8000b20 <HAL_PCD_EP_DB_Transmit+0x3ba>
          ep->xfer_fill_db = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	e7db      	b.n	8000ad8 <HAL_PCD_EP_DB_Transmit+0x372>
          ep->xfer_len_db = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8000b24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8000b28:	460b      	mov	r3, r1
 8000b2a:	e7d5      	b.n	8000ad8 <HAL_PCD_EP_DB_Transmit+0x372>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8000b2e:	d809      	bhi.n	8000b44 <HAL_PCD_EP_DB_Transmit+0x3de>
 8000b30:	0859      	lsrs	r1, r3, #1
 8000b32:	f013 0f01 	tst.w	r3, #1
 8000b36:	d000      	beq.n	8000b3a <HAL_PCD_EP_DB_Transmit+0x3d4>
 8000b38:	3101      	adds	r1, #1
 8000b3a:	0289      	lsls	r1, r1, #10
 8000b3c:	b289      	uxth	r1, r1
 8000b3e:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000b42:	e00e      	b.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x3fc>
 8000b44:	0959      	lsrs	r1, r3, #5
 8000b46:	f013 0f1f 	tst.w	r3, #31
 8000b4a:	d100      	bne.n	8000b4e <HAL_PCD_EP_DB_Transmit+0x3e8>
 8000b4c:	3901      	subs	r1, #1
 8000b4e:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8000b52:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000b56:	b289      	uxth	r1, r1
 8000b58:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000b5c:	e001      	b.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x3fc>
 8000b5e:	2901      	cmp	r1, #1
 8000b60:	d006      	beq.n	8000b70 <HAL_PCD_EP_DB_Transmit+0x40a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	8962      	ldrh	r2, [r4, #10]
 8000b66:	6961      	ldr	r1, [r4, #20]
 8000b68:	6828      	ldr	r0, [r5, #0]
 8000b6a:	f001 fe97 	bl	800289c <USB_WritePMA>
 8000b6e:	e698      	b.n	80008a2 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000b70:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b74:	b289      	uxth	r1, r1
 8000b76:	440a      	add	r2, r1
 8000b78:	7821      	ldrb	r1, [r4, #0]
 8000b7a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8000b84:	e7ed      	b.n	8000b62 <HAL_PCD_EP_DB_Transmit+0x3fc>

08000b86 <PCD_EP_ISR_Handler>:
{
 8000b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000b8c:	6828      	ldr	r0, [r5, #0]
 8000b8e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000b92:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b96:	f000 8213 	beq.w	8000fc0 <PCD_EP_ISR_Handler+0x43a>
    wIstr = hpcd->Instance->ISTR;
 8000b9a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8000b9e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8000ba0:	f014 040f 	ands.w	r4, r4, #15
 8000ba4:	f040 80d8 	bne.w	8000d58 <PCD_EP_ISR_Handler+0x1d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ba8:	f013 0f10 	tst.w	r3, #16
 8000bac:	d061      	beq.n	8000c72 <PCD_EP_ISR_Handler+0xec>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000bae:	8803      	ldrh	r3, [r0, #0]
 8000bb0:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000bb2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000bb6:	f040 8093 	bne.w	8000ce0 <PCD_EP_ISR_Handler+0x15a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000bba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8000bbe:	d0e5      	beq.n	8000b8c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bc0:	8803      	ldrh	r3, [r0, #0]
 8000bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bc6:	051b      	lsls	r3, r3, #20
 8000bc8:	0d1b      	lsrs	r3, r3, #20
 8000bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bce:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bd0:	6828      	ldr	r0, [r5, #0]
 8000bd2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8000bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000be0:	3306      	adds	r3, #6
 8000be2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000be6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bee:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000bf2:	b18b      	cbz	r3, 8000c18 <PCD_EP_ISR_Handler+0x92>
 8000bf4:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 8000bf8:	b171      	cbz	r1, 8000c18 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000bfa:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8000bfe:	f002 fab9 	bl	8003174 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000c02:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 8000c06:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8000c0a:	4413      	add	r3, r2
 8000c0c:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000c10:	2100      	movs	r1, #0
 8000c12:	4628      	mov	r0, r5
 8000c14:	f002 fb74 	bl	8003300 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	881a      	ldrh	r2, [r3, #0]
 8000c1c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8000c20:	d1b4      	bne.n	8000b8c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000c22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8000c26:	b292      	uxth	r2, r2
 8000c28:	4413      	add	r3, r2
 8000c2a:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d179      	bne.n	8000d26 <PCD_EP_ISR_Handler+0x1a0>
 8000c32:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000c36:	b292      	uxth	r2, r2
 8000c38:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000c42:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8000c46:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8000c4a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000c54:	682a      	ldr	r2, [r5, #0]
 8000c56:	8813      	ldrh	r3, [r2, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c62:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6e:	8013      	strh	r3, [r2, #0]
 8000c70:	e78c      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c72:	8803      	ldrh	r3, [r0, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c8a:	682a      	ldr	r2, [r5, #0]
 8000c8c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000c96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000ca0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ca8:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000caa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000cac:	4413      	add	r3, r2
 8000cae:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f002 fb3f 	bl	8003336 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000cb8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f43f af65 	beq.w	8000b8c <PCD_EP_ISR_Handler+0x6>
 8000cc2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f47f af61 	bne.w	8000b8c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000cca:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8000cce:	682a      	ldr	r2, [r5, #0]
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8000cde:	e755      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ce0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 8000cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cee:	3306      	adds	r3, #6
 8000cf0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000cf4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cfc:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000d00:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8000d04:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 8000d08:	f002 fa34 	bl	8003174 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d0c:	682a      	ldr	r2, [r5, #0]
 8000d0e:	8813      	ldrh	r3, [r2, #0]
 8000d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d14:	051b      	lsls	r3, r3, #20
 8000d16:	0d1b      	lsrs	r3, r3, #20
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f002 fadc 	bl	80032dc <HAL_PCD_SetupStageCallback>
 8000d24:	e732      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d26:	2a3e      	cmp	r2, #62	; 0x3e
 8000d28:	d809      	bhi.n	8000d3e <PCD_EP_ISR_Handler+0x1b8>
 8000d2a:	0851      	lsrs	r1, r2, #1
 8000d2c:	f012 0f01 	tst.w	r2, #1
 8000d30:	d000      	beq.n	8000d34 <PCD_EP_ISR_Handler+0x1ae>
 8000d32:	3101      	adds	r1, #1
 8000d34:	028a      	lsls	r2, r1, #10
 8000d36:	b292      	uxth	r2, r2
 8000d38:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000d3c:	e78a      	b.n	8000c54 <PCD_EP_ISR_Handler+0xce>
 8000d3e:	0951      	lsrs	r1, r2, #5
 8000d40:	f012 0f1f 	tst.w	r2, #31
 8000d44:	d100      	bne.n	8000d48 <PCD_EP_ISR_Handler+0x1c2>
 8000d46:	3901      	subs	r1, #1
 8000d48:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8000d4c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8000d50:	b292      	uxth	r2, r2
 8000d52:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000d56:	e77d      	b.n	8000c54 <PCD_EP_ISR_Handler+0xce>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d58:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000d5c:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d5e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000d62:	d153      	bne.n	8000e0c <PCD_EP_ISR_Handler+0x286>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000d64:	f016 0f80 	tst.w	r6, #128	; 0x80
 8000d68:	f43f af10 	beq.w	8000b8c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8000d6c:	1c62      	adds	r2, r4, #1
 8000d6e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8000d72:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d76:	6828      	ldr	r0, [r5, #0]
 8000d78:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8000d94:	78cb      	ldrb	r3, [r1, #3]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d007      	beq.n	8000daa <PCD_EP_ISR_Handler+0x224>
 8000d9a:	b133      	cbz	r3, 8000daa <PCD_EP_ISR_Handler+0x224>
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	f040 810a 	bne.w	8000fb6 <PCD_EP_ISR_Handler+0x430>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8000da2:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000da6:	f040 8106 	bne.w	8000fb6 <PCD_EP_ISR_Handler+0x430>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000daa:	6828      	ldr	r0, [r5, #0]
 8000dac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	1c62      	adds	r2, r4, #1
 8000db4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000db8:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8000dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000dc6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8000dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8000dce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000dd2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000dd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f240 80d8 	bls.w	8000f8e <PCD_EP_ISR_Handler+0x408>
            ep->xfer_len -= TxByteNbre;
 8000dde:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8000de2:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000dea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000dee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000df2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 80d1 	bne.w	8000f9c <PCD_EP_ISR_Handler+0x416>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000dfa:	3401      	adds	r4, #1
 8000dfc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000e00:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 8000e04:	4628      	mov	r0, r5
 8000e06:	f002 fa96 	bl	8003336 <HAL_PCD_DataInStageCallback>
 8000e0a:	e6bf      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e0c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8000e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	0d1b      	lsrs	r3, r3, #20
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8000e20:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000e24:	00c9      	lsls	r1, r1, #3
 8000e26:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8000e2a:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8000e2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e32:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e36:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d142      	bne.n	8000ec4 <PCD_EP_ISR_Handler+0x33e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e3e:	6828      	ldr	r0, [r5, #0]
 8000e40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000e4a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000e4e:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8000e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e56:	3306      	adds	r3, #6
 8000e58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e5c:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8000e60:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8000e64:	bb17      	cbnz	r7, 8000eac <PCD_EP_ISR_Handler+0x326>
        ep->xfer_count += count;
 8000e66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e6a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e6e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e72:	443a      	add	r2, r7
 8000e74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000e78:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000e7c:	443a      	add	r2, r7
 8000e7e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000e82:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000e86:	b13b      	cbz	r3, 8000e98 <PCD_EP_ISR_Handler+0x312>
 8000e88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000e90:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000e94:	429f      	cmp	r7, r3
 8000e96:	d275      	bcs.n	8000f84 <PCD_EP_ISR_Handler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000e98:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000e9c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000ea0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	f002 fa2b 	bl	8003300 <HAL_PCD_DataOutStageCallback>
 8000eaa:	e75b      	b.n	8000d64 <PCD_EP_ISR_Handler+0x1de>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000eac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000eb0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8000eba:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000ebe:	f002 f959 	bl	8003174 <USB_ReadPMA>
 8000ec2:	e7d0      	b.n	8000e66 <PCD_EP_ISR_Handler+0x2e0>
          if (ep->type == EP_TYPE_BULK)
 8000ec4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000ec8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000ecc:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d035      	beq.n	8000f40 <PCD_EP_ISR_Handler+0x3ba>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000ed4:	6829      	ldr	r1, [r5, #0]
 8000ed6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000eda:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000ede:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8000ee2:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ef8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000efc:	6828      	ldr	r0, [r5, #0]
 8000efe:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8000f02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f06:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000f0a:	d020      	beq.n	8000f4e <PCD_EP_ISR_Handler+0x3c8>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f16:	3302      	adds	r3, #2
 8000f18:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f1c:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8000f20:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8000f24:	2f00      	cmp	r7, #0
 8000f26:	d09e      	beq.n	8000e66 <PCD_EP_ISR_Handler+0x2e0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f28:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000f2c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8000f30:	463b      	mov	r3, r7
 8000f32:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8000f36:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000f3a:	f002 f91b 	bl	8003174 <USB_ReadPMA>
 8000f3e:	e792      	b.n	8000e66 <PCD_EP_ISR_Handler+0x2e0>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8000f40:	4632      	mov	r2, r6
 8000f42:	4641      	mov	r1, r8
 8000f44:	4628      	mov	r0, r5
 8000f46:	f7ff fae4 	bl	8000512 <HAL_PCD_EP_DB_Receive>
 8000f4a:	4607      	mov	r7, r0
 8000f4c:	e78b      	b.n	8000e66 <PCD_EP_ISR_Handler+0x2e0>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f58:	3306      	adds	r3, #6
 8000f5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000f5e:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8000f62:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	f43f af7d 	beq.w	8000e66 <PCD_EP_ISR_Handler+0x2e0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f6c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000f70:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8000f74:	463b      	mov	r3, r7
 8000f76:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8000f7a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000f7e:	f002 f8f9 	bl	8003174 <USB_ReadPMA>
 8000f82:	e770      	b.n	8000e66 <PCD_EP_ISR_Handler+0x2e0>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8000f84:	4641      	mov	r1, r8
 8000f86:	6828      	ldr	r0, [r5, #0]
 8000f88:	f001 fc9b 	bl	80028c2 <USB_EPStartXfer>
 8000f8c:	e6ea      	b.n	8000d64 <PCD_EP_ISR_Handler+0x1de>
            ep->xfer_len = 0U;
 8000f8e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000f92:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000f96:	2600      	movs	r6, #0
 8000f98:	6416      	str	r6, [r2, #64]	; 0x40
 8000f9a:	e726      	b.n	8000dea <PCD_EP_ISR_Handler+0x264>
            ep->xfer_buff += TxByteNbre;
 8000f9c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000fa0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8000fa4:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8000fa6:	441e      	add	r6, r3
 8000fa8:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000faa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000fac:	4423      	add	r3, r4
 8000fae:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fb0:	f001 fc87 	bl	80028c2 <USB_EPStartXfer>
 8000fb4:	e5ea      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8000fb6:	4632      	mov	r2, r6
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f7ff fbd4 	bl	8000766 <HAL_PCD_EP_DB_Transmit>
 8000fbe:	e5e5      	b.n	8000b8c <PCD_EP_ISR_Handler+0x6>
}
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000fc6 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8000fc6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00d      	beq.n	8000fea <HAL_PCD_SetAddress+0x24>
{
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000fd8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fdc:	6800      	ldr	r0, [r0, #0]
 8000fde:	f001 fc4d 	bl	800287c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8000fe8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000fea:	2002      	movs	r0, #2
}
 8000fec:	4770      	bx	lr

08000fee <HAL_PCD_IRQHandler>:
{
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ff4:	6800      	ldr	r0, [r0, #0]
 8000ff6:	f001 fc4b 	bl	8002890 <USB_ReadInterrupts>
 8000ffa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000ffe:	d132      	bne.n	8001066 <HAL_PCD_IRQHandler+0x78>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f001 fc45 	bl	8002890 <USB_ReadInterrupts>
 8001006:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800100a:	d130      	bne.n	800106e <HAL_PCD_IRQHandler+0x80>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	f001 fc3f 	bl	8002890 <USB_ReadInterrupts>
 8001012:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001016:	d008      	beq.n	800102a <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001018:	6822      	ldr	r2, [r4, #0]
 800101a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800101e:	b29b      	uxth	r3, r3
 8001020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001024:	b29b      	uxth	r3, r3
 8001026:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	f001 fc30 	bl	8002890 <USB_ReadInterrupts>
 8001030:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001034:	d008      	beq.n	8001048 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800103c:	b29b      	uxth	r3, r3
 800103e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001042:	b29b      	uxth	r3, r3
 8001044:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001048:	6820      	ldr	r0, [r4, #0]
 800104a:	f001 fc21 	bl	8002890 <USB_ReadInterrupts>
 800104e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001052:	d11d      	bne.n	8001090 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001054:	6820      	ldr	r0, [r4, #0]
 8001056:	f001 fc1b 	bl	8002890 <USB_ReadInterrupts>
 800105a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800105e:	f000 808b 	beq.w	8001178 <HAL_PCD_IRQHandler+0x18a>
    for (i = 0U; i < 8U; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	e03d      	b.n	80010e2 <HAL_PCD_IRQHandler+0xf4>
    (void)PCD_EP_ISR_Handler(hpcd);
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff fd8d 	bl	8000b86 <PCD_EP_ISR_Handler>
 800106c:	e7c8      	b.n	8001000 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001074:	b29b      	uxth	r3, r3
 8001076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800107a:	b29b      	uxth	r3, r3
 800107c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001080:	4620      	mov	r0, r4
 8001082:	f002 f980 	bl	8003386 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001086:	2100      	movs	r1, #0
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff ff9c 	bl	8000fc6 <HAL_PCD_SetAddress>
 800108e:	e7bd      	b.n	800100c <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001096:	b29b      	uxth	r3, r3
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	b29b      	uxth	r3, r3
 800109e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010a2:	6822      	ldr	r2, [r4, #0]
 80010a4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f023 0308 	bic.w	r3, r3, #8
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80010b4:	4620      	mov	r0, r4
 80010b6:	f002 f9a1 	bl	80033fc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010ba:	6822      	ldr	r2, [r4, #0]
 80010bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80010cc:	e7c2      	b.n	8001054 <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80010d4:	aa04      	add	r2, sp, #16
 80010d6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80010da:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 80010de:	3301      	adds	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d9f3      	bls.n	80010ce <HAL_PCD_IRQHandler+0xe0>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	b29b      	uxth	r3, r3
 8001104:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800110e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001112:	d0f9      	beq.n	8001108 <HAL_PCD_IRQHandler+0x11a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001114:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001118:	b292      	uxth	r2, r2
 800111a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800111e:	b292      	uxth	r2, r2
 8001120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	e009      	b.n	800113c <HAL_PCD_IRQHandler+0x14e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	a904      	add	r1, sp, #16
 800112c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001130:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8001134:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8001138:	3301      	adds	r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9f3      	bls.n	8001128 <HAL_PCD_IRQHandler+0x13a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001146:	b29b      	uxth	r3, r3
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001156:	b29b      	uxth	r3, r3
 8001158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800115c:	b29b      	uxth	r3, r3
 800115e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001168:	b29b      	uxth	r3, r3
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001172:	4620      	mov	r0, r4
 8001174:	f002 f928 	bl	80033c8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	f001 fb89 	bl	8002890 <USB_ReadInterrupts>
 800117e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001182:	d110      	bne.n	80011a6 <HAL_PCD_IRQHandler+0x1b8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f001 fb83 	bl	8002890 <USB_ReadInterrupts>
 800118a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800118e:	d008      	beq.n	80011a2 <HAL_PCD_IRQHandler+0x1b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001190:	6822      	ldr	r2, [r4, #0]
 8001192:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001196:	b29b      	uxth	r3, r3
 8001198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800119c:	b29b      	uxth	r3, r3
 800119e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80011a2:	b004      	add	sp, #16
 80011a4:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80011b8:	4620      	mov	r0, r4
 80011ba:	f002 f8d6 	bl	800336a <HAL_PCD_SOFCallback>
 80011be:	e7e1      	b.n	8001184 <HAL_PCD_IRQHandler+0x196>

080011c0 <HAL_PCD_EP_Open>:
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	4605      	mov	r5, r0
 80011c4:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80011c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80011ca:	d126      	bne.n	800121a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011cc:	f001 0007 	and.w	r0, r1, #7
 80011d0:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80011d4:	00c9      	lsls	r1, r1, #3
 80011d6:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 80011da:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 80011dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011e0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80011e4:	2600      	movs	r6, #0
 80011e6:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80011ea:	f004 0407 	and.w	r4, r4, #7
 80011ee:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80011f0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80011f2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80011f4:	784a      	ldrb	r2, [r1, #1]
 80011f6:	b102      	cbz	r2, 80011fa <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80011f8:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d017      	beq.n	800122e <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 80011fe:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001202:	2b01      	cmp	r3, #1
 8001204:	d016      	beq.n	8001234 <HAL_PCD_EP_Open+0x74>
 8001206:	2301      	movs	r3, #1
 8001208:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800120c:	6828      	ldr	r0, [r5, #0]
 800120e:	f001 f836 	bl	800227e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001212:	2000      	movs	r0, #0
 8001214:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8001218:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800121a:	f001 0007 	and.w	r0, r1, #7
 800121e:	3001      	adds	r0, #1
 8001220:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001224:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8001228:	2601      	movs	r6, #1
 800122a:	704e      	strb	r6, [r1, #1]
 800122c:	e7dd      	b.n	80011ea <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	710b      	strb	r3, [r1, #4]
 8001232:	e7e4      	b.n	80011fe <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8001234:	2002      	movs	r0, #2
 8001236:	e7ef      	b.n	8001218 <HAL_PCD_EP_Open+0x58>

08001238 <HAL_PCD_EP_Close>:
{
 8001238:	b510      	push	{r4, lr}
 800123a:	4604      	mov	r4, r0
 800123c:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800123e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001242:	d11f      	bne.n	8001284 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001244:	f001 0207 	and.w	r2, r1, #7
 8001248:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800124c:	00c9      	lsls	r1, r1, #3
 800124e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001252:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001254:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001258:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800125c:	2000      	movs	r0, #0
 800125e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001268:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800126c:	2b01      	cmp	r3, #1
 800126e:	d013      	beq.n	8001298 <HAL_PCD_EP_Close+0x60>
 8001270:	2301      	movs	r3, #1
 8001272:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	f001 f9a0 	bl	80025bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800127c:	2000      	movs	r0, #0
 800127e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001282:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001284:	f001 0207 	and.w	r2, r1, #7
 8001288:	3201      	adds	r2, #1
 800128a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800128e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001292:	2001      	movs	r0, #1
 8001294:	7048      	strb	r0, [r1, #1]
 8001296:	e7e4      	b.n	8001262 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8001298:	2002      	movs	r0, #2
 800129a:	e7f2      	b.n	8001282 <HAL_PCD_EP_Close+0x4a>

0800129c <HAL_PCD_EP_Receive>:
{
 800129c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800129e:	f001 0407 	and.w	r4, r1, #7
 80012a2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80012a6:	00c9      	lsls	r1, r1, #3
 80012a8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80012ac:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80012ae:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80012b2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80012b6:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 80012ba:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80012c4:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c8:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012cc:	b924      	cbnz	r4, 80012d8 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ce:	6800      	ldr	r0, [r0, #0]
 80012d0:	f001 faf7 	bl	80028c2 <USB_EPStartXfer>
}
 80012d4:	2000      	movs	r0, #0
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d8:	6800      	ldr	r0, [r0, #0]
 80012da:	f001 faf2 	bl	80028c2 <USB_EPStartXfer>
 80012de:	e7f9      	b.n	80012d4 <HAL_PCD_EP_Receive+0x38>

080012e0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012e0:	f001 0107 	and.w	r1, r1, #7
 80012e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80012e8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80012ec:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80012f0:	4770      	bx	lr

080012f2 <HAL_PCD_EP_Transmit>:
{
 80012f2:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f4:	f001 0507 	and.w	r5, r1, #7
 80012f8:	1c6c      	adds	r4, r5, #1
 80012fa:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80012fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8001302:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001306:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800130a:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 800130c:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800130e:	2201      	movs	r2, #1
 8001310:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 8001314:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 800131a:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800131c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001320:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001324:	b925      	cbnz	r5, 8001330 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001326:	6800      	ldr	r0, [r0, #0]
 8001328:	f001 facb 	bl	80028c2 <USB_EPStartXfer>
}
 800132c:	2000      	movs	r0, #0
 800132e:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001330:	6800      	ldr	r0, [r0, #0]
 8001332:	f001 fac6 	bl	80028c2 <USB_EPStartXfer>
 8001336:	e7f9      	b.n	800132c <HAL_PCD_EP_Transmit+0x3a>

08001338 <HAL_PCD_EP_SetStall>:
{
 8001338:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800133a:	f001 0507 	and.w	r5, r1, #7
 800133e:	6842      	ldr	r2, [r0, #4]
 8001340:	4295      	cmp	r5, r2
 8001342:	d831      	bhi.n	80013a8 <HAL_PCD_EP_SetStall+0x70>
 8001344:	4604      	mov	r4, r0
 8001346:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001348:	f011 0f80 	tst.w	r1, #128	; 0x80
 800134c:	d11e      	bne.n	800138c <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800134e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001352:	00c9      	lsls	r1, r1, #3
 8001354:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001358:	4401      	add	r1, r0
    ep->is_in = 0U;
 800135a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800135e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8001368:	2301      	movs	r3, #1
 800136a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800136c:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800136e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001372:	2b01      	cmp	r3, #1
 8001374:	d01a      	beq.n	80013ac <HAL_PCD_EP_SetStall+0x74>
 8001376:	2301      	movs	r3, #1
 8001378:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	f001 fa07 	bl	8002790 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001382:	b15d      	cbz	r5, 800139c <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8001384:	2000      	movs	r0, #0
 8001386:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800138a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800138c:	1c6b      	adds	r3, r5, #1
 800138e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001392:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001396:	2201      	movs	r2, #1
 8001398:	704a      	strb	r2, [r1, #1]
 800139a:	e7e5      	b.n	8001368 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800139c:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	f001 fa79 	bl	8002898 <USB_EP0_OutStart>
 80013a6:	e7ed      	b.n	8001384 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	e7ee      	b.n	800138a <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 80013ac:	2002      	movs	r0, #2
 80013ae:	e7ec      	b.n	800138a <HAL_PCD_EP_SetStall+0x52>

080013b0 <HAL_PCD_EP_ClrStall>:
{
 80013b0:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013b2:	f001 010f 	and.w	r1, r1, #15
 80013b6:	6842      	ldr	r2, [r0, #4]
 80013b8:	4291      	cmp	r1, r2
 80013ba:	d830      	bhi.n	800141e <HAL_PCD_EP_ClrStall+0x6e>
{
 80013bc:	b510      	push	{r4, lr}
 80013be:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80013c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013c4:	d121      	bne.n	800140a <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c6:	f003 0207 	and.w	r2, r3, #7
 80013ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80013ce:	00c9      	lsls	r1, r1, #3
 80013d0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80013d4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80013d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013da:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80013de:	2000      	movs	r0, #0
 80013e0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80013e4:	2200      	movs	r2, #0
 80013e6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80013ee:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d015      	beq.n	8001422 <HAL_PCD_EP_ClrStall+0x72>
 80013f6:	2301      	movs	r3, #1
 80013f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013fc:	6820      	ldr	r0, [r4, #0]
 80013fe:	f001 f9ec 	bl	80027da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001402:	2000      	movs	r0, #0
 8001404:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001408:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800140a:	f003 0207 	and.w	r2, r3, #7
 800140e:	3201      	adds	r2, #1
 8001410:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001414:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8001418:	2001      	movs	r0, #1
 800141a:	7048      	strb	r0, [r1, #1]
 800141c:	e7e2      	b.n	80013e4 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
}
 8001420:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001422:	2002      	movs	r0, #2
 8001424:	e7f0      	b.n	8001408 <HAL_PCD_EP_ClrStall+0x58>

08001426 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001426:	f011 0f80 	tst.w	r1, #128	; 0x80
 800142a:	d00b      	beq.n	8001444 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142c:	f001 0107 	and.w	r1, r1, #7
 8001430:	3101      	adds	r1, #1
 8001432:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001436:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800143a:	b952      	cbnz	r2, 8001452 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800143c:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800143e:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8001444:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001448:	00c9      	lsls	r1, r1, #3
 800144a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800144e:	4401      	add	r1, r0
 8001450:	e7f3      	b.n	800143a <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8001452:	2201      	movs	r2, #1
 8001454:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001456:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	814b      	strh	r3, [r1, #10]
 800145c:	e7f0      	b.n	8001440 <HAL_PCDEx_PMAConfig+0x1a>

0800145e <HAL_PCDEx_SetConnectionState>:
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 800145e:	4770      	bx	lr

08001460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001460:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <RCC_Delay+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <RCC_Delay+0x28>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0a5b      	lsrs	r3, r3, #9
 800146e:	fb00 f303 	mul.w	r3, r0, r3
 8001472:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001474:	bf00      	nop
  }
  while (Delay --);
 8001476:	9b01      	ldr	r3, [sp, #4]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f9      	bne.n	8001474 <RCC_Delay+0x14>
}
 8001480:	b002      	add	sp, #8
 8001482:	4770      	bx	lr
 8001484:	20000118 	.word	0x20000118
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800148c:	2800      	cmp	r0, #0
 800148e:	f000 81f1 	beq.w	8001874 <HAL_RCC_OscConfig+0x3e8>
{
 8001492:	b570      	push	{r4, r5, r6, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	f013 0f01 	tst.w	r3, #1
 800149e:	d02c      	beq.n	80014fa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a0:	4baa      	ldr	r3, [pc, #680]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d01d      	beq.n	80014e8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ac:	4ba7      	ldr	r3, [pc, #668]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d012      	beq.n	80014de <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014be:	d041      	beq.n	8001544 <HAL_RCC_OscConfig+0xb8>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d155      	bne.n	8001570 <HAL_RCC_OscConfig+0xe4>
 80014c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e037      	b.n	800154e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014de:	4b9b      	ldr	r3, [pc, #620]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014e6:	d0e7      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b98      	ldr	r3, [pc, #608]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014f0:	d003      	beq.n	80014fa <HAL_RCC_OscConfig+0x6e>
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 81bf 	beq.w	8001878 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	f013 0f02 	tst.w	r3, #2
 8001500:	d075      	beq.n	80015ee <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b92      	ldr	r3, [pc, #584]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f013 0f0c 	tst.w	r3, #12
 800150a:	d05f      	beq.n	80015cc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150c:	4b8f      	ldr	r3, [pc, #572]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d054      	beq.n	80015c2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001518:	6923      	ldr	r3, [r4, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8089 	beq.w	8001632 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <HAL_RCC_OscConfig+0x2c4>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7fe fe53 	bl	80001d0 <HAL_GetTick>
 800152a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b87      	ldr	r3, [pc, #540]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 0f02 	tst.w	r3, #2
 8001534:	d174      	bne.n	8001620 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7fe fe4b 	bl	80001d0 <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e19e      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	4a81      	ldr	r2, [pc, #516]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154e:	6863      	ldr	r3, [r4, #4]
 8001550:	b343      	cbz	r3, 80015a4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001552:	f7fe fe3d 	bl	80001d0 <HAL_GetTick>
 8001556:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001558:	4b7c      	ldr	r3, [pc, #496]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001560:	d1cb      	bne.n	80014fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001562:	f7fe fe35 	bl	80001d0 <HAL_GetTick>
 8001566:	1b40      	subs	r0, r0, r5
 8001568:	2864      	cmp	r0, #100	; 0x64
 800156a:	d9f5      	bls.n	8001558 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
 800156e:	e188      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d009      	beq.n	800158a <HAL_RCC_OscConfig+0xfe>
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e7e1      	b.n	800154e <HAL_RCC_OscConfig+0xc2>
 800158a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800158e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e7d4      	b.n	800154e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80015a4:	f7fe fe14 	bl	80001d0 <HAL_GetTick>
 80015a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015b2:	d0a2      	beq.n	80014fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7fe fe0c 	bl	80001d0 <HAL_GetTick>
 80015b8:	1b40      	subs	r0, r0, r5
 80015ba:	2864      	cmp	r0, #100	; 0x64
 80015bc:	d9f5      	bls.n	80015aa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
 80015c0:	e15f      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c2:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80015ca:	d1a5      	bne.n	8001518 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f013 0f02 	tst.w	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_RCC_OscConfig+0x152>
 80015d6:	6923      	ldr	r3, [r4, #16]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	f040 814f 	bne.w	800187c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4a5b      	ldr	r2, [pc, #364]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015e6:	6961      	ldr	r1, [r4, #20]
 80015e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ec:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	f013 0f08 	tst.w	r3, #8
 80015f4:	d032      	beq.n	800165c <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f6:	69a3      	ldr	r3, [r4, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d045      	beq.n	8001688 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <HAL_RCC_OscConfig+0x2c8>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001602:	f7fe fde5 	bl	80001d0 <HAL_GetTick>
 8001606:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	f013 0f02 	tst.w	r3, #2
 8001610:	d121      	bne.n	8001656 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe fddd 	bl	80001d0 <HAL_GetTick>
 8001616:	1b40      	subs	r0, r0, r5
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f5      	bls.n	8001608 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 800161c:	2003      	movs	r0, #3
 800161e:	e130      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4a4a      	ldr	r2, [pc, #296]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001628:	6961      	ldr	r1, [r4, #20]
 800162a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e7dd      	b.n	80015ee <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_OscConfig+0x2c4>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001638:	f7fe fdca 	bl	80001d0 <HAL_GetTick>
 800163c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f013 0f02 	tst.w	r3, #2
 8001646:	d0d2      	beq.n	80015ee <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7fe fdc2 	bl	80001d0 <HAL_GetTick>
 800164c:	1b40      	subs	r0, r0, r5
 800164e:	2802      	cmp	r0, #2
 8001650:	d9f5      	bls.n	800163e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
 8001654:	e115      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff ff02 	bl	8001460 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f013 0f04 	tst.w	r3, #4
 8001662:	f000 8097 	beq.w	8001794 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800166e:	d11d      	bne.n	80016ac <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001678:	61da      	str	r2, [r3, #28]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001684:	2501      	movs	r5, #1
 8001686:	e012      	b.n	80016ae <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_RCC_OscConfig+0x2c8>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800168e:	f7fe fd9f 	bl	80001d0 <HAL_GetTick>
 8001692:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f013 0f02 	tst.w	r3, #2
 800169c:	d0de      	beq.n	800165c <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7fe fd97 	bl	80001d0 <HAL_GetTick>
 80016a2:	1b40      	subs	r0, r0, r5
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d9f5      	bls.n	8001694 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80016a8:	2003      	movs	r0, #3
 80016aa:	e0ea      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80016ac:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x2cc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016b6:	d011      	beq.n	80016dc <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b8:	68e3      	ldr	r3, [r4, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d022      	beq.n	8001704 <HAL_RCC_OscConfig+0x278>
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d138      	bne.n	8001734 <HAL_RCC_OscConfig+0x2a8>
 80016c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	621a      	str	r2, [r3, #32]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	621a      	str	r2, [r3, #32]
 80016da:	e018      	b.n	800170e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <HAL_RCC_OscConfig+0x2cc>)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016e6:	f7fe fd73 	bl	80001d0 <HAL_GetTick>
 80016ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x2cc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016f4:	d1e0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7fe fd6b 	bl	80001d0 <HAL_GetTick>
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	2864      	cmp	r0, #100	; 0x64
 80016fe:	d9f5      	bls.n	80016ec <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001700:	2003      	movs	r0, #3
 8001702:	e0be      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 8001706:	6a13      	ldr	r3, [r2, #32]
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	68e3      	ldr	r3, [r4, #12]
 8001710:	b373      	cbz	r3, 8001770 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001712:	f7fe fd5d 	bl	80001d0 <HAL_GetTick>
 8001716:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	d137      	bne.n	8001792 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7fe fd55 	bl	80001d0 <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	f241 3388 	movw	r3, #5000	; 0x1388
 800172c:	4298      	cmp	r0, r3
 800172e:	d9f3      	bls.n	8001718 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001730:	2003      	movs	r0, #3
 8001732:	e0a6      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	2b05      	cmp	r3, #5
 8001736:	d011      	beq.n	800175c <HAL_RCC_OscConfig+0x2d0>
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_RCC_OscConfig+0x2c0>)
 800173a:	6a1a      	ldr	r2, [r3, #32]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	621a      	str	r2, [r3, #32]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	f022 0204 	bic.w	r2, r2, #4
 8001748:	621a      	str	r2, [r3, #32]
 800174a:	e7e0      	b.n	800170e <HAL_RCC_OscConfig+0x282>
 800174c:	40021000 	.word	0x40021000
 8001750:	42420000 	.word	0x42420000
 8001754:	42420480 	.word	0x42420480
 8001758:	40007000 	.word	0x40007000
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 800175e:	6a1a      	ldr	r2, [r3, #32]
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	621a      	str	r2, [r3, #32]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	621a      	str	r2, [r3, #32]
 800176e:	e7ce      	b.n	800170e <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001770:	f7fe fd2e 	bl	80001d0 <HAL_GetTick>
 8001774:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f013 0f02 	tst.w	r3, #2
 800177e:	d008      	beq.n	8001792 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7fe fd26 	bl	80001d0 <HAL_GetTick>
 8001784:	1b80      	subs	r0, r0, r6
 8001786:	f241 3388 	movw	r3, #5000	; 0x1388
 800178a:	4298      	cmp	r0, r3
 800178c:	d9f3      	bls.n	8001776 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e077      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001792:	b9e5      	cbnz	r5, 80017ce <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001794:	69e3      	ldr	r3, [r4, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d072      	beq.n	8001880 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179a:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 800179c:	6852      	ldr	r2, [r2, #4]
 800179e:	f002 020c 	and.w	r2, r2, #12
 80017a2:	2a08      	cmp	r2, #8
 80017a4:	d056      	beq.n	8001854 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d017      	beq.n	80017da <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x40c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017b0:	f7fe fd0e 	bl	80001d0 <HAL_GetTick>
 80017b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017be:	d047      	beq.n	8001850 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe fd06 	bl	80001d0 <HAL_GetTick>
 80017c4:	1b00      	subs	r0, r0, r4
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
 80017cc:	e059      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4a31      	ldr	r2, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 80017d0:	69d3      	ldr	r3, [r2, #28]
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d6:	61d3      	str	r3, [r2, #28]
 80017d8:	e7dc      	b.n	8001794 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x40c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017e0:	f7fe fcf6 	bl	80001d0 <HAL_GetTick>
 80017e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017ee:	d006      	beq.n	80017fe <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7fe fcee 	bl	80001d0 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	2802      	cmp	r0, #2
 80017f8:	d9f5      	bls.n	80017e6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80017fa:	2003      	movs	r0, #3
 80017fc:	e041      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017fe:	6a23      	ldr	r3, [r4, #32]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d01a      	beq.n	800183c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	4923      	ldr	r1, [pc, #140]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 8001808:	684b      	ldr	r3, [r1, #4]
 800180a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800180e:	6a22      	ldr	r2, [r4, #32]
 8001810:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001812:	4302      	orrs	r2, r0
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_RCC_OscConfig+0x40c>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800181e:	f7fe fcd7 	bl	80001d0 <HAL_GetTick>
 8001822:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800182c:	d10e      	bne.n	800184c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7fe fccf 	bl	80001d0 <HAL_GetTick>
 8001832:	1b00      	subs	r0, r0, r4
 8001834:	2802      	cmp	r0, #2
 8001836:	d9f5      	bls.n	8001824 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001838:	2003      	movs	r0, #3
 800183a:	e022      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 800183e:	6853      	ldr	r3, [r2, #4]
 8001840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001844:	68a1      	ldr	r1, [r4, #8]
 8001846:	430b      	orrs	r3, r1
 8001848:	6053      	str	r3, [r2, #4]
 800184a:	e7dc      	b.n	8001806 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
 8001850:	2000      	movs	r0, #0
 8001852:	e016      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001854:	2b01      	cmp	r3, #1
 8001856:	d016      	beq.n	8001886 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_RCC_OscConfig+0x408>)
 800185a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001860:	6a22      	ldr	r2, [r4, #32]
 8001862:	4291      	cmp	r1, r2
 8001864:	d111      	bne.n	800188a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001866:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800186a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	4293      	cmp	r3, r2
 800186e:	d10e      	bne.n	800188e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e006      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001874:	2001      	movs	r0, #1
}
 8001876:	4770      	bx	lr
        return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e002      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001880:	2000      	movs	r0, #0
}
 8001882:	b002      	add	sp, #8
 8001884:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e7fb      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800188a:	2001      	movs	r0, #1
 800188c:	e7f9      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
 800188e:	2001      	movs	r0, #1
 8001890:	e7f7      	b.n	8001882 <HAL_RCC_OscConfig+0x3f6>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	42420060 	.word	0x42420060

0800189c <HAL_RCC_GetSysClockFreq>:
{
 800189c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	f10d 0c18 	add.w	ip, sp, #24
 80018a6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018aa:	f240 2301 	movw	r3, #513	; 0x201
 80018ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_GetSysClockFreq+0x60>)
 80018b4:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	2a08      	cmp	r2, #8
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80018be:	4810      	ldr	r0, [pc, #64]	; (8001900 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80018c0:	b006      	add	sp, #24
 80018c2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80018c8:	4462      	add	r2, ip
 80018ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80018d2:	d00c      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_GetSysClockFreq+0x60>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80018dc:	4463      	add	r3, ip
 80018de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <HAL_RCC_GetSysClockFreq+0x64>)
 80018e4:	fb00 f002 	mul.w	r0, r0, r2
 80018e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80018ec:	e7e8      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_RCC_GetSysClockFreq+0x68>)
 80018f0:	fb00 f002 	mul.w	r0, r0, r2
 80018f4:	e7e4      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x24>
 80018f6:	bf00      	nop
 80018f8:	08005d74 	.word	0x08005d74
 80018fc:	40021000 	.word	0x40021000
 8001900:	007a1200 	.word	0x007a1200
 8001904:	003d0900 	.word	0x003d0900

08001908 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001908:	2800      	cmp	r0, #0
 800190a:	f000 80a0 	beq.w	8001a4e <HAL_RCC_ClockConfig+0x146>
{
 800190e:	b570      	push	{r4, r5, r6, lr}
 8001910:	460d      	mov	r5, r1
 8001912:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x158>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	428b      	cmp	r3, r1
 800191e:	d20b      	bcs.n	8001938 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_RCC_ClockConfig+0x158>)
 8001922:	6813      	ldr	r3, [r2, #0]
 8001924:	f023 0307 	bic.w	r3, r3, #7
 8001928:	430b      	orrs	r3, r1
 800192a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	428b      	cmp	r3, r1
 8001934:	f040 808d 	bne.w	8001a52 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f013 0f02 	tst.w	r3, #2
 800193e:	d017      	beq.n	8001970 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	f013 0f04 	tst.w	r3, #4
 8001944:	d004      	beq.n	8001950 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001946:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001948:	6853      	ldr	r3, [r2, #4]
 800194a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	f013 0f08 	tst.w	r3, #8
 8001956:	d004      	beq.n	8001962 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 800195a:	6853      	ldr	r3, [r2, #4]
 800195c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001960:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001964:	6853      	ldr	r3, [r2, #4]
 8001966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196a:	68a1      	ldr	r1, [r4, #8]
 800196c:	430b      	orrs	r3, r1
 800196e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f013 0f01 	tst.w	r3, #1
 8001976:	d031      	beq.n	80019dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	6863      	ldr	r3, [r4, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d020      	beq.n	80019c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	2b02      	cmp	r3, #2
 8001980:	d025      	beq.n	80019ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f012 0f02 	tst.w	r2, #2
 800198a:	d064      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198c:	4935      	ldr	r1, [pc, #212]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 800198e:	684a      	ldr	r2, [r1, #4]
 8001990:	f022 0203 	bic.w	r2, r2, #3
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001998:	f7fe fc1a 	bl	80001d0 <HAL_GetTick>
 800199c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019ac:	d016      	beq.n	80019dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ae:	f7fe fc0f 	bl	80001d0 <HAL_GetTick>
 80019b2:	1b80      	subs	r0, r0, r6
 80019b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b8:	4298      	cmp	r0, r3
 80019ba:	d9f0      	bls.n	800199e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80019bc:	2003      	movs	r0, #3
 80019be:	e045      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c0:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80019c8:	d1e0      	bne.n	800198c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	e03e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019d6:	d1d9      	bne.n	800198c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
 80019da:	e037      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_ClockConfig+0x158>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	42ab      	cmp	r3, r5
 80019e6:	d90a      	bls.n	80019fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_RCC_ClockConfig+0x158>)
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	f023 0307 	bic.w	r3, r3, #7
 80019f0:	432b      	orrs	r3, r5
 80019f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	42ab      	cmp	r3, r5
 80019fc:	d12d      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	f013 0f04 	tst.w	r3, #4
 8001a04:	d006      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001a08:	6853      	ldr	r3, [r2, #4]
 8001a0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a0e:	68e1      	ldr	r1, [r4, #12]
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	f013 0f08 	tst.w	r3, #8
 8001a1a:	d007      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001a1e:	6853      	ldr	r3, [r2, #4]
 8001a20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a24:	6921      	ldr	r1, [r4, #16]
 8001a26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a2a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2c:	f7ff ff36 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_ClockConfig+0x15c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x160>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	40d8      	lsrs	r0, r3
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x164>)
 8001a40:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x168>)
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f7fe fb81 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
}
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
}
 8001a50:	4770      	bx	lr
    return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	e7fa      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e7f8      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e7f6      	b.n	8001a4c <HAL_RCC_ClockConfig+0x144>
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	08005d5c 	.word	0x08005d5c
 8001a6c:	20000118 	.word	0x20000118
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a7a:	6803      	ldr	r3, [r0, #0]
 8001a7c:	f013 0f01 	tst.w	r3, #1
 8001a80:	d034      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a8a:	d147      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a94:	61da      	str	r2, [r3, #28]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aa0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001aaa:	d039      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ab4:	d011      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001ab6:	6862      	ldr	r2, [r4, #4]
 8001ab8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d00c      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001ac2:	6a13      	ldr	r3, [r2, #32]
 8001ac4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac8:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001aca:	2601      	movs	r6, #1
 8001acc:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ace:	2600      	movs	r6, #0
 8001ad0:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ad2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ad4:	f013 0f01 	tst.w	r3, #1
 8001ad8:	d136      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001adc:	6a13      	ldr	r3, [r2, #32]
 8001ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae2:	6861      	ldr	r1, [r4, #4]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae8:	2d00      	cmp	r5, #0
 8001aea:	d13e      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	f013 0f02 	tst.w	r3, #2
 8001af2:	d006      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001af4:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001afc:	68a1      	ldr	r1, [r4, #8]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	f013 0f10 	tst.w	r3, #16
 8001b08:	d034      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001b0c:	6853      	ldr	r3, [r2, #4]
 8001b0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b12:	68e1      	ldr	r1, [r4, #12]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e02c      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x102>
    FlagStatus pwrclkchanged = RESET;
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	e7c0      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b2a:	f7fe fb51 	bl	80001d0 <HAL_GetTick>
 8001b2e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b38:	d1b8      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7fe fb49 	bl	80001d0 <HAL_GetTick>
 8001b3e:	1b80      	subs	r0, r0, r6
 8001b40:	2864      	cmp	r0, #100	; 0x64
 8001b42:	d9f5      	bls.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	e016      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x102>
        tickstart = HAL_GetTick();
 8001b48:	f7fe fb42 	bl	80001d0 <HAL_GetTick>
 8001b4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f013 0f02 	tst.w	r3, #2
 8001b56:	d1c0      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7fe fb3a 	bl	80001d0 <HAL_GetTick>
 8001b5c:	1b80      	subs	r0, r0, r6
 8001b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b62:	4298      	cmp	r0, r3
 8001b64:	d9f3      	bls.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 8001b66:	2003      	movs	r0, #3
 8001b68:	e005      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6a:	69d3      	ldr	r3, [r2, #28]
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	e7bb      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001b74:	2000      	movs	r0, #0
}
 8001b76:	b002      	add	sp, #8
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42420440 	.word	0x42420440

08001b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b88:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8a:	6a03      	ldr	r3, [r0, #32]
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b94:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b96:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b98:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b9c:	680c      	ldr	r4, [r1, #0]
 8001b9e:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ba2:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ba6:	688b      	ldr	r3, [r1, #8]
 8001ba8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001baa:	4c0d      	ldr	r4, [pc, #52]	; (8001be0 <TIM_OC1_SetConfig+0x58>)
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	d009      	beq.n	8001bc4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <TIM_OC1_SetConfig+0x58>)
 8001bb2:	42a0      	cmp	r0, r4
 8001bb4:	d00d      	beq.n	8001bd2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bb6:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bb8:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bba:	684a      	ldr	r2, [r1, #4]
 8001bbc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bbe:	6203      	str	r3, [r0, #32]
}
 8001bc0:	bc70      	pop	{r4, r5, r6}
 8001bc2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bc4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bc8:	68ca      	ldr	r2, [r1, #12]
 8001bca:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	e7ee      	b.n	8001bb0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bd2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001bd6:	694a      	ldr	r2, [r1, #20]
 8001bd8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bda:	698e      	ldr	r6, [r1, #24]
 8001bdc:	4316      	orrs	r6, r2
 8001bde:	e7ea      	b.n	8001bb6 <TIM_OC1_SetConfig+0x2e>
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001be4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001be6:	6a03      	ldr	r3, [r0, #32]
 8001be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bf0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001bf2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bf4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bf8:	680c      	ldr	r4, [r1, #0]
 8001bfa:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c00:	688c      	ldr	r4, [r1, #8]
 8001c02:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c06:	4c0f      	ldr	r4, [pc, #60]	; (8001c44 <TIM_OC3_SetConfig+0x60>)
 8001c08:	42a0      	cmp	r0, r4
 8001c0a:	d009      	beq.n	8001c20 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c0c:	4c0d      	ldr	r4, [pc, #52]	; (8001c44 <TIM_OC3_SetConfig+0x60>)
 8001c0e:	42a0      	cmp	r0, r4
 8001c10:	d00e      	beq.n	8001c30 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c12:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c14:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c16:	684a      	ldr	r2, [r1, #4]
 8001c18:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c1a:	6203      	str	r3, [r0, #32]
}
 8001c1c:	bc30      	pop	{r4, r5}
 8001c1e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c24:	68cc      	ldr	r4, [r1, #12]
 8001c26:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c2e:	e7ed      	b.n	8001c0c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c30:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c34:	694c      	ldr	r4, [r1, #20]
 8001c36:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c3a:	698c      	ldr	r4, [r1, #24]
 8001c3c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8001c40:	e7e7      	b.n	8001c12 <TIM_OC3_SetConfig+0x2e>
 8001c42:	bf00      	nop
 8001c44:	40012c00 	.word	0x40012c00

08001c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c4a:	6a03      	ldr	r3, [r0, #32]
 8001c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c56:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c58:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c5c:	680d      	ldr	r5, [r1, #0]
 8001c5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c66:	688d      	ldr	r5, [r1, #8]
 8001c68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c6c:	4d07      	ldr	r5, [pc, #28]	; (8001c8c <TIM_OC4_SetConfig+0x44>)
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d006      	beq.n	8001c80 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c74:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c76:	684a      	ldr	r2, [r1, #4]
 8001c78:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c7a:	6203      	str	r3, [r0, #32]
}
 8001c7c:	bc30      	pop	{r4, r5}
 8001c7e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c80:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c84:	694d      	ldr	r5, [r1, #20]
 8001c86:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001c8a:	e7f2      	b.n	8001c72 <TIM_OC4_SetConfig+0x2a>
 8001c8c:	40012c00 	.word	0x40012c00

08001c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c90:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c92:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c94:	6a05      	ldr	r5, [r0, #32]
 8001c96:	f025 0501 	bic.w	r5, r5, #1
 8001c9a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c9c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c9e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ca2:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ca6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001caa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cac:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cae:	6203      	str	r3, [r0, #32]
}
 8001cb0:	bc30      	pop	{r4, r5}
 8001cb2:	4770      	bx	lr

08001cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cb6:	6a05      	ldr	r5, [r0, #32]
 8001cb8:	f025 0510 	bic.w	r5, r5, #16
 8001cbc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cbe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cc0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cc2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cc6:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cd2:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cd4:	6203      	str	r3, [r0, #32]
}
 8001cd6:	bc30      	pop	{r4, r5}
 8001cd8:	4770      	bx	lr

08001cda <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cda:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce6:	6083      	str	r3, [r0, #8]
}
 8001ce8:	4770      	bx	lr

08001cea <HAL_TIM_PWM_MspInit>:
}
 8001cea:	4770      	bx	lr

08001cec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001cec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <TIM_Base_SetConfig+0x70>)
 8001cf0:	4290      	cmp	r0, r2
 8001cf2:	d00a      	beq.n	8001d0a <TIM_Base_SetConfig+0x1e>
 8001cf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cf8:	d007      	beq.n	8001d0a <TIM_Base_SetConfig+0x1e>
 8001cfa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cfe:	4290      	cmp	r0, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_Base_SetConfig+0x1e>
 8001d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d06:	4290      	cmp	r0, r2
 8001d08:	d103      	bne.n	8001d12 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d0e:	684a      	ldr	r2, [r1, #4]
 8001d10:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <TIM_Base_SetConfig+0x70>)
 8001d14:	4290      	cmp	r0, r2
 8001d16:	d00a      	beq.n	8001d2e <TIM_Base_SetConfig+0x42>
 8001d18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d1c:	d007      	beq.n	8001d2e <TIM_Base_SetConfig+0x42>
 8001d1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d22:	4290      	cmp	r0, r2
 8001d24:	d003      	beq.n	8001d2e <TIM_Base_SetConfig+0x42>
 8001d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	d103      	bne.n	8001d36 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d32:	68ca      	ldr	r2, [r1, #12]
 8001d34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3a:	694a      	ldr	r2, [r1, #20]
 8001d3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d40:	688b      	ldr	r3, [r1, #8]
 8001d42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001d44:	680b      	ldr	r3, [r1, #0]
 8001d46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <TIM_Base_SetConfig+0x70>)
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d002      	beq.n	8001d54 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	6143      	str	r3, [r0, #20]
}
 8001d52:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001d54:	690b      	ldr	r3, [r1, #16]
 8001d56:	6303      	str	r3, [r0, #48]	; 0x30
 8001d58:	e7f9      	b.n	8001d4e <TIM_Base_SetConfig+0x62>
 8001d5a:	bf00      	nop
 8001d5c:	40012c00 	.word	0x40012c00

08001d60 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001d60:	b340      	cbz	r0, 8001db4 <HAL_TIM_Base_Init+0x54>
{
 8001d62:	b510      	push	{r4, lr}
 8001d64:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d6a:	b1f3      	cbz	r3, 8001daa <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d72:	4621      	mov	r1, r4
 8001d74:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d78:	f7ff ffb8 	bl	8001cec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001d86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001d8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001d8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001da6:	2000      	movs	r0, #0
}
 8001da8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001dae:	f003 fddb 	bl	8005968 <HAL_TIM_Base_MspInit>
 8001db2:	e7db      	b.n	8001d6c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001db4:	2001      	movs	r0, #1
}
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001db8:	b340      	cbz	r0, 8001e0c <HAL_TIM_PWM_Init+0x54>
{
 8001dba:	b510      	push	{r4, lr}
 8001dbc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001dbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dc2:	b1f3      	cbz	r3, 8001e02 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8001dd0:	f7ff ff8c 	bl	8001cec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001dde:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001de2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001de6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001df2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001dfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001dfe:	2000      	movs	r0, #0
}
 8001e00:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e06:	f7ff ff70 	bl	8001cea <HAL_TIM_PWM_MspInit>
 8001e0a:	e7db      	b.n	8001dc4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
}
 8001e0e:	4770      	bx	lr

08001e10 <TIM_OC2_SetConfig>:
{
 8001e10:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e12:	6a03      	ldr	r3, [r0, #32]
 8001e14:	f023 0310 	bic.w	r3, r3, #16
 8001e18:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e1a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e1e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e20:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e24:	680d      	ldr	r5, [r1, #0]
 8001e26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001e2a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e2e:	688d      	ldr	r5, [r1, #8]
 8001e30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e34:	4d0e      	ldr	r5, [pc, #56]	; (8001e70 <TIM_OC2_SetConfig+0x60>)
 8001e36:	42a8      	cmp	r0, r5
 8001e38:	d009      	beq.n	8001e4e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e3a:	4d0d      	ldr	r5, [pc, #52]	; (8001e70 <TIM_OC2_SetConfig+0x60>)
 8001e3c:	42a8      	cmp	r0, r5
 8001e3e:	d00e      	beq.n	8001e5e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8001e40:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e42:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e44:	684a      	ldr	r2, [r1, #4]
 8001e46:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e48:	6203      	str	r3, [r0, #32]
}
 8001e4a:	bc30      	pop	{r4, r5}
 8001e4c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e52:	68cd      	ldr	r5, [r1, #12]
 8001e54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e5c:	e7ed      	b.n	8001e3a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e5e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e62:	694d      	ldr	r5, [r1, #20]
 8001e64:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e68:	698d      	ldr	r5, [r1, #24]
 8001e6a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8001e6e:	e7e7      	b.n	8001e40 <TIM_OC2_SetConfig+0x30>
 8001e70:	40012c00 	.word	0x40012c00

08001e74 <HAL_TIM_PWM_ConfigChannel>:
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001e76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d060      	beq.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001e7e:	4604      	mov	r4, r0
 8001e80:	460d      	mov	r5, r1
 8001e82:	2301      	movs	r3, #1
 8001e84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001e88:	2a0c      	cmp	r2, #12
 8001e8a:	d81a      	bhi.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001e8c:	e8df f002 	tbb	[pc, r2]
 8001e90:	19191907 	.word	0x19191907
 8001e94:	1919191d 	.word	0x1919191d
 8001e98:	19191931 	.word	0x19191931
 8001e9c:	44          	.byte	0x44
 8001e9d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e9e:	6800      	ldr	r0, [r0, #0]
 8001ea0:	f7ff fe72 	bl	8001b88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6993      	ldr	r3, [r2, #24]
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	6993      	ldr	r3, [r2, #24]
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	6993      	ldr	r3, [r2, #24]
 8001ebc:	6929      	ldr	r1, [r5, #16]
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001eca:	6800      	ldr	r0, [r0, #0]
 8001ecc:	f7ff ffa0 	bl	8001e10 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	6993      	ldr	r3, [r2, #24]
 8001ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001eda:	6822      	ldr	r2, [r4, #0]
 8001edc:	6993      	ldr	r3, [r2, #24]
 8001ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ee2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ee4:	6822      	ldr	r2, [r4, #0]
 8001ee6:	6993      	ldr	r3, [r2, #24]
 8001ee8:	6929      	ldr	r1, [r5, #16]
 8001eea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001eee:	6193      	str	r3, [r2, #24]
      break;
 8001ef0:	e7e7      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ef2:	6800      	ldr	r0, [r0, #0]
 8001ef4:	f7ff fe76 	bl	8001be4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	69d3      	ldr	r3, [r2, #28]
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	69d3      	ldr	r3, [r2, #28]
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	69d3      	ldr	r3, [r2, #28]
 8001f10:	6929      	ldr	r1, [r5, #16]
 8001f12:	430b      	orrs	r3, r1
 8001f14:	61d3      	str	r3, [r2, #28]
      break;
 8001f16:	e7d4      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f18:	6800      	ldr	r0, [r0, #0]
 8001f1a:	f7ff fe95 	bl	8001c48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	69d3      	ldr	r3, [r2, #28]
 8001f22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f26:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	69d3      	ldr	r3, [r2, #28]
 8001f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	69d3      	ldr	r3, [r2, #28]
 8001f36:	6929      	ldr	r1, [r5, #16]
 8001f38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f3c:	61d3      	str	r3, [r2, #28]
      break;
 8001f3e:	e7c0      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001f40:	2002      	movs	r0, #2
 8001f42:	e7c1      	b.n	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x54>

08001f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f44:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f46:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f48:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f4c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001f50:	430a      	orrs	r2, r1
 8001f52:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f54:	6082      	str	r2, [r0, #8]
}
 8001f56:	bc10      	pop	{r4}
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d066      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0xd6>
{
 8001f62:	b510      	push	{r4, lr}
 8001f64:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f66:	2301      	movs	r3, #1
 8001f68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f7e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	2b60      	cmp	r3, #96	; 0x60
 8001f84:	d040      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0xae>
 8001f86:	d822      	bhi.n	8001fce <HAL_TIM_ConfigClockSource+0x74>
 8001f88:	2b40      	cmp	r3, #64	; 0x40
 8001f8a:	d047      	beq.n	800201c <HAL_TIM_ConfigClockSource+0xc2>
 8001f8c:	d90b      	bls.n	8001fa6 <HAL_TIM_ConfigClockSource+0x4c>
 8001f8e:	2b50      	cmp	r3, #80	; 0x50
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f92:	68ca      	ldr	r2, [r1, #12]
 8001f94:	6849      	ldr	r1, [r1, #4]
 8001f96:	6800      	ldr	r0, [r0, #0]
 8001f98:	f7ff fe7a 	bl	8001c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f9c:	2150      	movs	r1, #80	; 0x50
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	f7ff fe9b 	bl	8001cda <TIM_ITRx_SetConfig>
      break;
 8001fa4:	e004      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_ConfigClockSource+0x6a>
 8001faa:	d908      	bls.n	8001fbe <HAL_TIM_ConfigClockSource+0x64>
 8001fac:	2b30      	cmp	r3, #48	; 0x30
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fbc:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001fbe:	b10b      	cbz	r3, 8001fc4 <HAL_TIM_ConfigClockSource+0x6a>
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d1f5      	bne.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6820      	ldr	r0, [r4, #0]
 8001fc8:	f7ff fe87 	bl	8001cda <TIM_ITRx_SetConfig>
        break;
 8001fcc:	e7f0      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001fce:	2b70      	cmp	r3, #112	; 0x70
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_ConfigClockSource+0x96>
 8001fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001fd8:	68cb      	ldr	r3, [r1, #12]
 8001fda:	684a      	ldr	r2, [r1, #4]
 8001fdc:	6889      	ldr	r1, [r1, #8]
 8001fde:	6800      	ldr	r0, [r0, #0]
 8001fe0:	f7ff ffb0 	bl	8001f44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6893      	ldr	r3, [r2, #8]
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6093      	str	r3, [r2, #8]
      break;
 8001fee:	e7df      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001ff0:	68cb      	ldr	r3, [r1, #12]
 8001ff2:	684a      	ldr	r2, [r1, #4]
 8001ff4:	6889      	ldr	r1, [r1, #8]
 8001ff6:	6800      	ldr	r0, [r0, #0]
 8001ff8:	f7ff ffa4 	bl	8001f44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002004:	6093      	str	r3, [r2, #8]
      break;
 8002006:	e7d3      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002008:	68ca      	ldr	r2, [r1, #12]
 800200a:	6849      	ldr	r1, [r1, #4]
 800200c:	6800      	ldr	r0, [r0, #0]
 800200e:	f7ff fe51 	bl	8001cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002012:	2160      	movs	r1, #96	; 0x60
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	f7ff fe60 	bl	8001cda <TIM_ITRx_SetConfig>
      break;
 800201a:	e7c9      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201c:	68ca      	ldr	r2, [r1, #12]
 800201e:	6849      	ldr	r1, [r1, #4]
 8002020:	6800      	ldr	r0, [r0, #0]
 8002022:	f7ff fe35 	bl	8001c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	6820      	ldr	r0, [r4, #0]
 800202a:	f7ff fe56 	bl	8001cda <TIM_ITRx_SetConfig>
      break;
 800202e:	e7bf      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002030:	2002      	movs	r0, #2
}
 8002032:	4770      	bx	lr

08002034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002034:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002036:	f001 011f 	and.w	r1, r1, #31
 800203a:	2301      	movs	r3, #1
 800203c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002040:	6a03      	ldr	r3, [r0, #32]
 8002042:	ea23 0304 	bic.w	r3, r3, r4
 8002046:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002048:	6a03      	ldr	r3, [r0, #32]
 800204a:	fa02 f101 	lsl.w	r1, r2, r1
 800204e:	430b      	orrs	r3, r1
 8002050:	6203      	str	r3, [r0, #32]
}
 8002052:	bc10      	pop	{r4}
 8002054:	4770      	bx	lr
	...

08002058 <HAL_TIM_PWM_Start>:
{
 8002058:	b510      	push	{r4, lr}
 800205a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800205c:	4608      	mov	r0, r1
 800205e:	bb51      	cbnz	r1, 80020b6 <HAL_TIM_PWM_Start+0x5e>
 8002060:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	bf18      	it	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d15b      	bne.n	8002128 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002070:	2800      	cmp	r0, #0
 8002072:	d139      	bne.n	80020e8 <HAL_TIM_PWM_Start+0x90>
 8002074:	2302      	movs	r3, #2
 8002076:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800207a:	2201      	movs	r2, #1
 800207c:	4601      	mov	r1, r0
 800207e:	6820      	ldr	r0, [r4, #0]
 8002080:	f7ff ffd8 	bl	8002034 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_TIM_PWM_Start+0xd8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d03d      	beq.n	8002108 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	4a28      	ldr	r2, [pc, #160]	; (8002130 <HAL_TIM_PWM_Start+0xd8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d03e      	beq.n	8002112 <HAL_TIM_PWM_Start+0xba>
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d03b      	beq.n	8002112 <HAL_TIM_PWM_Start+0xba>
 800209a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800209e:	4293      	cmp	r3, r2
 80020a0:	d037      	beq.n	8002112 <HAL_TIM_PWM_Start+0xba>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d033      	beq.n	8002112 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e039      	b.n	800212a <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b6:	2904      	cmp	r1, #4
 80020b8:	d008      	beq.n	80020cc <HAL_TIM_PWM_Start+0x74>
 80020ba:	2908      	cmp	r1, #8
 80020bc:	d00d      	beq.n	80020da <HAL_TIM_PWM_Start+0x82>
 80020be:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	bf18      	it	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	e7cf      	b.n	800206c <HAL_TIM_PWM_Start+0x14>
 80020cc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	bf18      	it	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	e7c8      	b.n	800206c <HAL_TIM_PWM_Start+0x14>
 80020da:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	bf18      	it	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	e7c1      	b.n	800206c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020e8:	2804      	cmp	r0, #4
 80020ea:	d005      	beq.n	80020f8 <HAL_TIM_PWM_Start+0xa0>
 80020ec:	2808      	cmp	r0, #8
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_PWM_Start+0xa8>
 80020f0:	2302      	movs	r3, #2
 80020f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80020f6:	e7c0      	b.n	800207a <HAL_TIM_PWM_Start+0x22>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80020fe:	e7bc      	b.n	800207a <HAL_TIM_PWM_Start+0x22>
 8002100:	2302      	movs	r3, #2
 8002102:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002106:	e7b8      	b.n	800207a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
 8002110:	e7bc      	b.n	800208c <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002118:	2a06      	cmp	r2, #6
 800211a:	d007      	beq.n	800212c <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002124:	2000      	movs	r0, #0
 8002126:	e000      	b.n	800212a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
}
 800212a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800212c:	2000      	movs	r0, #0
 800212e:	e7fc      	b.n	800212a <HAL_TIM_PWM_Start+0xd2>
 8002130:	40012c00 	.word	0x40012c00

08002134 <HAL_TIM_PWM_Stop>:
{
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
 8002138:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800213a:	2200      	movs	r2, #0
 800213c:	6800      	ldr	r0, [r0, #0]
 800213e:	f7ff ff79 	bl	8002034 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_TIM_PWM_Stop+0x80>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d014      	beq.n	8002174 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	6a19      	ldr	r1, [r3, #32]
 800214e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002152:	4211      	tst	r1, r2
 8002154:	d108      	bne.n	8002168 <HAL_TIM_PWM_Stop+0x34>
 8002156:	6a19      	ldr	r1, [r3, #32]
 8002158:	f240 4244 	movw	r2, #1092	; 0x444
 800215c:	4211      	tst	r1, r2
 800215e:	d103      	bne.n	8002168 <HAL_TIM_PWM_Stop+0x34>
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	b99d      	cbnz	r5, 8002192 <HAL_TIM_PWM_Stop+0x5e>
 800216a:	2301      	movs	r3, #1
 800216c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002170:	2000      	movs	r0, #0
 8002172:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8002174:	6a19      	ldr	r1, [r3, #32]
 8002176:	f241 1211 	movw	r2, #4369	; 0x1111
 800217a:	4211      	tst	r1, r2
 800217c:	d1e5      	bne.n	800214a <HAL_TIM_PWM_Stop+0x16>
 800217e:	6a19      	ldr	r1, [r3, #32]
 8002180:	f240 4244 	movw	r2, #1092	; 0x444
 8002184:	4211      	tst	r1, r2
 8002186:	d1e0      	bne.n	800214a <HAL_TIM_PWM_Stop+0x16>
 8002188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800218a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
 8002190:	e7db      	b.n	800214a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002192:	2d04      	cmp	r5, #4
 8002194:	d005      	beq.n	80021a2 <HAL_TIM_PWM_Stop+0x6e>
 8002196:	2d08      	cmp	r5, #8
 8002198:	d007      	beq.n	80021aa <HAL_TIM_PWM_Stop+0x76>
 800219a:	2301      	movs	r3, #1
 800219c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80021a0:	e7e6      	b.n	8002170 <HAL_TIM_PWM_Stop+0x3c>
 80021a2:	2301      	movs	r3, #1
 80021a4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80021a8:	e7e2      	b.n	8002170 <HAL_TIM_PWM_Stop+0x3c>
 80021aa:	2301      	movs	r3, #1
 80021ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80021b0:	e7de      	b.n	8002170 <HAL_TIM_PWM_Stop+0x3c>
 80021b2:	bf00      	nop
 80021b4:	40012c00 	.word	0x40012c00

080021b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d02b      	beq.n	8002218 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80021c0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80021c2:	2301      	movs	r3, #1
 80021c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021ce:	6803      	ldr	r3, [r0, #0]
 80021d0:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d2:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d8:	680a      	ldr	r2, [r1, #0]
 80021da:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021de:	6803      	ldr	r3, [r0, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00a      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d007      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d104      	bne.n	8002206 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021fc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002200:	684a      	ldr	r2, [r1, #4]
 8002202:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002204:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002206:	2301      	movs	r3, #1
 8002208:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800220c:	2300      	movs	r3, #0
 800220e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002212:	4618      	mov	r0, r3
}
 8002214:	bc30      	pop	{r4, r5}
 8002216:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002218:	2002      	movs	r0, #2
}
 800221a:	4770      	bx	lr
 800221c:	40012c00 	.word	0x40012c00

08002220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002220:	b084      	sub	sp, #16
 8002222:	a801      	add	r0, sp, #4
 8002224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002228:	2000      	movs	r0, #0
 800222a:	b004      	add	sp, #16
 800222c:	4770      	bx	lr

0800222e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800222e:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002230:	2000      	movs	r0, #0
 8002232:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002236:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800223a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 800223e:	4770      	bx	lr

08002240 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002240:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002244:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002248:	045b      	lsls	r3, r3, #17
 800224a:	0c5b      	lsrs	r3, r3, #17
 800224c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002250:	2000      	movs	r0, #0
 8002252:	4770      	bx	lr

08002254 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002254:	2000      	movs	r0, #0
 8002256:	4770      	bx	lr

08002258 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002258:	b084      	sub	sp, #16
 800225a:	b410      	push	{r4}
 800225c:	4604      	mov	r4, r0
 800225e:	a802      	add	r0, sp, #8
 8002260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002264:	2301      	movs	r3, #1
 8002266:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800226a:	2000      	movs	r0, #0
 800226c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002270:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002274:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8002278:	bc10      	pop	{r4}
 800227a:	b004      	add	sp, #16
 800227c:	4770      	bx	lr

0800227e <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800227e:	b430      	push	{r4, r5}
 8002280:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002282:	780c      	ldrb	r4, [r1, #0]
 8002284:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002288:	b292      	uxth	r2, r2
 800228a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800228e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002292:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002294:	78c8      	ldrb	r0, [r1, #3]
 8002296:	2803      	cmp	r0, #3
 8002298:	d85a      	bhi.n	8002350 <USB_ActivateEndpoint+0xd2>
 800229a:	e8df f000 	tbb	[pc, r0]
 800229e:	554e      	.short	0x554e
 80022a0:	5102      	.short	0x5102
 80022a2:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80022a4:	f248 0580 	movw	r5, #32896	; 0x8080
 80022a8:	432a      	orrs	r2, r5
 80022aa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80022ae:	780c      	ldrb	r4, [r1, #0]
 80022b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022b4:	b292      	uxth	r2, r2
 80022b6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022be:	4322      	orrs	r2, r4
 80022c0:	432a      	orrs	r2, r5
 80022c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 80022c6:	7b0a      	ldrb	r2, [r1, #12]
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	f040 80b6 	bne.w	800243a <USB_ActivateEndpoint+0x1bc>
  {
    if (ep->is_in != 0U)
 80022ce:	784a      	ldrb	r2, [r1, #1]
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d04e      	beq.n	8002372 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022d4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022d8:	b292      	uxth	r2, r2
 80022da:	441a      	add	r2, r3
 80022dc:	780c      	ldrb	r4, [r1, #0]
 80022de:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80022e2:	88cc      	ldrh	r4, [r1, #6]
 80022e4:	0864      	lsrs	r4, r4, #1
 80022e6:	0064      	lsls	r4, r4, #1
 80022e8:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022ec:	780c      	ldrb	r4, [r1, #0]
 80022ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022f6:	d00c      	beq.n	8002312 <USB_ActivateEndpoint+0x94>
 80022f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022fc:	b292      	uxth	r2, r2
 80022fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002302:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800230e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002312:	78ca      	ldrb	r2, [r1, #3]
 8002314:	2a01      	cmp	r2, #1
 8002316:	d01d      	beq.n	8002354 <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002318:	7809      	ldrb	r1, [r1, #0]
 800231a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800231e:	b292      	uxth	r2, r2
 8002320:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002328:	f082 0220 	eor.w	r2, r2, #32
 800232c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002334:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002338:	e064      	b.n	8002404 <USB_ActivateEndpoint+0x186>
      wEpRegVal |= USB_EP_CONTROL;
 800233a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800233e:	e7b1      	b.n	80022a4 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002340:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002344:	2000      	movs	r0, #0
      break;
 8002346:	e7ad      	b.n	80022a4 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800234c:	2000      	movs	r0, #0
      break;
 800234e:	e7a9      	b.n	80022a4 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8002350:	2001      	movs	r0, #1
 8002352:	e7a7      	b.n	80022a4 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002354:	7809      	ldrb	r1, [r1, #0]
 8002356:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800235a:	b292      	uxth	r2, r2
 800235c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002368:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002370:	e048      	b.n	8002404 <USB_ActivateEndpoint+0x186>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002372:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002376:	b292      	uxth	r2, r2
 8002378:	441a      	add	r2, r3
 800237a:	780c      	ldrb	r4, [r1, #0]
 800237c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002380:	88cc      	ldrh	r4, [r1, #6]
 8002382:	0864      	lsrs	r4, r4, #1
 8002384:	0064      	lsls	r4, r4, #1
 8002386:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800238a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800238e:	b292      	uxth	r2, r2
 8002390:	441a      	add	r2, r3
 8002392:	780c      	ldrb	r4, [r1, #0]
 8002394:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002398:	690c      	ldr	r4, [r1, #16]
 800239a:	bbac      	cbnz	r4, 8002408 <USB_ActivateEndpoint+0x18a>
 800239c:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80023a0:	b2a4      	uxth	r4, r4
 80023a2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80023a6:	b2a4      	uxth	r4, r4
 80023a8:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80023ac:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80023b0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80023b4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80023b8:	b2a4      	uxth	r4, r4
 80023ba:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023be:	780c      	ldrb	r4, [r1, #0]
 80023c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023c4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80023c8:	d00c      	beq.n	80023e4 <USB_ActivateEndpoint+0x166>
 80023ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023ce:	b292      	uxth	r2, r2
 80023d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80023d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023d8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023e4:	7809      	ldrb	r1, [r1, #0]
 80023e6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80023ea:	b292      	uxth	r2, r2
 80023ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023f4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80023f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002400:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002404:	bc30      	pop	{r4, r5}
 8002406:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002408:	2c3e      	cmp	r4, #62	; 0x3e
 800240a:	d809      	bhi.n	8002420 <USB_ActivateEndpoint+0x1a2>
 800240c:	0865      	lsrs	r5, r4, #1
 800240e:	f014 0f01 	tst.w	r4, #1
 8002412:	d000      	beq.n	8002416 <USB_ActivateEndpoint+0x198>
 8002414:	3501      	adds	r5, #1
 8002416:	02ad      	lsls	r5, r5, #10
 8002418:	b2ad      	uxth	r5, r5
 800241a:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 800241e:	e7ce      	b.n	80023be <USB_ActivateEndpoint+0x140>
 8002420:	0965      	lsrs	r5, r4, #5
 8002422:	f014 0f1f 	tst.w	r4, #31
 8002426:	d100      	bne.n	800242a <USB_ActivateEndpoint+0x1ac>
 8002428:	3d01      	subs	r5, #1
 800242a:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 800242e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002432:	b2a4      	uxth	r4, r4
 8002434:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8002438:	e7c1      	b.n	80023be <USB_ActivateEndpoint+0x140>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800243a:	780c      	ldrb	r4, [r1, #0]
 800243c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002440:	b292      	uxth	r2, r2
 8002442:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002446:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800244a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800244e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002452:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002456:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800245a:	b292      	uxth	r2, r2
 800245c:	441a      	add	r2, r3
 800245e:	780c      	ldrb	r4, [r1, #0]
 8002460:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002464:	890c      	ldrh	r4, [r1, #8]
 8002466:	0864      	lsrs	r4, r4, #1
 8002468:	0064      	lsls	r4, r4, #1
 800246a:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 800246e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002472:	b292      	uxth	r2, r2
 8002474:	441a      	add	r2, r3
 8002476:	780c      	ldrb	r4, [r1, #0]
 8002478:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800247c:	894c      	ldrh	r4, [r1, #10]
 800247e:	0864      	lsrs	r4, r4, #1
 8002480:	0064      	lsls	r4, r4, #1
 8002482:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 8002486:	784a      	ldrb	r2, [r1, #1]
 8002488:	2a00      	cmp	r2, #0
 800248a:	d140      	bne.n	800250e <USB_ActivateEndpoint+0x290>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800248c:	780c      	ldrb	r4, [r1, #0]
 800248e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002492:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002496:	d00c      	beq.n	80024b2 <USB_ActivateEndpoint+0x234>
 8002498:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800249c:	b292      	uxth	r2, r2
 800249e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80024a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024b2:	780c      	ldrb	r4, [r1, #0]
 80024b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80024bc:	d00c      	beq.n	80024d8 <USB_ActivateEndpoint+0x25a>
 80024be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80024c2:	b292      	uxth	r2, r2
 80024c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80024c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80024d4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024d8:	780d      	ldrb	r5, [r1, #0]
 80024da:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80024de:	b292      	uxth	r2, r2
 80024e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024e8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80024ec:	f248 0480 	movw	r4, #32896	; 0x8080
 80024f0:	4322      	orrs	r2, r4
 80024f2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024f6:	7809      	ldrb	r1, [r1, #0]
 80024f8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80024fc:	b292      	uxth	r2, r2
 80024fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002506:	4322      	orrs	r2, r4
 8002508:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800250c:	e77a      	b.n	8002404 <USB_ActivateEndpoint+0x186>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800250e:	780c      	ldrb	r4, [r1, #0]
 8002510:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002514:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002518:	d00c      	beq.n	8002534 <USB_ActivateEndpoint+0x2b6>
 800251a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800251e:	b292      	uxth	r2, r2
 8002520:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002528:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800252c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002530:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002534:	780c      	ldrb	r4, [r1, #0]
 8002536:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800253a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800253e:	d00c      	beq.n	800255a <USB_ActivateEndpoint+0x2dc>
 8002540:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002544:	b292      	uxth	r2, r2
 8002546:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800254a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002556:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800255a:	78ca      	ldrb	r2, [r1, #3]
 800255c:	2a01      	cmp	r2, #1
 800255e:	d01e      	beq.n	800259e <USB_ActivateEndpoint+0x320>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002560:	780c      	ldrb	r4, [r1, #0]
 8002562:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002566:	b292      	uxth	r2, r2
 8002568:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800256c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002570:	f082 0220 	eor.w	r2, r2, #32
 8002574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002580:	7809      	ldrb	r1, [r1, #0]
 8002582:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002586:	b292      	uxth	r2, r2
 8002588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800258c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002598:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800259c:	e732      	b.n	8002404 <USB_ActivateEndpoint+0x186>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800259e:	780c      	ldrb	r4, [r1, #0]
 80025a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025a4:	b292      	uxth	r2, r2
 80025a6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80025aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80025ba:	e7e1      	b.n	8002580 <USB_ActivateEndpoint+0x302>

080025bc <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80025bc:	7b0b      	ldrb	r3, [r1, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d146      	bne.n	8002650 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80025c2:	784b      	ldrb	r3, [r1, #1]
 80025c4:	b313      	cbz	r3, 800260c <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025c6:	780a      	ldrb	r2, [r1, #0]
 80025c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025d0:	d00c      	beq.n	80025ec <USB_DeactivateEndpoint+0x30>
 80025d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025ec:	780a      	ldrb	r2, [r1, #0]
 80025ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002604:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002608:	2000      	movs	r0, #0
 800260a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800260c:	780a      	ldrb	r2, [r1, #0]
 800260e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002612:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002616:	d00c      	beq.n	8002632 <USB_DeactivateEndpoint+0x76>
 8002618:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002632:	780a      	ldrb	r2, [r1, #0]
 8002634:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800264e:	e7db      	b.n	8002608 <USB_DeactivateEndpoint+0x4c>
{
 8002650:	b410      	push	{r4}
    if (ep->is_in == 0U)
 8002652:	784b      	ldrb	r3, [r1, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d14e      	bne.n	80026f6 <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002658:	780a      	ldrb	r2, [r1, #0]
 800265a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800265e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002662:	d00c      	beq.n	800267e <USB_DeactivateEndpoint+0xc2>
 8002664:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800267e:	780a      	ldrb	r2, [r1, #0]
 8002680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002684:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002688:	d00c      	beq.n	80026a4 <USB_DeactivateEndpoint+0xe8>
 800268a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80026a4:	780a      	ldrb	r2, [r1, #0]
 80026a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80026c0:	780b      	ldrb	r3, [r1, #0]
 80026c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80026c6:	b292      	uxth	r2, r2
 80026c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026d0:	f248 0480 	movw	r4, #32896	; 0x8080
 80026d4:	4322      	orrs	r2, r4
 80026d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80026da:	780a      	ldrb	r2, [r1, #0]
 80026dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ea:	4323      	orrs	r3, r4
 80026ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80026f0:	2000      	movs	r0, #0
 80026f2:	bc10      	pop	{r4}
 80026f4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026f6:	780a      	ldrb	r2, [r1, #0]
 80026f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002700:	d00c      	beq.n	800271c <USB_DeactivateEndpoint+0x160>
 8002702:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800271c:	780a      	ldrb	r2, [r1, #0]
 800271e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002722:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002726:	d00c      	beq.n	8002742 <USB_DeactivateEndpoint+0x186>
 8002728:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800273e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002742:	780a      	ldrb	r2, [r1, #0]
 8002744:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800275e:	780b      	ldrb	r3, [r1, #0]
 8002760:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002764:	b292      	uxth	r2, r2
 8002766:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	f248 0480 	movw	r4, #32896	; 0x8080
 8002772:	4322      	orrs	r2, r4
 8002774:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002778:	780a      	ldrb	r2, [r1, #0]
 800277a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002788:	4323      	orrs	r3, r4
 800278a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800278e:	e7af      	b.n	80026f0 <USB_DeactivateEndpoint+0x134>

08002790 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002790:	784b      	ldrb	r3, [r1, #1]
 8002792:	b18b      	cbz	r3, 80027b8 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002794:	780a      	ldrb	r2, [r1, #0]
 8002796:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a4:	f083 0310 	eor.w	r3, r3, #16
 80027a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80027b8:	780a      	ldrb	r2, [r1, #0]
 80027ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80027d8:	e7ec      	b.n	80027b4 <USB_EPSetStall+0x24>

080027da <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80027da:	7b0b      	ldrb	r3, [r1, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d14b      	bne.n	8002878 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80027e0:	784b      	ldrb	r3, [r1, #1]
 80027e2:	b333      	cbz	r3, 8002832 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027e4:	780a      	ldrb	r2, [r1, #0]
 80027e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ee:	d00c      	beq.n	800280a <USB_EPClearStall+0x30>
 80027f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002806:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800280a:	78cb      	ldrb	r3, [r1, #3]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d033      	beq.n	8002878 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002810:	780a      	ldrb	r2, [r1, #0]
 8002812:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800281c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002820:	f083 0320 	eor.w	r3, r3, #32
 8002824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002830:	e022      	b.n	8002878 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002832:	780a      	ldrb	r2, [r1, #0]
 8002834:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002838:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800283c:	d00c      	beq.n	8002858 <USB_EPClearStall+0x7e>
 800283e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002858:	780a      	ldrb	r2, [r1, #0]
 800285a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800286c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002874:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002878:	2000      	movs	r0, #0
 800287a:	4770      	bx	lr

0800287c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800287c:	b911      	cbnz	r1, 8002884 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002884:	2000      	movs	r0, #0
 8002886:	4770      	bx	lr

08002888 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002888:	2000      	movs	r0, #0
 800288a:	4770      	bx	lr

0800288c <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800288c:	2000      	movs	r0, #0
 800288e:	4770      	bx	lr

08002890 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002890:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002894:	b280      	uxth	r0, r0
 8002896:	4770      	bx	lr

08002898 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002898:	2000      	movs	r0, #0
 800289a:	4770      	bx	lr

0800289c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800289c:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800289e:	1c5c      	adds	r4, r3, #1
 80028a0:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80028a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80028a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80028aa:	b144      	cbz	r4, 80028be <USB_WritePMA+0x22>
  {
    temp1 = *pBuf;
 80028ac:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80028ae:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 80028b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80028b4:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80028b8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80028ba:	3c01      	subs	r4, #1
 80028bc:	e7f5      	b.n	80028aa <USB_WritePMA+0xe>
  }
}
 80028be:	bc10      	pop	{r4}
 80028c0:	4770      	bx	lr

080028c2 <USB_EPStartXfer>:
{
 80028c2:	b570      	push	{r4, r5, r6, lr}
 80028c4:	4605      	mov	r5, r0
 80028c6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80028c8:	784b      	ldrb	r3, [r1, #1]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d037      	beq.n	800293e <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 80028ce:	7b0a      	ldrb	r2, [r1, #12]
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	f040 8326 	bne.w	8002f22 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 80028d6:	698b      	ldr	r3, [r1, #24]
 80028d8:	690a      	ldr	r2, [r1, #16]
 80028da:	4293      	cmp	r3, r2
 80028dc:	f240 8304 	bls.w	8002ee8 <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80028e4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	442b      	add	r3, r5
 80028ec:	7821      	ldrb	r1, [r4, #0]
 80028ee:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	f040 82fc 	bne.w	8002ef0 <USB_EPStartXfer+0x62e>
 80028f8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80028fc:	b292      	uxth	r2, r2
 80028fe:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002902:	b292      	uxth	r2, r2
 8002904:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002908:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800290c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002910:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002914:	b292      	uxth	r2, r2
 8002916:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800291a:	7822      	ldrb	r2, [r4, #0]
 800291c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800292e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800293a:	2000      	movs	r0, #0
}
 800293c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800293e:	698e      	ldr	r6, [r1, #24]
 8002940:	690a      	ldr	r2, [r1, #16]
 8002942:	4296      	cmp	r6, r2
 8002944:	d900      	bls.n	8002948 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 8002946:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8002948:	7b23      	ldrb	r3, [r4, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d039      	beq.n	80029c2 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 800294e:	78e3      	ldrb	r3, [r4, #3]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d058      	beq.n	8002a06 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8002954:	7822      	ldrb	r2, [r4, #0]
 8002956:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002964:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8002970:	6a23      	ldr	r3, [r4, #32]
 8002972:	1b9b      	subs	r3, r3, r6
 8002974:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002976:	7823      	ldrb	r3, [r4, #0]
 8002978:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 800297c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002980:	f000 8226 	beq.w	8002dd0 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002984:	7862      	ldrb	r2, [r4, #1]
 8002986:	2a00      	cmp	r2, #0
 8002988:	f040 81ca 	bne.w	8002d20 <USB_EPStartXfer+0x45e>
 800298c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002990:	b292      	uxth	r2, r2
 8002992:	442a      	add	r2, r5
 8002994:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002998:	2e00      	cmp	r6, #0
 800299a:	f040 81a8 	bne.w	8002cee <USB_EPStartXfer+0x42c>
 800299e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80029a2:	b292      	uxth	r2, r2
 80029a4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80029a8:	b292      	uxth	r2, r2
 80029aa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80029ae:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80029b2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80029b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80029ba:	b292      	uxth	r2, r2
 80029bc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80029c0:	e1b0      	b.n	8002d24 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80029c2:	b2b6      	uxth	r6, r6
 80029c4:	4633      	mov	r3, r6
 80029c6:	88e2      	ldrh	r2, [r4, #6]
 80029c8:	6961      	ldr	r1, [r4, #20]
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7ff ff66 	bl	800289c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80029d0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	442b      	add	r3, r5
 80029d8:	7822      	ldrb	r2, [r4, #0]
 80029da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80029de:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80029e2:	7822      	ldrb	r2, [r4, #0]
 80029e4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fe:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8002a02:	2000      	movs	r0, #0
 8002a04:	e79a      	b.n	800293c <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 8002a06:	6a23      	ldr	r3, [r4, #32]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f080 8152 	bcs.w	8002cb2 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002a0e:	7822      	ldrb	r2, [r4, #0]
 8002a10:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8002a2a:	6a23      	ldr	r3, [r4, #32]
 8002a2c:	1b9b      	subs	r3, r3, r6
 8002a2e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002a30:	7823      	ldrb	r3, [r4, #0]
 8002a32:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8002a36:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a3a:	f000 809d 	beq.w	8002b78 <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002a3e:	7862      	ldrb	r2, [r4, #1]
 8002a40:	bb8a      	cbnz	r2, 8002aa6 <USB_EPStartXfer+0x1e4>
 8002a42:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a46:	b292      	uxth	r2, r2
 8002a48:	442a      	add	r2, r5
 8002a4a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002a4e:	b98e      	cbnz	r6, 8002a74 <USB_EPStartXfer+0x1b2>
 8002a50:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002a54:	b292      	uxth	r2, r2
 8002a56:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002a60:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002a64:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a68:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002a72:	e01a      	b.n	8002aaa <USB_EPStartXfer+0x1e8>
 8002a74:	2e3e      	cmp	r6, #62	; 0x3e
 8002a76:	d809      	bhi.n	8002a8c <USB_EPStartXfer+0x1ca>
 8002a78:	0872      	lsrs	r2, r6, #1
 8002a7a:	f016 0f01 	tst.w	r6, #1
 8002a7e:	d000      	beq.n	8002a82 <USB_EPStartXfer+0x1c0>
 8002a80:	3201      	adds	r2, #1
 8002a82:	0292      	lsls	r2, r2, #10
 8002a84:	b292      	uxth	r2, r2
 8002a86:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002a8a:	e00e      	b.n	8002aaa <USB_EPStartXfer+0x1e8>
 8002a8c:	0972      	lsrs	r2, r6, #5
 8002a8e:	f016 0f1f 	tst.w	r6, #31
 8002a92:	d100      	bne.n	8002a96 <USB_EPStartXfer+0x1d4>
 8002a94:	3a01      	subs	r2, #1
 8002a96:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002a9a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002aa4:	e001      	b.n	8002aaa <USB_EPStartXfer+0x1e8>
 8002aa6:	2a01      	cmp	r2, #1
 8002aa8:	d02b      	beq.n	8002b02 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002aaa:	b2b3      	uxth	r3, r6
 8002aac:	8962      	ldrh	r2, [r4, #10]
 8002aae:	6961      	ldr	r1, [r4, #20]
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f7ff fef3 	bl	800289c <USB_WritePMA>
            ep->xfer_buff += len;
 8002ab6:	6963      	ldr	r3, [r4, #20]
 8002ab8:	4433      	add	r3, r6
 8002aba:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002abc:	6a23      	ldr	r3, [r4, #32]
 8002abe:	6922      	ldr	r2, [r4, #16]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d928      	bls.n	8002b16 <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 8002ac4:	1b9b      	subs	r3, r3, r6
 8002ac6:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ac8:	7863      	ldrb	r3, [r4, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d140      	bne.n	8002b50 <USB_EPStartXfer+0x28e>
 8002ace:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	442b      	add	r3, r5
 8002ad6:	7822      	ldrb	r2, [r4, #0]
 8002ad8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002adc:	b9fe      	cbnz	r6, 8002b1e <USB_EPStartXfer+0x25c>
 8002ade:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002aee:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002af2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002af6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002afa:	b292      	uxth	r2, r2
 8002afc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002b00:	e028      	b.n	8002b54 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b02:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b06:	b292      	uxth	r2, r2
 8002b08:	442a      	add	r2, r5
 8002b0a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002b0e:	b2b2      	uxth	r2, r6
 8002b10:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002b14:	e7c9      	b.n	8002aaa <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 8002b16:	2200      	movs	r2, #0
 8002b18:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002b1a:	461e      	mov	r6, r3
 8002b1c:	e7d4      	b.n	8002ac8 <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b1e:	2e3e      	cmp	r6, #62	; 0x3e
 8002b20:	d809      	bhi.n	8002b36 <USB_EPStartXfer+0x274>
 8002b22:	0872      	lsrs	r2, r6, #1
 8002b24:	f016 0f01 	tst.w	r6, #1
 8002b28:	d000      	beq.n	8002b2c <USB_EPStartXfer+0x26a>
 8002b2a:	3201      	adds	r2, #1
 8002b2c:	0292      	lsls	r2, r2, #10
 8002b2e:	b292      	uxth	r2, r2
 8002b30:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002b34:	e00e      	b.n	8002b54 <USB_EPStartXfer+0x292>
 8002b36:	0972      	lsrs	r2, r6, #5
 8002b38:	f016 0f1f 	tst.w	r6, #31
 8002b3c:	d100      	bne.n	8002b40 <USB_EPStartXfer+0x27e>
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002b44:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002b4e:	e001      	b.n	8002b54 <USB_EPStartXfer+0x292>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d006      	beq.n	8002b62 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b54:	b2b3      	uxth	r3, r6
 8002b56:	8922      	ldrh	r2, [r4, #8]
 8002b58:	6961      	ldr	r1, [r4, #20]
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	f7ff fe9e 	bl	800289c <USB_WritePMA>
 8002b60:	e73f      	b.n	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b62:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	442b      	add	r3, r5
 8002b6a:	7822      	ldrb	r2, [r4, #0]
 8002b6c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002b70:	b2b2      	uxth	r2, r6
 8002b72:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002b76:	e7ed      	b.n	8002b54 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b78:	7862      	ldrb	r2, [r4, #1]
 8002b7a:	bb8a      	cbnz	r2, 8002be0 <USB_EPStartXfer+0x31e>
 8002b7c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002b80:	b292      	uxth	r2, r2
 8002b82:	442a      	add	r2, r5
 8002b84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002b88:	b98e      	cbnz	r6, 8002bae <USB_EPStartXfer+0x2ec>
 8002b8a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b94:	b292      	uxth	r2, r2
 8002b96:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002b9a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002b9e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002ba2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002bac:	e01a      	b.n	8002be4 <USB_EPStartXfer+0x322>
 8002bae:	2e3e      	cmp	r6, #62	; 0x3e
 8002bb0:	d809      	bhi.n	8002bc6 <USB_EPStartXfer+0x304>
 8002bb2:	0872      	lsrs	r2, r6, #1
 8002bb4:	f016 0f01 	tst.w	r6, #1
 8002bb8:	d000      	beq.n	8002bbc <USB_EPStartXfer+0x2fa>
 8002bba:	3201      	adds	r2, #1
 8002bbc:	0292      	lsls	r2, r2, #10
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002bc4:	e00e      	b.n	8002be4 <USB_EPStartXfer+0x322>
 8002bc6:	0972      	lsrs	r2, r6, #5
 8002bc8:	f016 0f1f 	tst.w	r6, #31
 8002bcc:	d100      	bne.n	8002bd0 <USB_EPStartXfer+0x30e>
 8002bce:	3a01      	subs	r2, #1
 8002bd0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002bd4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002bde:	e001      	b.n	8002be4 <USB_EPStartXfer+0x322>
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	d02b      	beq.n	8002c3c <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002be4:	b2b3      	uxth	r3, r6
 8002be6:	8922      	ldrh	r2, [r4, #8]
 8002be8:	6961      	ldr	r1, [r4, #20]
 8002bea:	4628      	mov	r0, r5
 8002bec:	f7ff fe56 	bl	800289c <USB_WritePMA>
            ep->xfer_buff += len;
 8002bf0:	6963      	ldr	r3, [r4, #20]
 8002bf2:	4433      	add	r3, r6
 8002bf4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002bf6:	6a23      	ldr	r3, [r4, #32]
 8002bf8:	6922      	ldr	r2, [r4, #16]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d928      	bls.n	8002c50 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 8002bfe:	1b9b      	subs	r3, r3, r6
 8002c00:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c02:	7863      	ldrb	r3, [r4, #1]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d140      	bne.n	8002c8a <USB_EPStartXfer+0x3c8>
 8002c08:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	442b      	add	r3, r5
 8002c10:	7822      	ldrb	r2, [r4, #0]
 8002c12:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002c16:	b9fe      	cbnz	r6, 8002c58 <USB_EPStartXfer+0x396>
 8002c18:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c22:	b292      	uxth	r2, r2
 8002c24:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c28:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002c2c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002c30:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c3a:	e028      	b.n	8002c8e <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002c3c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c40:	b292      	uxth	r2, r2
 8002c42:	442a      	add	r2, r5
 8002c44:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002c48:	b2b2      	uxth	r2, r6
 8002c4a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002c4e:	e7c9      	b.n	8002be4 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 8002c50:	2200      	movs	r2, #0
 8002c52:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8002c54:	461e      	mov	r6, r3
 8002c56:	e7d4      	b.n	8002c02 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c58:	2e3e      	cmp	r6, #62	; 0x3e
 8002c5a:	d809      	bhi.n	8002c70 <USB_EPStartXfer+0x3ae>
 8002c5c:	0872      	lsrs	r2, r6, #1
 8002c5e:	f016 0f01 	tst.w	r6, #1
 8002c62:	d000      	beq.n	8002c66 <USB_EPStartXfer+0x3a4>
 8002c64:	3201      	adds	r2, #1
 8002c66:	0292      	lsls	r2, r2, #10
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c6e:	e00e      	b.n	8002c8e <USB_EPStartXfer+0x3cc>
 8002c70:	0972      	lsrs	r2, r6, #5
 8002c72:	f016 0f1f 	tst.w	r6, #31
 8002c76:	d100      	bne.n	8002c7a <USB_EPStartXfer+0x3b8>
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002c7e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002c82:	b292      	uxth	r2, r2
 8002c84:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002c88:	e001      	b.n	8002c8e <USB_EPStartXfer+0x3cc>
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d006      	beq.n	8002c9c <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002c8e:	b2b3      	uxth	r3, r6
 8002c90:	8962      	ldrh	r2, [r4, #10]
 8002c92:	6961      	ldr	r1, [r4, #20]
 8002c94:	4628      	mov	r0, r5
 8002c96:	f7ff fe01 	bl	800289c <USB_WritePMA>
 8002c9a:	e6a2      	b.n	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c9c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	442b      	add	r3, r5
 8002ca4:	7822      	ldrb	r2, [r4, #0]
 8002ca6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002caa:	b2b2      	uxth	r2, r6
 8002cac:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002cb0:	e7ed      	b.n	8002c8e <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8002cb2:	7821      	ldrb	r1, [r4, #0]
 8002cb4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002cbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cca:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002cce:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	442a      	add	r2, r5
 8002cd6:	7821      	ldrb	r1, [r4, #0]
 8002cd8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ce2:	8922      	ldrh	r2, [r4, #8]
 8002ce4:	6961      	ldr	r1, [r4, #20]
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f7ff fdd8 	bl	800289c <USB_WritePMA>
 8002cec:	e679      	b.n	80029e2 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002cee:	2e3e      	cmp	r6, #62	; 0x3e
 8002cf0:	d809      	bhi.n	8002d06 <USB_EPStartXfer+0x444>
 8002cf2:	0872      	lsrs	r2, r6, #1
 8002cf4:	f016 0f01 	tst.w	r6, #1
 8002cf8:	d000      	beq.n	8002cfc <USB_EPStartXfer+0x43a>
 8002cfa:	3201      	adds	r2, #1
 8002cfc:	0292      	lsls	r2, r2, #10
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d04:	e00e      	b.n	8002d24 <USB_EPStartXfer+0x462>
 8002d06:	0972      	lsrs	r2, r6, #5
 8002d08:	f016 0f1f 	tst.w	r6, #31
 8002d0c:	d100      	bne.n	8002d10 <USB_EPStartXfer+0x44e>
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d14:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d1e:	e001      	b.n	8002d24 <USB_EPStartXfer+0x462>
 8002d20:	2a01      	cmp	r2, #1
 8002d22:	d026      	beq.n	8002d72 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002d24:	b2b3      	uxth	r3, r6
 8002d26:	8962      	ldrh	r2, [r4, #10]
 8002d28:	6961      	ldr	r1, [r4, #20]
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	f7ff fdb6 	bl	800289c <USB_WritePMA>
          ep->xfer_buff += len;
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	4433      	add	r3, r6
 8002d34:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002d36:	6a23      	ldr	r3, [r4, #32]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d923      	bls.n	8002d86 <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 8002d3e:	1b9b      	subs	r3, r3, r6
 8002d40:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002d42:	2e00      	cmp	r6, #0
 8002d44:	f43f ae4d 	beq.w	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d48:	7863      	ldrb	r3, [r4, #1]
 8002d4a:	bb6b      	cbnz	r3, 8002da8 <USB_EPStartXfer+0x4e6>
 8002d4c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	442b      	add	r3, r5
 8002d54:	7822      	ldrb	r2, [r4, #0]
 8002d56:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002d5a:	2e3e      	cmp	r6, #62	; 0x3e
 8002d5c:	d817      	bhi.n	8002d8e <USB_EPStartXfer+0x4cc>
 8002d5e:	0872      	lsrs	r2, r6, #1
 8002d60:	f016 0f01 	tst.w	r6, #1
 8002d64:	d000      	beq.n	8002d68 <USB_EPStartXfer+0x4a6>
 8002d66:	3201      	adds	r2, #1
 8002d68:	0292      	lsls	r2, r2, #10
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002d70:	e01c      	b.n	8002dac <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d72:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002d76:	b292      	uxth	r2, r2
 8002d78:	442a      	add	r2, r5
 8002d7a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002d7e:	b2b2      	uxth	r2, r6
 8002d80:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002d84:	e7ce      	b.n	8002d24 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 8002d86:	2200      	movs	r2, #0
 8002d88:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8002d8a:	461e      	mov	r6, r3
 8002d8c:	e7d9      	b.n	8002d42 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d8e:	0972      	lsrs	r2, r6, #5
 8002d90:	f016 0f1f 	tst.w	r6, #31
 8002d94:	d100      	bne.n	8002d98 <USB_EPStartXfer+0x4d6>
 8002d96:	3a01      	subs	r2, #1
 8002d98:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002d9c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002da6:	e001      	b.n	8002dac <USB_EPStartXfer+0x4ea>
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d006      	beq.n	8002dba <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dac:	b2b3      	uxth	r3, r6
 8002dae:	8922      	ldrh	r2, [r4, #8]
 8002db0:	6961      	ldr	r1, [r4, #20]
 8002db2:	4628      	mov	r0, r5
 8002db4:	f7ff fd72 	bl	800289c <USB_WritePMA>
 8002db8:	e613      	b.n	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dba:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	442b      	add	r3, r5
 8002dc2:	7822      	ldrb	r2, [r4, #0]
 8002dc4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002dc8:	b2b2      	uxth	r2, r6
 8002dca:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002dce:	e7ed      	b.n	8002dac <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dd0:	7862      	ldrb	r2, [r4, #1]
 8002dd2:	bb8a      	cbnz	r2, 8002e38 <USB_EPStartXfer+0x576>
 8002dd4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	442a      	add	r2, r5
 8002ddc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002de0:	b98e      	cbnz	r6, 8002e06 <USB_EPStartXfer+0x544>
 8002de2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002de6:	b292      	uxth	r2, r2
 8002de8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002df2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002df6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002dfa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e04:	e01a      	b.n	8002e3c <USB_EPStartXfer+0x57a>
 8002e06:	2e3e      	cmp	r6, #62	; 0x3e
 8002e08:	d809      	bhi.n	8002e1e <USB_EPStartXfer+0x55c>
 8002e0a:	0872      	lsrs	r2, r6, #1
 8002e0c:	f016 0f01 	tst.w	r6, #1
 8002e10:	d000      	beq.n	8002e14 <USB_EPStartXfer+0x552>
 8002e12:	3201      	adds	r2, #1
 8002e14:	0292      	lsls	r2, r2, #10
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e1c:	e00e      	b.n	8002e3c <USB_EPStartXfer+0x57a>
 8002e1e:	0972      	lsrs	r2, r6, #5
 8002e20:	f016 0f1f 	tst.w	r6, #31
 8002e24:	d100      	bne.n	8002e28 <USB_EPStartXfer+0x566>
 8002e26:	3a01      	subs	r2, #1
 8002e28:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002e2c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e36:	e001      	b.n	8002e3c <USB_EPStartXfer+0x57a>
 8002e38:	2a01      	cmp	r2, #1
 8002e3a:	d026      	beq.n	8002e8a <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002e3c:	b2b3      	uxth	r3, r6
 8002e3e:	8922      	ldrh	r2, [r4, #8]
 8002e40:	6961      	ldr	r1, [r4, #20]
 8002e42:	4628      	mov	r0, r5
 8002e44:	f7ff fd2a 	bl	800289c <USB_WritePMA>
          ep->xfer_buff += len;
 8002e48:	6963      	ldr	r3, [r4, #20]
 8002e4a:	4433      	add	r3, r6
 8002e4c:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8002e4e:	6a23      	ldr	r3, [r4, #32]
 8002e50:	6922      	ldr	r2, [r4, #16]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d923      	bls.n	8002e9e <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 8002e56:	1b9b      	subs	r3, r3, r6
 8002e58:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8002e5a:	2e00      	cmp	r6, #0
 8002e5c:	f43f adc1 	beq.w	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002e60:	7863      	ldrb	r3, [r4, #1]
 8002e62:	bb6b      	cbnz	r3, 8002ec0 <USB_EPStartXfer+0x5fe>
 8002e64:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	442b      	add	r3, r5
 8002e6c:	7822      	ldrb	r2, [r4, #0]
 8002e6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002e72:	2e3e      	cmp	r6, #62	; 0x3e
 8002e74:	d817      	bhi.n	8002ea6 <USB_EPStartXfer+0x5e4>
 8002e76:	0872      	lsrs	r2, r6, #1
 8002e78:	f016 0f01 	tst.w	r6, #1
 8002e7c:	d000      	beq.n	8002e80 <USB_EPStartXfer+0x5be>
 8002e7e:	3201      	adds	r2, #1
 8002e80:	0292      	lsls	r2, r2, #10
 8002e82:	b292      	uxth	r2, r2
 8002e84:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002e88:	e01c      	b.n	8002ec4 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e8a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	442a      	add	r2, r5
 8002e92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002e96:	b2b2      	uxth	r2, r6
 8002e98:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002e9c:	e7ce      	b.n	8002e3c <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 8002ea2:	461e      	mov	r6, r3
 8002ea4:	e7d9      	b.n	8002e5a <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ea6:	0972      	lsrs	r2, r6, #5
 8002ea8:	f016 0f1f 	tst.w	r6, #31
 8002eac:	d100      	bne.n	8002eb0 <USB_EPStartXfer+0x5ee>
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002eb4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002ebe:	e001      	b.n	8002ec4 <USB_EPStartXfer+0x602>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d006      	beq.n	8002ed2 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ec4:	b2b3      	uxth	r3, r6
 8002ec6:	8962      	ldrh	r2, [r4, #10]
 8002ec8:	6961      	ldr	r1, [r4, #20]
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f7ff fce6 	bl	800289c <USB_WritePMA>
 8002ed0:	e587      	b.n	80029e2 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002ed2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	442b      	add	r3, r5
 8002eda:	7822      	ldrb	r2, [r4, #0]
 8002edc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002ee0:	b2b2      	uxth	r2, r6
 8002ee2:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002ee6:	e7ed      	b.n	8002ec4 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 8002ee8:	2200      	movs	r2, #0
 8002eea:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8002eec:	461a      	mov	r2, r3
 8002eee:	e4f9      	b.n	80028e4 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ef0:	2a3e      	cmp	r2, #62	; 0x3e
 8002ef2:	d809      	bhi.n	8002f08 <USB_EPStartXfer+0x646>
 8002ef4:	0851      	lsrs	r1, r2, #1
 8002ef6:	f012 0f01 	tst.w	r2, #1
 8002efa:	d000      	beq.n	8002efe <USB_EPStartXfer+0x63c>
 8002efc:	3101      	adds	r1, #1
 8002efe:	0289      	lsls	r1, r1, #10
 8002f00:	b289      	uxth	r1, r1
 8002f02:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8002f06:	e508      	b.n	800291a <USB_EPStartXfer+0x58>
 8002f08:	0951      	lsrs	r1, r2, #5
 8002f0a:	f012 0f1f 	tst.w	r2, #31
 8002f0e:	d100      	bne.n	8002f12 <USB_EPStartXfer+0x650>
 8002f10:	3901      	subs	r1, #1
 8002f12:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002f16:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002f1a:	b289      	uxth	r1, r1
 8002f1c:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8002f20:	e4fb      	b.n	800291a <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8002f22:	78ca      	ldrb	r2, [r1, #3]
 8002f24:	2a02      	cmp	r2, #2
 8002f26:	d045      	beq.n	8002fb4 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 8002f28:	2a01      	cmp	r2, #1
 8002f2a:	f040 8120 	bne.w	800316e <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 8002f2e:	6989      	ldr	r1, [r1, #24]
 8002f30:	6922      	ldr	r2, [r4, #16]
 8002f32:	4291      	cmp	r1, r2
 8002f34:	f240 80d4 	bls.w	80030e0 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 8002f38:	1a89      	subs	r1, r1, r2
 8002f3a:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f3c:	b9d3      	cbnz	r3, 8002f74 <USB_EPStartXfer+0x6b2>
 8002f3e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	442b      	add	r3, r5
 8002f46:	7821      	ldrb	r1, [r4, #0]
 8002f48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	f040 80cb 	bne.w	80030e8 <USB_EPStartXfer+0x826>
 8002f52:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8002f56:	b289      	uxth	r1, r1
 8002f58:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8002f5c:	b289      	uxth	r1, r1
 8002f5e:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8002f62:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8002f66:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002f6a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002f6e:	b289      	uxth	r1, r1
 8002f70:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8002f74:	7863      	ldrb	r3, [r4, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80ea 	bne.w	8003150 <USB_EPStartXfer+0x88e>
 8002f7c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	442b      	add	r3, r5
 8002f84:	7821      	ldrb	r1, [r4, #0]
 8002f86:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	f040 80c5 	bne.w	800311a <USB_EPStartXfer+0x858>
 8002f90:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002f94:	b292      	uxth	r2, r2
 8002f96:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002fa0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8002fa4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002fa8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002fb2:	e4b2      	b.n	800291a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002fb4:	b9cb      	cbnz	r3, 8002fea <USB_EPStartXfer+0x728>
 8002fb6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4403      	add	r3, r0
 8002fbe:	780a      	ldrb	r2, [r1, #0]
 8002fc0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002fc4:	690a      	ldr	r2, [r1, #16]
 8002fc6:	bb72      	cbnz	r2, 8003026 <USB_EPStartXfer+0x764>
 8002fc8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002fd8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8002fdc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002fe0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8002fea:	7863      	ldrb	r3, [r4, #1]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d14c      	bne.n	800308a <USB_EPStartXfer+0x7c8>
 8002ff0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	442b      	add	r3, r5
 8002ff8:	7822      	ldrb	r2, [r4, #0]
 8002ffa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002ffe:	6922      	ldr	r2, [r4, #16]
 8003000:	bb52      	cbnz	r2, 8003058 <USB_EPStartXfer+0x796>
 8003002:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003006:	b292      	uxth	r2, r2
 8003008:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800300c:	b292      	uxth	r2, r2
 800300e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003012:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003016:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800301a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800301e:	b292      	uxth	r2, r2
 8003020:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003024:	e033      	b.n	800308e <USB_EPStartXfer+0x7cc>
 8003026:	2a3e      	cmp	r2, #62	; 0x3e
 8003028:	d809      	bhi.n	800303e <USB_EPStartXfer+0x77c>
 800302a:	0851      	lsrs	r1, r2, #1
 800302c:	f012 0f01 	tst.w	r2, #1
 8003030:	d000      	beq.n	8003034 <USB_EPStartXfer+0x772>
 8003032:	3101      	adds	r1, #1
 8003034:	028a      	lsls	r2, r1, #10
 8003036:	b292      	uxth	r2, r2
 8003038:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800303c:	e7d5      	b.n	8002fea <USB_EPStartXfer+0x728>
 800303e:	0951      	lsrs	r1, r2, #5
 8003040:	f012 0f1f 	tst.w	r2, #31
 8003044:	d100      	bne.n	8003048 <USB_EPStartXfer+0x786>
 8003046:	3901      	subs	r1, #1
 8003048:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800304c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003050:	b292      	uxth	r2, r2
 8003052:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003056:	e7c8      	b.n	8002fea <USB_EPStartXfer+0x728>
 8003058:	2a3e      	cmp	r2, #62	; 0x3e
 800305a:	d809      	bhi.n	8003070 <USB_EPStartXfer+0x7ae>
 800305c:	0851      	lsrs	r1, r2, #1
 800305e:	f012 0f01 	tst.w	r2, #1
 8003062:	d000      	beq.n	8003066 <USB_EPStartXfer+0x7a4>
 8003064:	3101      	adds	r1, #1
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	b292      	uxth	r2, r2
 800306a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800306e:	e00e      	b.n	800308e <USB_EPStartXfer+0x7cc>
 8003070:	0951      	lsrs	r1, r2, #5
 8003072:	f012 0f1f 	tst.w	r2, #31
 8003076:	d100      	bne.n	800307a <USB_EPStartXfer+0x7b8>
 8003078:	3901      	subs	r1, #1
 800307a:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800307e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003082:	b292      	uxth	r2, r2
 8003084:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003088:	e001      	b.n	800308e <USB_EPStartXfer+0x7cc>
 800308a:	2b01      	cmp	r3, #1
 800308c:	d01d      	beq.n	80030ca <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 800308e:	69e3      	ldr	r3, [r4, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f43f ac42 	beq.w	800291a <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003096:	7822      	ldrb	r2, [r4, #0]
 8003098:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800309c:	f244 0340 	movw	r3, #16448	; 0x4040
 80030a0:	ea03 0001 	and.w	r0, r3, r1
 80030a4:	438b      	bics	r3, r1
 80030a6:	d002      	beq.n	80030ae <USB_EPStartXfer+0x7ec>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	f47f ac36 	bne.w	800291a <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80030ae:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030c4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80030c8:	e427      	b.n	800291a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80030ca:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	442b      	add	r3, r5
 80030d2:	7822      	ldrb	r2, [r4, #0]
 80030d4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80030d8:	8a22      	ldrh	r2, [r4, #16]
 80030da:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80030de:	e7d6      	b.n	800308e <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 80030e0:	2200      	movs	r2, #0
 80030e2:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 80030e4:	460a      	mov	r2, r1
 80030e6:	e729      	b.n	8002f3c <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80030e8:	2a3e      	cmp	r2, #62	; 0x3e
 80030ea:	d809      	bhi.n	8003100 <USB_EPStartXfer+0x83e>
 80030ec:	0851      	lsrs	r1, r2, #1
 80030ee:	f012 0f01 	tst.w	r2, #1
 80030f2:	d000      	beq.n	80030f6 <USB_EPStartXfer+0x834>
 80030f4:	3101      	adds	r1, #1
 80030f6:	0289      	lsls	r1, r1, #10
 80030f8:	b289      	uxth	r1, r1
 80030fa:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 80030fe:	e739      	b.n	8002f74 <USB_EPStartXfer+0x6b2>
 8003100:	0951      	lsrs	r1, r2, #5
 8003102:	f012 0f1f 	tst.w	r2, #31
 8003106:	d100      	bne.n	800310a <USB_EPStartXfer+0x848>
 8003108:	3901      	subs	r1, #1
 800310a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800310e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003112:	b289      	uxth	r1, r1
 8003114:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8003118:	e72c      	b.n	8002f74 <USB_EPStartXfer+0x6b2>
 800311a:	2a3e      	cmp	r2, #62	; 0x3e
 800311c:	d80a      	bhi.n	8003134 <USB_EPStartXfer+0x872>
 800311e:	0851      	lsrs	r1, r2, #1
 8003120:	f012 0f01 	tst.w	r2, #1
 8003124:	d000      	beq.n	8003128 <USB_EPStartXfer+0x866>
 8003126:	3101      	adds	r1, #1
 8003128:	028a      	lsls	r2, r1, #10
 800312a:	b292      	uxth	r2, r2
 800312c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003130:	f7ff bbf3 	b.w	800291a <USB_EPStartXfer+0x58>
 8003134:	0951      	lsrs	r1, r2, #5
 8003136:	f012 0f1f 	tst.w	r2, #31
 800313a:	d100      	bne.n	800313e <USB_EPStartXfer+0x87c>
 800313c:	3901      	subs	r1, #1
 800313e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8003142:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003146:	b292      	uxth	r2, r2
 8003148:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800314c:	f7ff bbe5 	b.w	800291a <USB_EPStartXfer+0x58>
 8003150:	2b01      	cmp	r3, #1
 8003152:	f47f abe2 	bne.w	800291a <USB_EPStartXfer+0x58>
 8003156:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800315a:	b29b      	uxth	r3, r3
 800315c:	442b      	add	r3, r5
 800315e:	7821      	ldrb	r1, [r4, #0]
 8003160:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003164:	b292      	uxth	r2, r2
 8003166:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800316a:	f7ff bbd6 	b.w	800291a <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff bbe4 	b.w	800293c <USB_EPStartXfer+0x7a>

08003174 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003174:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003176:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003178:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800317c:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003180:	b144      	cbz	r4, 8003194 <USB_ReadPMA+0x20>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003182:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003186:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003188:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800318c:	704a      	strb	r2, [r1, #1]
    pBuf++;
 800318e:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003190:	3c01      	subs	r4, #1
 8003192:	e7f5      	b.n	8003180 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003194:	f013 0f01 	tst.w	r3, #1
 8003198:	d001      	beq.n	800319e <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 800319a:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800319c:	700b      	strb	r3, [r1, #0]
  }
}
 800319e:	bc10      	pop	{r4}
 80031a0:	4770      	bx	lr
	...

080031a4 <midiMessage>:

static uint8_t _buffer[64];
static uint8_t _bufferIndex = 0;

void midiMessage(uint8_t message, uint8_t channel, uint8_t data1, uint8_t data2)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	4603      	mov	r3, r0
 80031b8:	71bb      	strb	r3, [r7, #6]
 80031ba:	460b      	mov	r3, r1
 80031bc:	717b      	strb	r3, [r7, #5]
 80031be:	4613      	mov	r3, r2
 80031c0:	713b      	strb	r3, [r7, #4]
	if (_bufferIndex >= 63 - 4)
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <midiMessage+0xd0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b3a      	cmp	r3, #58	; 0x3a
 80031c8:	d902      	bls.n	80031d0 <midiMessage+0x2c>
	{
		// Discard unsent messages
		_bufferIndex = 0;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <midiMessage+0xd0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
	}

	_buffer[_bufferIndex] = message >> 4;
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <midiMessage+0xd0>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	4b26      	ldr	r3, [pc, #152]	; (8003278 <midiMessage+0xd4>)
 80031de:	5499      	strb	r1, [r3, r2]
	_bufferIndex++;
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <midiMessage+0xd0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <midiMessage+0xd0>)
 80031ea:	701a      	strb	r2, [r3, #0]
	_buffer[_bufferIndex] = message | (channel & 0x0F);
 80031ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	b25a      	sxtb	r2, r3
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	b259      	sxtb	r1, r3
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <midiMessage+0xd0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	b2c9      	uxtb	r1, r1
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <midiMessage+0xd4>)
 8003208:	5499      	strb	r1, [r3, r2]
	_bufferIndex++;
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <midiMessage+0xd0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <midiMessage+0xd0>)
 8003214:	701a      	strb	r2, [r3, #0]
	_buffer[_bufferIndex] = data1 & 0x7F;
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <midiMessage+0xd0>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	797b      	ldrb	r3, [r7, #5]
 800321e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003222:	b2d9      	uxtb	r1, r3
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <midiMessage+0xd4>)
 8003226:	5499      	strb	r1, [r3, r2]
	_bufferIndex++;
 8003228:	4b12      	ldr	r3, [pc, #72]	; (8003274 <midiMessage+0xd0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <midiMessage+0xd0>)
 8003232:	701a      	strb	r2, [r3, #0]
	_buffer[_bufferIndex] = data2 & 0x7F;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <midiMessage+0xd0>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	793b      	ldrb	r3, [r7, #4]
 800323c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003240:	b2d9      	uxtb	r1, r3
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <midiMessage+0xd4>)
 8003244:	5499      	strb	r1, [r3, r2]
	_bufferIndex++;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <midiMessage+0xd0>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <midiMessage+0xd0>)
 8003250:	701a      	strb	r2, [r3, #0]

	if (MIDI_Transmit_FS(_buffer, _bufferIndex) == USBD_OK)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <midiMessage+0xd0>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	4807      	ldr	r0, [pc, #28]	; (8003278 <midiMessage+0xd4>)
 800325c:	f001 ff24 	bl	80050a8 <MIDI_Transmit_FS>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <midiMessage+0xc8>
	{
		_bufferIndex = 0;
 8003266:	4b03      	ldr	r3, [pc, #12]	; (8003274 <midiMessage+0xd0>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
	}
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}
 8003274:	200001dc 	.word	0x200001dc
 8003278:	2000019c 	.word	0x2000019c

0800327c <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003280:	2200      	movs	r2, #0
 8003282:	4912      	ldr	r1, [pc, #72]	; (80032cc <MX_USB_DEVICE_Init+0x50>)
 8003284:	4812      	ldr	r0, [pc, #72]	; (80032d0 <MX_USB_DEVICE_Init+0x54>)
 8003286:	f000 fa95 	bl	80037b4 <USBD_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_USB_DEVICE_Init+0x18>
	{
		Error_Handler();
 8003290:	f002 fb47 	bl	8005922 <Error_Handler>
	}

	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8003294:	490f      	ldr	r1, [pc, #60]	; (80032d4 <MX_USB_DEVICE_Init+0x58>)
 8003296:	480e      	ldr	r0, [pc, #56]	; (80032d0 <MX_USB_DEVICE_Init+0x54>)
 8003298:	f000 fab7 	bl	800380a <USBD_RegisterClass>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_USB_DEVICE_Init+0x2a>
	{
		Error_Handler();
 80032a2:	f002 fb3e 	bl	8005922 <Error_Handler>
	}

	if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80032a6:	490c      	ldr	r1, [pc, #48]	; (80032d8 <MX_USB_DEVICE_Init+0x5c>)
 80032a8:	4809      	ldr	r0, [pc, #36]	; (80032d0 <MX_USB_DEVICE_Init+0x54>)
 80032aa:	f001 fdd3 	bl	8004e54 <USBD_MIDI_RegisterInterface>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_USB_DEVICE_Init+0x3c>
	{
		Error_Handler();
 80032b4:	f002 fb35 	bl	8005922 <Error_Handler>
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_USB_DEVICE_Init+0x54>)
 80032ba:	f000 fabf 	bl	800383c <USBD_Start>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_USB_DEVICE_Init+0x4c>
	{
		Error_Handler();
 80032c4:	f002 fb2d 	bl	8005922 <Error_Handler>
	}
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000008 	.word	0x20000008
 80032d0:	2000020c 	.word	0x2000020c
 80032d4:	20000064 	.word	0x20000064
 80032d8:	20000104 	.word	0x20000104

080032dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	USBD_LL_SetupStage((USBD_HandleTypeDef*) hpcd->pData,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
			(uint8_t *) hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
	USBD_LL_SetupStage((USBD_HandleTypeDef*) hpcd->pData,
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 faea 	bl	80038cc <USBD_LL_SetupStage>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataOutStage((USBD_HandleTypeDef*) hpcd->pData, epnum,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	4619      	mov	r1, r3
 800332a:	f000 fb1c 	bl	8003966 <USBD_LL_DataOutStage>
			hpcd->OUT_ep[epnum].xfer_buff);
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataInStage((USBD_HandleTypeDef*) hpcd->pData, epnum,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	333c      	adds	r3, #60	; 0x3c
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	4619      	mov	r1, r3
 800335e:	f000 fb73 	bl	8003a48 <USBD_LL_DataInStage>
			hpcd->IN_ep[epnum].xfer_buff);
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	USBD_LL_SOF((USBD_HandleTypeDef*) hpcd->pData);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fc7e 	bl	8003c7a <USBD_LL_SOF>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
	USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]

	if (hpcd->Init.speed == PCD_SPEED_FULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d102      	bne.n	80033a0 <HAL_PCD_ResetCallback+0x1a>
	{
		speed = USBD_SPEED_FULL;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	e001      	b.n	80033a4 <HAL_PCD_ResetCallback+0x1e>
	}
	else
	{
		Error_Handler();
 80033a0:	f002 fabf 	bl	8005922 <Error_Handler>
	}
	/* Set Speed. */
	USBD_LL_SetSpeed((USBD_HandleTypeDef*) hpcd->pData, speed);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fc30 	bl	8003c14 <USBD_LL_SetSpeed>

	/* Reset Device. */
	USBD_LL_Reset((USBD_HandleTypeDef*) hpcd->pData);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fbe9 	bl	8003b92 <USBD_LL_Reset>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	/* Inform USB library that core enters in suspend Mode. */
	USBD_LL_Suspend((USBD_HandleTypeDef*) hpcd->pData);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fc2b 	bl	8003c32 <USBD_LL_Suspend>
	/* Enter in STOP mode. */
	/* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_PCD_SuspendCallback+0x28>
	{
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_PCD_SuspendCallback+0x30>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_PCD_SuspendCallback+0x30>)
 80033ea:	f043 0306 	orr.w	r3, r3, #6
 80033ee:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
	/* USER CODE END 2 */
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
	USBD_LL_Resume((USBD_HandleTypeDef*) hpcd->pData);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fc25 	bl	8003c5a <USBD_LL_Resume>
}
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <USBD_LL_Init>:
 * @brief  Initializes the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	/* Init USB Ip. */
	if (pdev->id == DEVICE_FS)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d14e      	bne.n	80034c6 <USBD_LL_Init+0xae>
	{
		/* Link the driver to the stack. */
		hpcd_USB_FS.pData = pdev;
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <USBD_LL_Init+0xb8>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
		pdev->pData = &hpcd_USB_FS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003434:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

		hpcd_USB_FS.Instance = USB;
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <USBD_LL_Init+0xb8>)
 800343a:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <USBD_LL_Init+0xbc>)
 800343c:	601a      	str	r2, [r3, #0]
		hpcd_USB_FS.Init.dev_endpoints = 8;
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003440:	2208      	movs	r2, #8
 8003442:	605a      	str	r2, [r3, #4]
		hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003446:	2202      	movs	r2, #2
 8003448:	609a      	str	r2, [r3, #8]
		hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <USBD_LL_Init+0xb8>)
 800344c:	2202      	movs	r2, #2
 800344e:	611a      	str	r2, [r3, #16]
		hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
		hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
		hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <USBD_LL_Init+0xb8>)
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
		if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003462:	481b      	ldr	r0, [pc, #108]	; (80034d0 <USBD_LL_Init+0xb8>)
 8003464:	f7fd f8e0 	bl	8000628 <HAL_PCD_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <USBD_LL_Init+0x5a>
		{
			Error_Handler();
 800346e:	f002 fa58 	bl	8005922 <Error_Handler>
		HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_FS, PCD_DataOutStageCallback);
		HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
		HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
		HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
		  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8003478:	2318      	movs	r3, #24
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	f7fd ffd2 	bl	8001426 <HAL_PCDEx_PMAConfig>
		  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8003488:	2358      	movs	r3, #88	; 0x58
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	f7fd ffca 	bl	8001426 <HAL_PCDEx_PMAConfig>
		  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8003498:	23c0      	movs	r3, #192	; 0xc0
 800349a:	2200      	movs	r2, #0
 800349c:	2181      	movs	r1, #129	; 0x81
 800349e:	f7fd ffc2 	bl	8001426 <HAL_PCDEx_PMAConfig>
		  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80034a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80034ac:	2200      	movs	r2, #0
 80034ae:	2101      	movs	r1, #1
 80034b0:	f7fd ffb9 	bl	8001426 <HAL_PCDEx_PMAConfig>
		  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	2200      	movs	r2, #0
 80034c0:	2182      	movs	r1, #130	; 0x82
 80034c2:	f7fd ffb0 	bl	8001426 <HAL_PCDEx_PMAConfig>
	}
	return USBD_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200004a8 	.word	0x200004a8
 80034d4:	40005c00 	.word	0x40005c00

080034d8 <USBD_LL_Start>:
 * @brief  Starts the low level portion of the device driver.
 * @param  pdev: Device handle
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_Start(pdev->pData);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd f920 	bl	8000734 <HAL_PCD_Start>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f92e 	bl	800375c <USBD_Get_USB_Status>
 8003500:	4603      	mov	r3, r0
 8003502:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 8003504:	7bbb      	ldrb	r3, [r7, #14]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <USBD_LL_OpenEP>:
 * @param  ep_mps: Endpoint max packet size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	4608      	mov	r0, r1
 8003518:	4611      	mov	r1, r2
 800351a:	461a      	mov	r2, r3
 800351c:	4603      	mov	r3, r0
 800351e:	70fb      	strb	r3, [r7, #3]
 8003520:	460b      	mov	r3, r1
 8003522:	70bb      	strb	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8003536:	78bb      	ldrb	r3, [r7, #2]
 8003538:	883a      	ldrh	r2, [r7, #0]
 800353a:	78f9      	ldrb	r1, [r7, #3]
 800353c:	f7fd fe40 	bl	80011c0 <HAL_PCD_EP_Open>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f908 	bl	800375c <USBD_Get_USB_Status>
 800354c:	4603      	mov	r3, r0
 800354e:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 8003550:	7bbb      	ldrb	r3, [r7, #14]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fe5d 	bl	8001238 <HAL_PCD_EP_Close>
 800357e:	4603      	mov	r3, r0
 8003580:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f8e9 	bl	800375c <USBD_Get_USB_Status>
 800358a:	4603      	mov	r3, r0
 800358c:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 800358e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd febe 	bl	8001338 <HAL_PCD_EP_SetStall>
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f8ca 	bl	800375c <USBD_Get_USB_Status>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint number
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fedb 	bl	80013b0 <HAL_PCD_EP_ClrStall>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f8ab 	bl	800375c <USBD_Get_USB_Status>
 8003606:	4603      	mov	r3, r0
 8003608:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 800360a:	7bbb      	ldrb	r3, [r7, #14]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003626:	60fb      	str	r3, [r7, #12]

	if ((ep_addr & 0x80) == 0x80)
 8003628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362c:	2b00      	cmp	r3, #0
 800362e:	da0c      	bge.n	800364a <USBD_LL_IsStallEP+0x36>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	3302      	adds	r3, #2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	e00b      	b.n	8003662 <USBD_LL_IsStallEP+0x4e>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8003660:	781b      	ldrb	r3, [r3, #0]
	}
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <USBD_LL_SetUSBAddress>:
 * @param  dev_addr: Device address
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
	USBD_StatusTypeDef usb_status = USBD_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73bb      	strb	r3, [r7, #14]

	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc9b 	bl	8000fc6 <HAL_PCD_SetAddress>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]

	usb_status = USBD_Get_USB_Status(hal_status);
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f860 	bl	800375c <USBD_Get_USB_Status>
 800369c:	4603      	mov	r3, r0
 800369e:	73bb      	strb	r3, [r7, #14]

	return usb_status;
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <USBD_LL_Transmit>:
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint16_t size)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	461a      	mov	r2, r3
 80036b6:	460b      	mov	r3, r1
 80036b8:	72fb      	strb	r3, [r7, #11]
 80036ba:	4613      	mov	r3, r2
 80036bc:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
	USBD_StatusTypeDef usb_status = USBD_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75bb      	strb	r3, [r7, #22]

	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80036cc:	893b      	ldrh	r3, [r7, #8]
 80036ce:	7af9      	ldrb	r1, [r7, #11]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	f7fd fe0e 	bl	80012f2 <HAL_PCD_EP_Transmit>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

	usb_status = USBD_Get_USB_Status(hal_status);
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f83d 	bl	800375c <USBD_Get_USB_Status>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75bb      	strb	r3, [r7, #22]

	return usb_status;
 80036e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <USBD_LL_PrepareReceive>:
 * @param  size: Data size
 * @retval USBD status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	72fb      	strb	r3, [r7, #11]
 8003700:	4613      	mov	r3, r2
 8003702:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef hal_status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	75bb      	strb	r3, [r7, #22]

	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8003712:	893b      	ldrh	r3, [r7, #8]
 8003714:	7af9      	ldrb	r1, [r7, #11]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	f7fd fdc0 	bl	800129c <HAL_PCD_EP_Receive>
 800371c:	4603      	mov	r3, r0
 800371e:	75fb      	strb	r3, [r7, #23]

	usb_status = USBD_Get_USB_Status(hal_status);
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f81a 	bl	800375c <USBD_Get_USB_Status>
 8003728:	4603      	mov	r3, r0
 800372a:	75bb      	strb	r3, [r7, #22]

	return usb_status;
 800372c:	7dbb      	ldrb	r3, [r7, #22]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint number
 * @retval Recived Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fdc7 	bl	80012e0 <HAL_PCD_EP_GetRxCount>
 8003752:	4603      	mov	r3, r0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <USBD_Get_USB_Status>:
 * @brief  Retuns the USB status depending on the HAL status:
 * @param  hal_status: HAL status
 * @retval USB status
 */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]

	switch (hal_status)
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d817      	bhi.n	80037a0 <USBD_Get_USB_Status+0x44>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <USBD_Get_USB_Status+0x1c>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003795 	.word	0x08003795
 8003784:	0800379b 	.word	0x0800379b
	{
	case HAL_OK:
		usb_status = USBD_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
		break;
 800378c:	e00b      	b.n	80037a6 <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR:
		usb_status = USBD_FAIL;
 800378e:	2302      	movs	r3, #2
 8003790:	73fb      	strb	r3, [r7, #15]
		break;
 8003792:	e008      	b.n	80037a6 <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY:
		usb_status = USBD_BUSY;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
		break;
 8003798:	e005      	b.n	80037a6 <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT:
		usb_status = USBD_FAIL;
 800379a:	2302      	movs	r3, #2
 800379c:	73fb      	strb	r3, [r7, #15]
		break;
 800379e:	e002      	b.n	80037a6 <USBD_Get_USB_Status+0x4a>
	default:
		usb_status = USBD_FAIL;
 80037a0:	2302      	movs	r3, #2
 80037a2:	73fb      	strb	r3, [r7, #15]
		break;
 80037a4:	bf00      	nop
	}
	return usb_status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <USBD_Init>:
 * @param  id: Low level core index
 * @retval None
 */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
		USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]
	/* Check whether the USB Host handle is valid */
	if (pdev == NULL)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <USBD_Init+0x18>
	{
#if (USBD_DEBUG_LEVEL > 1U)
		USBD_ErrLog("Invalid Device handle");
#endif
		return USBD_FAIL;
 80037c8:	2302      	movs	r3, #2
 80037ca:	e01a      	b.n	8003802 <USBD_Init+0x4e>
	}

	/* Unlink previous class*/
	if (pdev->pClass != NULL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <USBD_Init+0x2a>
	{
		pdev->pClass = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	}

	/* Assign USBD Descriptors */
	if (pdesc != NULL)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <USBD_Init+0x38>
	{
		pdev->pDesc = pdesc;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	}

	/* Set Device initial State */
	pdev->dev_state = USBD_STATE_DEFAULT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
	pdev->id = id;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	79fa      	ldrb	r2, [r7, #7]
 80037f8:	701a      	strb	r2, [r3, #0]
	/* Initialize low level driver */
	USBD_LL_Init(pdev);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fe0c 	bl	8003418 <USBD_LL_Init>

	return USBD_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <USBD_RegisterClass>:
 * @param  pclass: Class handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev,
		USBD_ClassTypeDef *pclass)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	USBD_StatusTypeDef status = USBD_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	73fb      	strb	r3, [r7, #15]
	if (pclass != 0)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <USBD_RegisterClass+0x22>
	{
		/* link the class to the USB Device handle */
		pdev->pClass = pclass;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		status = USBD_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	e001      	b.n	8003830 <USBD_RegisterClass+0x26>
	else
	{
#if (USBD_DEBUG_LEVEL > 1U)
		USBD_ErrLog("Invalid Class handle");
#endif
		status = USBD_FAIL;
 800382c:	2302      	movs	r3, #2
 800382e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <USBD_Start>:
 *         Start the USB Device Core.
 * @param  pdev: Device Handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

	/* Start the low level driver  */
	USBD_LL_Start(pdev);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fe47 	bl	80034d8 <USBD_LL_Start>

	return USBD_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <USBD_RunTestMode>:
 *         Launch test mode process
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument compilation warning */
	UNUSED(pdev);

	return USBD_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <USBD_SetClassConfig>:
 * @param  cfgidx: configuration index
 * @retval status
 */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
	USBD_StatusTypeDef ret = USBD_FAIL;
 8003874:	2302      	movs	r3, #2
 8003876:	73fb      	strb	r3, [r7, #15]

	if (pdev->pClass != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <USBD_SetClassConfig+0x34>
	{
		/* Set configuration  and Start the Class*/
		if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	4611      	mov	r1, r2
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <USBD_SetClassConfig+0x34>
		{
			ret = USBD_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return ret;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <USBD_ClrClassConfig>:
 * @param  pdev: device instance
 * @param  cfgidx: configuration index
 * @retval status: USBD_StatusTypeDef
 */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
	/* Clear configuration  and De-initialize the Class process*/
	pdev->pClass->DeInit(pdev, cfgidx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4611      	mov	r1, r2
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
	return USBD_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <USBD_LL_SetupStage>:
 *         Handle the setup stage
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	USBD_ParseSetupRequest(&pdev->request, psetup);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fe63 	bl	80045aa <USBD_ParseSetupRequest>

	pdev->ep0_state = USBD_EP0_SETUP;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

	pdev->ep0_data_len = pdev->request.wLength;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

	switch (pdev->request.bmRequest & 0x1FU)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2b02      	cmp	r3, #2
 8003906:	d016      	beq.n	8003936 <USBD_LL_SetupStage+0x6a>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d81c      	bhi.n	8003946 <USBD_LL_SetupStage+0x7a>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <USBD_LL_SetupStage+0x4a>
 8003910:	2b01      	cmp	r3, #1
 8003912:	d008      	beq.n	8003926 <USBD_LL_SetupStage+0x5a>
 8003914:	e017      	b.n	8003946 <USBD_LL_SetupStage+0x7a>
	{
	case USB_REQ_RECIPIENT_DEVICE:
		USBD_StdDevReq(pdev, &pdev->request);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9c6 	bl	8003cb0 <USBD_StdDevReq>
		break;
 8003924:	e01a      	b.n	800395c <USBD_LL_SetupStage+0x90>

	case USB_REQ_RECIPIENT_INTERFACE:
		USBD_StdItfReq(pdev, &pdev->request);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa28 	bl	8003d84 <USBD_StdItfReq>
		break;
 8003934:	e012      	b.n	800395c <USBD_LL_SetupStage+0x90>

	case USB_REQ_RECIPIENT_ENDPOINT:
		USBD_StdEPReq(pdev, &pdev->request);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa68 	bl	8003e14 <USBD_StdEPReq>
		break;
 8003944:	e00a      	b.n	800395c <USBD_LL_SetupStage+0x90>

	default:
		USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800394c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fe1f 	bl	8003598 <USBD_LL_StallEP>
		break;
 800395a:	bf00      	nop
	}

	return USBD_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <USBD_LL_DataOutStage>:
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
		uint8_t *pdata)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	460b      	mov	r3, r1
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	72fb      	strb	r3, [r7, #11]
	USBD_EndpointTypeDef *pep;

	if (epnum == 0U)
 8003974:	7afb      	ldrb	r3, [r7, #11]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d14b      	bne.n	8003a12 <USBD_LL_DataOutStage+0xac>
	{
		pep = &pdev->ep_out[0];
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003980:	617b      	str	r3, [r7, #20]

		if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003988:	2b03      	cmp	r3, #3
 800398a:	d134      	bne.n	80039f6 <USBD_LL_DataOutStage+0x90>
		{
			if (pep->rem_length > pep->maxpacket)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	429a      	cmp	r2, r3
 8003996:	d919      	bls.n	80039cc <USBD_LL_DataOutStage+0x66>
			{
				pep->rem_length -= pep->maxpacket;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	1ad2      	subs	r2, r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	60da      	str	r2, [r3, #12]

				USBD_CtlContinueRx(pdev, pdata,
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	691b      	ldr	r3, [r3, #16]
				USBD_CtlContinueRx(pdev, pdata,
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d203      	bcs.n	80039ba <USBD_LL_DataOutStage+0x54>
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	68db      	ldr	r3, [r3, #12]
				USBD_CtlContinueRx(pdev, pdata,
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	e002      	b.n	80039c0 <USBD_LL_DataOutStage+0x5a>
						(uint16_t) MIN(pep->rem_length, pep->maxpacket));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	691b      	ldr	r3, [r3, #16]
				USBD_CtlContinueRx(pdev, pdata,
 80039be:	b29b      	uxth	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fff1 	bl	80049ac <USBD_CtlContinueRx>
 80039ca:	e038      	b.n	8003a3e <USBD_LL_DataOutStage+0xd8>
			}
			else
			{
				if ((pdev->pClass->EP0_RxReady != NULL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <USBD_LL_DataOutStage+0x88>
						&& (pdev->dev_state == USBD_STATE_CONFIGURED))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d105      	bne.n	80039ee <USBD_LL_DataOutStage+0x88>
				{
					pdev->pClass->EP0_RxReady(pdev);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	4798      	blx	r3
				}
				USBD_CtlSendStatus(pdev);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 ffee 	bl	80049d0 <USBD_CtlSendStatus>
 80039f4:	e023      	b.n	8003a3e <USBD_LL_DataOutStage+0xd8>
			}
		}
		else
		{
			if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d11e      	bne.n	8003a3e <USBD_LL_DataOutStage+0xd8>
			{
				/*
				 * STATUS PHASE completed, update ep0_state to idle
				 */
				pdev->ep0_state = USBD_EP0_IDLE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
				USBD_LL_StallEP(pdev, 0U);
 8003a08:	2100      	movs	r1, #0
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fdc4 	bl	8003598 <USBD_LL_StallEP>
 8003a10:	e015      	b.n	8003a3e <USBD_LL_DataOutStage+0xd8>
			}
		}
	}
	else if ((pdev->pClass->DataOut != NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <USBD_LL_DataOutStage+0xd4>
			&& (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d108      	bne.n	8003a3a <USBD_LL_DataOutStage+0xd4>
	{
		pdev->pClass->DataOut(pdev, epnum);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	7afa      	ldrb	r2, [r7, #11]
 8003a32:	4611      	mov	r1, r2
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	4798      	blx	r3
 8003a38:	e001      	b.n	8003a3e <USBD_LL_DataOutStage+0xd8>
	}
	else
	{
		/* should never be in this condition */
		return USBD_FAIL;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <USBD_LL_DataOutStage+0xda>
	}

	return USBD_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <USBD_LL_DataInStage>:
 * @param  epnum: endpoint index
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
		uint8_t *pdata)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	460b      	mov	r3, r1
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	72fb      	strb	r3, [r7, #11]
	USBD_EndpointTypeDef *pep;

	if (epnum == 0U)
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d17f      	bne.n	8003b5c <USBD_LL_DataInStage+0x114>
	{
		pep = &pdev->ep_in[0];
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	617b      	str	r3, [r7, #20]

		if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d15c      	bne.n	8003b26 <USBD_LL_DataInStage+0xde>
		{
			if (pep->rem_length > pep->maxpacket)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d915      	bls.n	8003aa4 <USBD_LL_DataInStage+0x5c>
			{
				pep->rem_length -= pep->maxpacket;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	60da      	str	r2, [r3, #12]

				USBD_CtlContinueSendData(pdev, pdata,
						(uint16_t) pep->rem_length);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	68db      	ldr	r3, [r3, #12]
				USBD_CtlContinueSendData(pdev, pdata,
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 ff5b 	bl	800494c <USBD_CtlContinueSendData>

				/* Prepare endpoint for premature end of transfer */
				USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a96:	2300      	movs	r3, #0
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff fe27 	bl	80036f0 <USBD_LL_PrepareReceive>
 8003aa2:	e04e      	b.n	8003b42 <USBD_LL_DataInStage+0xfa>
			}
			else
			{ /* last packet is MPS multiple, so send ZLP packet */
				if ((pep->total_length % pep->maxpacket == 0U)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6912      	ldr	r2, [r2, #16]
 8003aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ab0:	fb02 f201 	mul.w	r2, r2, r1
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11c      	bne.n	8003af4 <USBD_LL_DataInStage+0xac>
						&& (pep->total_length >= pep->maxpacket)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d316      	bcc.n	8003af4 <USBD_LL_DataInStage+0xac>
						&& (pep->total_length < pdev->ep0_data_len))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d20f      	bcs.n	8003af4 <USBD_LL_DataInStage+0xac>
				{
					USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 ff37 	bl	800494c <USBD_CtlContinueSendData>
					pdev->ep0_data_len = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

					/* Prepare endpoint for premature end of transfer */
					USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff fdff 	bl	80036f0 <USBD_LL_PrepareReceive>
 8003af2:	e026      	b.n	8003b42 <USBD_LL_DataInStage+0xfa>
				}
				else
				{
					if ((pdev->pClass->EP0_TxSent != NULL)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <USBD_LL_DataInStage+0xce>
							&& (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d105      	bne.n	8003b16 <USBD_LL_DataInStage+0xce>
					{
						pdev->pClass->EP0_TxSent(pdev);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	4798      	blx	r3
					}
					USBD_LL_StallEP(pdev, 0x80U);
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fd3d 	bl	8003598 <USBD_LL_StallEP>
					USBD_CtlReceiveStatus(pdev);
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 ff69 	bl	80049f6 <USBD_CtlReceiveStatus>
 8003b24:	e00d      	b.n	8003b42 <USBD_LL_DataInStage+0xfa>
				}
			}
		}
		else
		{
			if ((pdev->ep0_state == USBD_EP0_STATUS_IN)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d004      	beq.n	8003b3a <USBD_LL_DataInStage+0xf2>
					|| (pdev->ep0_state == USBD_EP0_IDLE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <USBD_LL_DataInStage+0xfa>
			{
				USBD_LL_StallEP(pdev, 0x80U);
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fd2b 	bl	8003598 <USBD_LL_StallEP>
			}
		}

		if (pdev->dev_test_mode == 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d11d      	bne.n	8003b88 <USBD_LL_DataInStage+0x140>
		{
			USBD_RunTestMode(pdev);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff fe81 	bl	8003854 <USBD_RunTestMode>
			pdev->dev_test_mode = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8003b5a:	e015      	b.n	8003b88 <USBD_LL_DataInStage+0x140>
		}
	}
	else if ((pdev->pClass->DataIn != NULL)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <USBD_LL_DataInStage+0x13c>
			&& (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d108      	bne.n	8003b84 <USBD_LL_DataInStage+0x13c>
	{
		pdev->pClass->DataIn(pdev, epnum);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	7afa      	ldrb	r2, [r7, #11]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	4798      	blx	r3
 8003b82:	e001      	b.n	8003b88 <USBD_LL_DataInStage+0x140>
	}
	else
	{
		/* should never be in this condition */
		return USBD_FAIL;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e000      	b.n	8003b8a <USBD_LL_DataInStage+0x142>
	}

	return USBD_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <USBD_LL_Reset>:
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	/* Open EP0 OUT */
	USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003b9a:	2340      	movs	r3, #64	; 0x40
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fcb4 	bl	800350e <USBD_LL_OpenEP>
	pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Open EP0 IN */
	USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fca6 	bl	800350e <USBD_LL_OpenEP>
	pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	619a      	str	r2, [r3, #24]

	pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Upon Reset call user call back */
	pdev->dev_state = USBD_STATE_DEFAULT;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
	pdev->ep0_state = USBD_EP0_IDLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	pdev->dev_config = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	605a      	str	r2, [r3, #4]
	pdev->dev_remote_wakeup = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

	if (pdev->pClassData)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <USBD_LL_Reset+0x78>
	{
		pdev->pClass->DeInit(pdev, (uint8_t) pdev->dev_config);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6852      	ldr	r2, [r2, #4]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	4611      	mov	r1, r2
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
	}

	return USBD_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <USBD_LL_SetSpeed>:
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
		USBD_SpeedTypeDef speed)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
	pdev->dev_speed = speed;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	741a      	strb	r2, [r3, #16]
	return USBD_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <USBD_LL_Suspend>:
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	pdev->dev_old_state = pdev->dev_state;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
	pdev->dev_state = USBD_STATE_SUSPENDED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2204      	movs	r2, #4
 8003c4a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
	return USBD_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <USBD_LL_Resume>:
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	pdev->dev_state = pdev->dev_old_state;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
	return USBD_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <USBD_LL_SOF>:
 * @param  pdev: device instance
 * @retval status
 */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d10b      	bne.n	8003ca4 <USBD_LL_SOF+0x2a>
	{
		if (pdev->pClass->SOF != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <USBD_LL_SOF+0x2a>
		{
			pdev->pClass->SOF(pdev);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
		}
	}
	return USBD_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <USBD_StdDevReq>:
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d005      	beq.n	8003cd6 <USBD_StdDevReq+0x26>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d84f      	bhi.n	8003d6e <USBD_StdDevReq+0xbe>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <USBD_StdDevReq+0x36>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d14b      	bne.n	8003d6e <USBD_StdDevReq+0xbe>
	{
	case USB_REQ_TYPE_CLASS:
	case USB_REQ_TYPE_VENDOR:
		pdev->pClass->Setup(pdev, req);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
		break;
 8003ce4:	e048      	b.n	8003d78 <USBD_StdDevReq+0xc8>

	case USB_REQ_TYPE_STANDARD:

		switch (req->bRequest)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	d839      	bhi.n	8003d62 <USBD_StdDevReq+0xb2>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <USBD_StdDevReq+0x44>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003d59 	.word	0x08003d59
 8003cfc:	08003d63 	.word	0x08003d63
 8003d00:	08003d4f 	.word	0x08003d4f
 8003d04:	08003d63 	.word	0x08003d63
 8003d08:	08003d27 	.word	0x08003d27
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d63 	.word	0x08003d63
 8003d14:	08003d3b 	.word	0x08003d3b
 8003d18:	08003d31 	.word	0x08003d31
		{
		case USB_REQ_GET_DESCRIPTOR:

			USBD_GetDescriptor(pdev, req);
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9da 	bl	80040d8 <USBD_GetDescriptor>
			break;
 8003d24:	e022      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_SET_ADDRESS:
			USBD_SetAddress(pdev, req);
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 facf 	bl	80042cc <USBD_SetAddress>
			break;
 8003d2e:	e01d      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_SET_CONFIGURATION:
			USBD_SetConfig(pdev, req);
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fb0e 	bl	8004354 <USBD_SetConfig>
			break;
 8003d38:	e018      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_GET_CONFIGURATION:
			USBD_GetConfig(pdev, req);
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fb97 	bl	8004470 <USBD_GetConfig>
			break;
 8003d42:	e013      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_GET_STATUS:
			USBD_GetStatus(pdev, req);
 8003d44:	6839      	ldr	r1, [r7, #0]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fbc7 	bl	80044da <USBD_GetStatus>
			break;
 8003d4c:	e00e      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_SET_FEATURE:
			USBD_SetFeature(pdev, req);
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fbf5 	bl	8004540 <USBD_SetFeature>
			break;
 8003d56:	e009      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		case USB_REQ_CLEAR_FEATURE:
			USBD_ClrFeature(pdev, req);
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fc04 	bl	8004568 <USBD_ClrFeature>
			break;
 8003d60:	e004      	b.n	8003d6c <USBD_StdDevReq+0xbc>

		default:
			USBD_CtlError(pdev, req);
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fc5c 	bl	8004622 <USBD_CtlError>
			break;
 8003d6a:	bf00      	nop
		}
		break;
 8003d6c:	e004      	b.n	8003d78 <USBD_StdDevReq+0xc8>

	default:
		USBD_CtlError(pdev, req);
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fc56 	bl	8004622 <USBD_CtlError>
		break;
 8003d76:	bf00      	nop
	}

	return ret;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop

08003d84 <USBD_StdItfReq>:
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d005      	beq.n	8003daa <USBD_StdItfReq+0x26>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d82e      	bhi.n	8003e00 <USBD_StdItfReq+0x7c>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <USBD_StdItfReq+0x26>
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d12a      	bne.n	8003e00 <USBD_StdItfReq+0x7c>
	{
	case USB_REQ_TYPE_CLASS:
	case USB_REQ_TYPE_VENDOR:
	case USB_REQ_TYPE_STANDARD:
		switch (pdev->dev_state)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003db0:	3b01      	subs	r3, #1
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d81d      	bhi.n	8003df2 <USBD_StdItfReq+0x6e>
		{
		case USBD_STATE_DEFAULT:
		case USBD_STATE_ADDRESSED:
		case USBD_STATE_CONFIGURED:

			if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	889b      	ldrh	r3, [r3, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d813      	bhi.n	8003de8 <USBD_StdItfReq+0x64>
			{
				ret = (USBD_StatusTypeDef) pdev->pClass->Setup(pdev, req);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	73fb      	strb	r3, [r7, #15]

				if ((req->wLength == 0U) && (ret == USBD_OK))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	88db      	ldrh	r3, [r3, #6]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d110      	bne.n	8003dfc <USBD_StdItfReq+0x78>
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <USBD_StdItfReq+0x78>
				{
					USBD_CtlSendStatus(pdev);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fdf5 	bl	80049d0 <USBD_CtlSendStatus>
			}
			else
			{
				USBD_CtlError(pdev, req);
			}
			break;
 8003de6:	e009      	b.n	8003dfc <USBD_StdItfReq+0x78>
				USBD_CtlError(pdev, req);
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fc19 	bl	8004622 <USBD_CtlError>
			break;
 8003df0:	e004      	b.n	8003dfc <USBD_StdItfReq+0x78>

		default:
			USBD_CtlError(pdev, req);
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fc14 	bl	8004622 <USBD_CtlError>
			break;
 8003dfa:	e000      	b.n	8003dfe <USBD_StdItfReq+0x7a>
			break;
 8003dfc:	bf00      	nop
		}
		break;
 8003dfe:	e004      	b.n	8003e0a <USBD_StdItfReq+0x86>

	default:
		USBD_CtlError(pdev, req);
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fc0d 	bl	8004622 <USBD_CtlError>
		break;
 8003e08:	bf00      	nop
	}

	return USBD_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <USBD_StdEPReq>:
 * @param  req: usb request
 * @retval status
 */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]

	uint8_t ep_addr;
	USBD_StatusTypeDef ret = USBD_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
	USBD_EndpointTypeDef *pep;
	ep_addr = LOBYTE(req->wIndex);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	889b      	ldrh	r3, [r3, #4]
 8003e26:	73bb      	strb	r3, [r7, #14]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d007      	beq.n	8003e44 <USBD_StdEPReq+0x30>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	f200 8144 	bhi.w	80040c2 <USBD_StdEPReq+0x2ae>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <USBD_StdEPReq+0x40>
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 813f 	bne.w	80040c2 <USBD_StdEPReq+0x2ae>
	{

	case USB_REQ_TYPE_CLASS:
	case USB_REQ_TYPE_VENDOR:
		pdev->pClass->Setup(pdev, req);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
		break;
 8003e52:	e13b      	b.n	80040cc <USBD_StdEPReq+0x2b8>

	case USB_REQ_TYPE_STANDARD:
		/* Check if it is a class request */
		if ((req->bmRequest & 0x60U) == 0x20U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d10a      	bne.n	8003e76 <USBD_StdEPReq+0x62>
		{
			ret = (USBD_StatusTypeDef) pdev->pClass->Setup(pdev, req);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	73fb      	strb	r3, [r7, #15]

			return ret;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	e12b      	b.n	80040ce <USBD_StdEPReq+0x2ba>
		}

		switch (req->bRequest)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d007      	beq.n	8003e8e <USBD_StdEPReq+0x7a>
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	f300 8119 	bgt.w	80040b6 <USBD_StdEPReq+0x2a2>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d072      	beq.n	8003f6e <USBD_StdEPReq+0x15a>
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d03a      	beq.n	8003f02 <USBD_StdEPReq+0xee>
 8003e8c:	e113      	b.n	80040b6 <USBD_StdEPReq+0x2a2>
		{

		case USB_REQ_SET_FEATURE:

			switch (pdev->dev_state)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d002      	beq.n	8003e9e <USBD_StdEPReq+0x8a>
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d015      	beq.n	8003ec8 <USBD_StdEPReq+0xb4>
 8003e9c:	e02b      	b.n	8003ef6 <USBD_StdEPReq+0xe2>
			{
			case USBD_STATE_ADDRESSED:
				if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <USBD_StdEPReq+0xaa>
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d009      	beq.n	8003ebe <USBD_StdEPReq+0xaa>
				{
					USBD_LL_StallEP(pdev, ep_addr);
 8003eaa:	7bbb      	ldrb	r3, [r7, #14]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fb72 	bl	8003598 <USBD_LL_StallEP>
					USBD_LL_StallEP(pdev, 0x80U);
 8003eb4:	2180      	movs	r1, #128	; 0x80
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fb6e 	bl	8003598 <USBD_LL_StallEP>
				}
				else
				{
					USBD_CtlError(pdev, req);
				}
				break;
 8003ebc:	e020      	b.n	8003f00 <USBD_StdEPReq+0xec>
					USBD_CtlError(pdev, req);
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fbae 	bl	8004622 <USBD_CtlError>
				break;
 8003ec6:	e01b      	b.n	8003f00 <USBD_StdEPReq+0xec>

			case USBD_STATE_CONFIGURED:
				if (req->wValue == USB_FEATURE_EP_HALT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	885b      	ldrh	r3, [r3, #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <USBD_StdEPReq+0xda>
				{
					if ((ep_addr != 0x00U) && (ep_addr != 0x80U)
 8003ed0:	7bbb      	ldrb	r3, [r7, #14]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <USBD_StdEPReq+0xda>
 8003ed6:	7bbb      	ldrb	r3, [r7, #14]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d008      	beq.n	8003eee <USBD_StdEPReq+0xda>
							&& (req->wLength == 0x00U))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	88db      	ldrh	r3, [r3, #6]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <USBD_StdEPReq+0xda>
					{
						USBD_LL_StallEP(pdev, ep_addr);
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fb55 	bl	8003598 <USBD_LL_StallEP>
					}
				}
				USBD_CtlSendStatus(pdev);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd6e 	bl	80049d0 <USBD_CtlSendStatus>

				break;
 8003ef4:	e004      	b.n	8003f00 <USBD_StdEPReq+0xec>

			default:
				USBD_CtlError(pdev, req);
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fb92 	bl	8004622 <USBD_CtlError>
				break;
 8003efe:	bf00      	nop
			}
			break;
 8003f00:	e0de      	b.n	80040c0 <USBD_StdEPReq+0x2ac>

		case USB_REQ_CLEAR_FEATURE:

			switch (pdev->dev_state)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d002      	beq.n	8003f12 <USBD_StdEPReq+0xfe>
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d015      	beq.n	8003f3c <USBD_StdEPReq+0x128>
 8003f10:	e026      	b.n	8003f60 <USBD_StdEPReq+0x14c>
			{
			case USBD_STATE_ADDRESSED:
				if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f12:	7bbb      	ldrb	r3, [r7, #14]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <USBD_StdEPReq+0x11e>
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	2b80      	cmp	r3, #128	; 0x80
 8003f1c:	d009      	beq.n	8003f32 <USBD_StdEPReq+0x11e>
				{
					USBD_LL_StallEP(pdev, ep_addr);
 8003f1e:	7bbb      	ldrb	r3, [r7, #14]
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fb38 	bl	8003598 <USBD_LL_StallEP>
					USBD_LL_StallEP(pdev, 0x80U);
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fb34 	bl	8003598 <USBD_LL_StallEP>
				}
				else
				{
					USBD_CtlError(pdev, req);
				}
				break;
 8003f30:	e01c      	b.n	8003f6c <USBD_StdEPReq+0x158>
					USBD_CtlError(pdev, req);
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb74 	bl	8004622 <USBD_CtlError>
				break;
 8003f3a:	e017      	b.n	8003f6c <USBD_StdEPReq+0x158>

			case USBD_STATE_CONFIGURED:
				if (req->wValue == USB_FEATURE_EP_HALT)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	885b      	ldrh	r3, [r3, #2]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d112      	bne.n	8003f6a <USBD_StdEPReq+0x156>
				{
					if ((ep_addr & 0x7FU) != 0x00U)
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <USBD_StdEPReq+0x144>
					{
						USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f4e:	7bbb      	ldrb	r3, [r7, #14]
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fb3f 	bl	80035d6 <USBD_LL_ClearStallEP>
					}
					USBD_CtlSendStatus(pdev);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fd39 	bl	80049d0 <USBD_CtlSendStatus>
				}
				break;
 8003f5e:	e004      	b.n	8003f6a <USBD_StdEPReq+0x156>

			default:
				USBD_CtlError(pdev, req);
 8003f60:	6839      	ldr	r1, [r7, #0]
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fb5d 	bl	8004622 <USBD_CtlError>
				break;
 8003f68:	e000      	b.n	8003f6c <USBD_StdEPReq+0x158>
				break;
 8003f6a:	bf00      	nop
			}
			break;
 8003f6c:	e0a8      	b.n	80040c0 <USBD_StdEPReq+0x2ac>

		case USB_REQ_GET_STATUS:
			switch (pdev->dev_state)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d002      	beq.n	8003f7e <USBD_StdEPReq+0x16a>
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d031      	beq.n	8003fe0 <USBD_StdEPReq+0x1cc>
 8003f7c:	e095      	b.n	80040aa <USBD_StdEPReq+0x296>
			{
			case USBD_STATE_ADDRESSED:
				if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <USBD_StdEPReq+0x180>
 8003f84:	7bbb      	ldrb	r3, [r7, #14]
 8003f86:	2b80      	cmp	r3, #128	; 0x80
 8003f88:	d004      	beq.n	8003f94 <USBD_StdEPReq+0x180>
				{
					USBD_CtlError(pdev, req);
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb48 	bl	8004622 <USBD_CtlError>
					break;
 8003f92:	e08f      	b.n	80040b4 <USBD_StdEPReq+0x2a0>
				}
				pep = ((ep_addr & 0x80U) == 0x80U) ?
 8003f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
						&pdev->ep_in[ep_addr & 0x7FU] :\
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da0b      	bge.n	8003fb4 <USBD_StdEPReq+0x1a0>
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3310      	adds	r3, #16
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4413      	add	r3, r2
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	e00a      	b.n	8003fca <USBD_StdEPReq+0x1b6>

						&pdev->ep_out[ep_addr & 0x7FU];
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						&pdev->ep_in[ep_addr & 0x7FU] :\
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
				pep = ((ep_addr & 0x80U) == 0x80U) ?
 8003fca:	60bb      	str	r3, [r7, #8]

				pep->status = 0x0000U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

				USBD_CtlSendData(pdev, (uint8_t *) (void *) &pep->status, 2U);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fc9b 	bl	8004914 <USBD_CtlSendData>
				break;
 8003fde:	e069      	b.n	80040b4 <USBD_StdEPReq+0x2a0>

			case USBD_STATE_CONFIGURED:
				if ((ep_addr & 0x80U) == 0x80U)
 8003fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da11      	bge.n	800400c <USBD_StdEPReq+0x1f8>
				{
					if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003fe8:	7bbb      	ldrb	r3, [r7, #14]
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d117      	bne.n	8004032 <USBD_StdEPReq+0x21e>
					{
						USBD_CtlError(pdev, req);
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb0c 	bl	8004622 <USBD_CtlError>
						break;
 800400a:	e053      	b.n	80040b4 <USBD_StdEPReq+0x2a0>
					}
				}
				else
				{
					if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800400c:	7bbb      	ldrb	r3, [r7, #14]
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <USBD_StdEPReq+0x21e>
					{
						USBD_CtlError(pdev, req);
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 faf9 	bl	8004622 <USBD_CtlError>
						break;
 8004030:	e040      	b.n	80040b4 <USBD_StdEPReq+0x2a0>
					}
				}

				pep = ((ep_addr & 0x80U) == 0x80U) ?
 8004032:	f997 300e 	ldrsb.w	r3, [r7, #14]
						&pdev->ep_in[ep_addr & 0x7FU] :\
 8004036:	2b00      	cmp	r3, #0
 8004038:	da0b      	bge.n	8004052 <USBD_StdEPReq+0x23e>
 800403a:	7bbb      	ldrb	r3, [r7, #14]
 800403c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	3310      	adds	r3, #16
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	e00a      	b.n	8004068 <USBD_StdEPReq+0x254>

						&pdev->ep_out[ep_addr & 0x7FU];
 8004052:	7bbb      	ldrb	r3, [r7, #14]
 8004054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						&pdev->ep_in[ep_addr & 0x7FU] :\
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
				pep = ((ep_addr & 0x80U) == 0x80U) ?
 8004068:	60bb      	str	r3, [r7, #8]

				if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800406a:	7bbb      	ldrb	r3, [r7, #14]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <USBD_StdEPReq+0x262>
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d103      	bne.n	800407e <USBD_StdEPReq+0x26a>
				{
					pep->status = 0x0000U;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e00e      	b.n	800409c <USBD_StdEPReq+0x288>
				}
				else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fac6 	bl	8003614 <USBD_LL_IsStallEP>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <USBD_StdEPReq+0x282>
				{
					pep->status = 0x0001U;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e002      	b.n	800409c <USBD_StdEPReq+0x288>
				}
				else
				{
					pep->status = 0x0000U;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
				}

				USBD_CtlSendData(pdev, (uint8_t *) (void *) &pep->status, 2U);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2202      	movs	r2, #2
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fc36 	bl	8004914 <USBD_CtlSendData>
				break;
 80040a8:	e004      	b.n	80040b4 <USBD_StdEPReq+0x2a0>

			default:
				USBD_CtlError(pdev, req);
 80040aa:	6839      	ldr	r1, [r7, #0]
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fab8 	bl	8004622 <USBD_CtlError>
				break;
 80040b2:	bf00      	nop
			}
			break;
 80040b4:	e004      	b.n	80040c0 <USBD_StdEPReq+0x2ac>

		default:
			USBD_CtlError(pdev, req);
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fab2 	bl	8004622 <USBD_CtlError>
			break;
 80040be:	bf00      	nop
		}
		break;
 80040c0:	e004      	b.n	80040cc <USBD_StdEPReq+0x2b8>

	default:
		USBD_CtlError(pdev, req);
 80040c2:	6839      	ldr	r1, [r7, #0]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 faac 	bl	8004622 <USBD_CtlError>
		break;
 80040ca:	bf00      	nop
	}

	return ret;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <USBD_GetDescriptor>:
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	uint16_t len;
	uint8_t *pbuf;

	switch (req->wValue >> 8)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	885b      	ldrh	r3, [r3, #2]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	f200 80c9 	bhi.w	8004284 <USBD_GetDescriptor+0x1ac>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <USBD_GetDescriptor+0x20>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004115 	.word	0x08004115
 80040fc:	0800412d 	.word	0x0800412d
 8004100:	0800416d 	.word	0x0800416d
 8004104:	08004285 	.word	0x08004285
 8004108:	08004285 	.word	0x08004285
 800410c:	08004231 	.word	0x08004231
 8004110:	08004257 	.word	0x08004257
	case USB_DESC_TYPE_BOS:
	pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
	break;
#endif
	case USB_DESC_TYPE_DEVICE:
		pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	7c12      	ldrb	r2, [r2, #16]
 8004120:	f107 010a 	add.w	r1, r7, #10
 8004124:	4610      	mov	r0, r2
 8004126:	4798      	blx	r3
 8004128:	60f8      	str	r0, [r7, #12]
		break;
 800412a:	e0b0      	b.n	800428e <USBD_GetDescriptor+0x1b6>

	case USB_DESC_TYPE_CONFIGURATION:
		if (pdev->dev_speed == USBD_SPEED_HIGH)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7c1b      	ldrb	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <USBD_GetDescriptor+0x78>
		{
			pbuf = (uint8_t *) pdev->pClass->GetHSConfigDescriptor(&len);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f107 020a 	add.w	r2, r7, #10
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
 8004144:	60f8      	str	r0, [r7, #12]
			pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3301      	adds	r3, #1
 800414a:	2202      	movs	r2, #2
 800414c:	701a      	strb	r2, [r3, #0]
		else
		{
			pbuf = (uint8_t *) pdev->pClass->GetFSConfigDescriptor(&len);
			pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
		}
		break;
 800414e:	e09e      	b.n	800428e <USBD_GetDescriptor+0x1b6>
			pbuf = (uint8_t *) pdev->pClass->GetFSConfigDescriptor(&len);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f107 020a 	add.w	r2, r7, #10
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
 8004160:	60f8      	str	r0, [r7, #12]
			pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
		break;
 800416a:	e090      	b.n	800428e <USBD_GetDescriptor+0x1b6>

	case USB_DESC_TYPE_STRING:
		switch ((uint8_t) (req->wValue))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	885b      	ldrh	r3, [r3, #2]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b05      	cmp	r3, #5
 8004174:	d856      	bhi.n	8004224 <USBD_GetDescriptor+0x14c>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <USBD_GetDescriptor+0xa4>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	08004195 	.word	0x08004195
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041f5 	.word	0x080041f5
 8004190:	0800420d 	.word	0x0800420d
		{
		case USBD_IDX_LANGID_STR:
			pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	7c12      	ldrb	r2, [r2, #16]
 80041a0:	f107 010a 	add.w	r1, r7, #10
 80041a4:	4610      	mov	r0, r2
 80041a6:	4798      	blx	r3
 80041a8:	60f8      	str	r0, [r7, #12]
			break;
 80041aa:	e040      	b.n	800422e <USBD_GetDescriptor+0x156>

		case USBD_IDX_MFC_STR:
			pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	7c12      	ldrb	r2, [r2, #16]
 80041b8:	f107 010a 	add.w	r1, r7, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4798      	blx	r3
 80041c0:	60f8      	str	r0, [r7, #12]
					&len);
			break;
 80041c2:	e034      	b.n	800422e <USBD_GetDescriptor+0x156>

		case USBD_IDX_PRODUCT_STR:
			pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	7c12      	ldrb	r2, [r2, #16]
 80041d0:	f107 010a 	add.w	r1, r7, #10
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
 80041d8:	60f8      	str	r0, [r7, #12]
			break;
 80041da:	e028      	b.n	800422e <USBD_GetDescriptor+0x156>

		case USBD_IDX_SERIAL_STR:
			pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	7c12      	ldrb	r2, [r2, #16]
 80041e8:	f107 010a 	add.w	r1, r7, #10
 80041ec:	4610      	mov	r0, r2
 80041ee:	4798      	blx	r3
 80041f0:	60f8      	str	r0, [r7, #12]
			break;
 80041f2:	e01c      	b.n	800422e <USBD_GetDescriptor+0x156>

		case USBD_IDX_CONFIG_STR:
			pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	7c12      	ldrb	r2, [r2, #16]
 8004200:	f107 010a 	add.w	r1, r7, #10
 8004204:	4610      	mov	r0, r2
 8004206:	4798      	blx	r3
 8004208:	60f8      	str	r0, [r7, #12]
					&len);
			break;
 800420a:	e010      	b.n	800422e <USBD_GetDescriptor+0x156>

		case USBD_IDX_INTERFACE_STR:
			pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	7c12      	ldrb	r2, [r2, #16]
 8004218:	f107 010a 	add.w	r1, r7, #10
 800421c:	4610      	mov	r0, r2
 800421e:	4798      	blx	r3
 8004220:	60f8      	str	r0, [r7, #12]
					&len);
			break;
 8004222:	e004      	b.n	800422e <USBD_GetDescriptor+0x156>
		default:
#if (USBD_SUPPORT_USER_STRING == 1U)
			pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
			break;
#else
			USBD_CtlError(pdev, req);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9fb 	bl	8004622 <USBD_CtlError>
			return;
 800422c:	e04b      	b.n	80042c6 <USBD_GetDescriptor+0x1ee>
#endif
		}
		break;
 800422e:	e02e      	b.n	800428e <USBD_GetDescriptor+0x1b6>
	case USB_DESC_TYPE_DEVICE_QUALIFIER:

		if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7c1b      	ldrb	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <USBD_GetDescriptor+0x174>
		{
			pbuf = (uint8_t *) pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	f107 020a 	add.w	r2, r7, #10
 8004244:	4610      	mov	r0, r2
 8004246:	4798      	blx	r3
 8004248:	60f8      	str	r0, [r7, #12]
			break;
 800424a:	e020      	b.n	800428e <USBD_GetDescriptor+0x1b6>
		}
		else
		{
			USBD_CtlError(pdev, req);
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9e7 	bl	8004622 <USBD_CtlError>
			return;
 8004254:	e037      	b.n	80042c6 <USBD_GetDescriptor+0x1ee>
		}

	case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
		if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7c1b      	ldrb	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10d      	bne.n	800427a <USBD_GetDescriptor+0x1a2>
		{
			pbuf = (uint8_t *) pdev->pClass->GetOtherSpeedConfigDescriptor(
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f107 020a 	add.w	r2, r7, #10
 800426a:	4610      	mov	r0, r2
 800426c:	4798      	blx	r3
 800426e:	60f8      	str	r0, [r7, #12]
					&len);
			pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	2207      	movs	r2, #7
 8004276:	701a      	strb	r2, [r3, #0]
			break;
 8004278:	e009      	b.n	800428e <USBD_GetDescriptor+0x1b6>
		}
		else
		{
			USBD_CtlError(pdev, req);
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f9d0 	bl	8004622 <USBD_CtlError>
			return;
 8004282:	e020      	b.n	80042c6 <USBD_GetDescriptor+0x1ee>
		}

	default:
		USBD_CtlError(pdev, req);
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9cb 	bl	8004622 <USBD_CtlError>
		return;
 800428c:	e01b      	b.n	80042c6 <USBD_GetDescriptor+0x1ee>
	}

	if ((len != 0U) && (req->wLength != 0U))
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d011      	beq.n	80042b8 <USBD_GetDescriptor+0x1e0>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	88db      	ldrh	r3, [r3, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <USBD_GetDescriptor+0x1e0>
	{

		len = MIN(len, req->wLength);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	88da      	ldrh	r2, [r3, #6]
 80042a0:	897b      	ldrh	r3, [r7, #10]
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf28      	it	cs
 80042a6:	4613      	movcs	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	817b      	strh	r3, [r7, #10]

		USBD_CtlSendData(pdev, pbuf, len);
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb2e 	bl	8004914 <USBD_CtlSendData>
	}

	if (req->wLength == 0U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	88db      	ldrh	r3, [r3, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <USBD_GetDescriptor+0x1ee>
	{
		USBD_CtlSendStatus(pdev);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fb85 	bl	80049d0 <USBD_CtlSendStatus>
	}
}
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <USBD_SetAddress>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	uint8_t dev_addr;

	if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	889b      	ldrh	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d130      	bne.n	8004340 <USBD_SetAddress+0x74>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	88db      	ldrh	r3, [r3, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d12c      	bne.n	8004340 <USBD_SetAddress+0x74>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	885b      	ldrh	r3, [r3, #2]
 80042ea:	2b7f      	cmp	r3, #127	; 0x7f
 80042ec:	d828      	bhi.n	8004340 <USBD_SetAddress+0x74>
	{
		dev_addr = (uint8_t) (req->wValue) & 0x7FU;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	885b      	ldrh	r3, [r3, #2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f8:	73fb      	strb	r3, [r7, #15]

		if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004300:	2b03      	cmp	r3, #3
 8004302:	d104      	bne.n	800430e <USBD_SetAddress+0x42>
		{
			USBD_CtlError(pdev, req);
 8004304:	6839      	ldr	r1, [r7, #0]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f98b 	bl	8004622 <USBD_CtlError>
		if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430c:	e01d      	b.n	800434a <USBD_SetAddress+0x7e>
		}
		else
		{
			pdev->dev_address = dev_addr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
			USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff f9a6 	bl	800366c <USBD_LL_SetUSBAddress>
			USBD_CtlSendStatus(pdev);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb55 	bl	80049d0 <USBD_CtlSendStatus>

			if (dev_addr != 0U)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <USBD_SetAddress+0x6a>
			{
				pdev->dev_state = USBD_STATE_ADDRESSED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
		if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004334:	e009      	b.n	800434a <USBD_SetAddress+0x7e>
			}
			else
			{
				pdev->dev_state = USBD_STATE_DEFAULT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
		if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800433e:	e004      	b.n	800434a <USBD_SetAddress+0x7e>
			}
		}
	}
	else
	{
		USBD_CtlError(pdev, req);
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f96d 	bl	8004622 <USBD_CtlError>
	}
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <USBD_SetConfig>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
	static uint8_t cfgidx;

	cfgidx = (uint8_t) (req->wValue);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	885b      	ldrh	r3, [r3, #2]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	4b41      	ldr	r3, [pc, #260]	; (800446c <USBD_SetConfig+0x118>)
 8004366:	701a      	strb	r2, [r3, #0]

	if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004368:	4b40      	ldr	r3, [pc, #256]	; (800446c <USBD_SetConfig+0x118>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d904      	bls.n	800437a <USBD_SetConfig+0x26>
	{
		USBD_CtlError(pdev, req);
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f955 	bl	8004622 <USBD_CtlError>
 8004378:	e075      	b.n	8004466 <USBD_SetConfig+0x112>
	}
	else
	{
		switch (pdev->dev_state)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004380:	2b02      	cmp	r3, #2
 8004382:	d002      	beq.n	800438a <USBD_SetConfig+0x36>
 8004384:	2b03      	cmp	r3, #3
 8004386:	d023      	beq.n	80043d0 <USBD_SetConfig+0x7c>
 8004388:	e062      	b.n	8004450 <USBD_SetConfig+0xfc>
		{
		case USBD_STATE_ADDRESSED:
			if (cfgidx)
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <USBD_SetConfig+0x118>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01a      	beq.n	80043c8 <USBD_SetConfig+0x74>
			{
				pdev->dev_config = cfgidx;
 8004392:	4b36      	ldr	r3, [pc, #216]	; (800446c <USBD_SetConfig+0x118>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	605a      	str	r2, [r3, #4]
				pdev->dev_state = USBD_STATE_CONFIGURED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2203      	movs	r2, #3
 80043a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
				if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80043a4:	4b31      	ldr	r3, [pc, #196]	; (800446c <USBD_SetConfig+0x118>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fa5c 	bl	8003868 <USBD_SetClassConfig>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d104      	bne.n	80043c0 <USBD_SetConfig+0x6c>
				{
					USBD_CtlError(pdev, req);
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f932 	bl	8004622 <USBD_CtlError>
					return;
 80043be:	e052      	b.n	8004466 <USBD_SetConfig+0x112>
				}
				USBD_CtlSendStatus(pdev);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb05 	bl	80049d0 <USBD_CtlSendStatus>
			}
			else
			{
				USBD_CtlSendStatus(pdev);
			}
			break;
 80043c6:	e04e      	b.n	8004466 <USBD_SetConfig+0x112>
				USBD_CtlSendStatus(pdev);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fb01 	bl	80049d0 <USBD_CtlSendStatus>
			break;
 80043ce:	e04a      	b.n	8004466 <USBD_SetConfig+0x112>

		case USBD_STATE_CONFIGURED:
			if (cfgidx == 0U)
 80043d0:	4b26      	ldr	r3, [pc, #152]	; (800446c <USBD_SetConfig+0x118>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d112      	bne.n	80043fe <USBD_SetConfig+0xaa>
			{
				pdev->dev_state = USBD_STATE_ADDRESSED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
				pdev->dev_config = cfgidx;
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <USBD_SetConfig+0x118>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	605a      	str	r2, [r3, #4]
				USBD_ClrClassConfig(pdev, cfgidx);
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <USBD_SetConfig+0x118>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fa58 	bl	80038a6 <USBD_ClrClassConfig>
				USBD_CtlSendStatus(pdev);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 faea 	bl	80049d0 <USBD_CtlSendStatus>
			}
			else
			{
				USBD_CtlSendStatus(pdev);
			}
			break;
 80043fc:	e033      	b.n	8004466 <USBD_SetConfig+0x112>
			else if (cfgidx != pdev->dev_config)
 80043fe:	4b1b      	ldr	r3, [pc, #108]	; (800446c <USBD_SetConfig+0x118>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d01d      	beq.n	8004448 <USBD_SetConfig+0xf4>
				USBD_ClrClassConfig(pdev, (uint8_t) pdev->dev_config);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fa46 	bl	80038a6 <USBD_ClrClassConfig>
				pdev->dev_config = cfgidx;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <USBD_SetConfig+0x118>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	605a      	str	r2, [r3, #4]
				if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <USBD_SetConfig+0x118>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fa1c 	bl	8003868 <USBD_SetClassConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b02      	cmp	r3, #2
 8004434:	d104      	bne.n	8004440 <USBD_SetConfig+0xec>
					USBD_CtlError(pdev, req);
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8f2 	bl	8004622 <USBD_CtlError>
					return;
 800443e:	e012      	b.n	8004466 <USBD_SetConfig+0x112>
				USBD_CtlSendStatus(pdev);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fac5 	bl	80049d0 <USBD_CtlSendStatus>
			break;
 8004446:	e00e      	b.n	8004466 <USBD_SetConfig+0x112>
				USBD_CtlSendStatus(pdev);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fac1 	bl	80049d0 <USBD_CtlSendStatus>
			break;
 800444e:	e00a      	b.n	8004466 <USBD_SetConfig+0x112>

		default:
			USBD_CtlError(pdev, req);
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8e5 	bl	8004622 <USBD_CtlError>
			USBD_ClrClassConfig(pdev, cfgidx);
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <USBD_SetConfig+0x118>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fa21 	bl	80038a6 <USBD_ClrClassConfig>
			break;
 8004464:	bf00      	nop
		}
	}
}
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200001dd 	.word	0x200001dd

08004470 <USBD_GetConfig>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	if (req->wLength != 1U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	88db      	ldrh	r3, [r3, #6]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d004      	beq.n	800448c <USBD_GetConfig+0x1c>
	{
		USBD_CtlError(pdev, req);
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f8cc 	bl	8004622 <USBD_CtlError>
		default:
			USBD_CtlError(pdev, req);
			break;
		}
	}
}
 800448a:	e022      	b.n	80044d2 <USBD_GetConfig+0x62>
		switch (pdev->dev_state)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004492:	2b02      	cmp	r3, #2
 8004494:	dc02      	bgt.n	800449c <USBD_GetConfig+0x2c>
 8004496:	2b00      	cmp	r3, #0
 8004498:	dc03      	bgt.n	80044a2 <USBD_GetConfig+0x32>
 800449a:	e015      	b.n	80044c8 <USBD_GetConfig+0x58>
 800449c:	2b03      	cmp	r3, #3
 800449e:	d00b      	beq.n	80044b8 <USBD_GetConfig+0x48>
 80044a0:	e012      	b.n	80044c8 <USBD_GetConfig+0x58>
			pdev->dev_default_config = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
					(uint8_t *) (void *) &pdev->dev_default_config, 1U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3308      	adds	r3, #8
			USBD_CtlSendData(pdev,
 80044ac:	2201      	movs	r2, #1
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa2f 	bl	8004914 <USBD_CtlSendData>
			break;
 80044b6:	e00c      	b.n	80044d2 <USBD_GetConfig+0x62>
			USBD_CtlSendData(pdev, (uint8_t *) (void *) &pdev->dev_config, 1U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	2201      	movs	r2, #1
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa27 	bl	8004914 <USBD_CtlSendData>
			break;
 80044c6:	e004      	b.n	80044d2 <USBD_GetConfig+0x62>
			USBD_CtlError(pdev, req);
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8a9 	bl	8004622 <USBD_CtlError>
			break;
 80044d0:	bf00      	nop
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <USBD_GetStatus>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
	switch (pdev->dev_state)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80044ea:	3b01      	subs	r3, #1
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d81e      	bhi.n	800452e <USBD_GetStatus+0x54>
	{
	case USBD_STATE_DEFAULT:
	case USBD_STATE_ADDRESSED:
	case USBD_STATE_CONFIGURED:
		if (req->wLength != 0x2U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	88db      	ldrh	r3, [r3, #6]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d004      	beq.n	8004502 <USBD_GetStatus+0x28>
		{
			USBD_CtlError(pdev, req);
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f891 	bl	8004622 <USBD_CtlError>
			break;
 8004500:	e01a      	b.n	8004538 <USBD_GetStatus+0x5e>
		}

#if ( USBD_SELF_POWERED == 1U)
		pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	60da      	str	r2, [r3, #12]
#else
		pdev->dev_config_status = 0U;
#endif

		if (pdev->dev_remote_wakeup)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <USBD_GetStatus+0x44>
		{
			pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
		}

		USBD_CtlSendData(pdev, (uint8_t *) (void *) &pdev->dev_config_status,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	330c      	adds	r3, #12
 8004522:	2202      	movs	r2, #2
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f9f4 	bl	8004914 <USBD_CtlSendData>
				2U);
		break;
 800452c:	e004      	b.n	8004538 <USBD_GetStatus+0x5e>

	default:
		USBD_CtlError(pdev, req);
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f876 	bl	8004622 <USBD_CtlError>
		break;
 8004536:	bf00      	nop
	}
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <USBD_SetFeature>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]

	if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	885b      	ldrh	r3, [r3, #2]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <USBD_SetFeature+0x20>
	{
		pdev->dev_remote_wakeup = 1U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		USBD_CtlSendStatus(pdev);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa38 	bl	80049d0 <USBD_CtlSendStatus>
	}

}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <USBD_ClrFeature>:
 * @param  pdev: device instance
 * @param  req: usb request
 * @retval status
 */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	switch (pdev->dev_state)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004578:	3b01      	subs	r3, #1
 800457a:	2b02      	cmp	r3, #2
 800457c:	d80b      	bhi.n	8004596 <USBD_ClrFeature+0x2e>
	{
	case USBD_STATE_DEFAULT:
	case USBD_STATE_ADDRESSED:
	case USBD_STATE_CONFIGURED:
		if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	885b      	ldrh	r3, [r3, #2]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10c      	bne.n	80045a0 <USBD_ClrFeature+0x38>
		{
			pdev->dev_remote_wakeup = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
			USBD_CtlSendStatus(pdev);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa1e 	bl	80049d0 <USBD_CtlSendStatus>
		}
		break;
 8004594:	e004      	b.n	80045a0 <USBD_ClrFeature+0x38>

	default:
		USBD_CtlError(pdev, req);
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f842 	bl	8004622 <USBD_CtlError>
		break;
 800459e:	e000      	b.n	80045a2 <USBD_ClrFeature+0x3a>
		break;
 80045a0:	bf00      	nop
	}
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <USBD_ParseSetupRequest>:
 * @param  req: usb request
 * @retval None
 */

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
	req->bmRequest = *(uint8_t *) (pdata);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	701a      	strb	r2, [r3, #0]
	req->bRequest = *(uint8_t *) (pdata + 1);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785a      	ldrb	r2, [r3, #1]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	705a      	strb	r2, [r3, #1]
	req->wValue = SWAPBYTE(pdata + 2);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	3302      	adds	r3, #2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3303      	adds	r3, #3
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	4413      	add	r3, r2
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	805a      	strh	r2, [r3, #2]
	req->wIndex = SWAPBYTE(pdata + 4);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	3304      	adds	r3, #4
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3305      	adds	r3, #5
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	809a      	strh	r2, [r3, #4]
	req->wLength = SWAPBYTE(pdata + 6);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	3306      	adds	r3, #6
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b29a      	uxth	r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3307      	adds	r3, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	b29b      	uxth	r3, r3
 8004610:	4413      	add	r3, r2
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	80da      	strh	r2, [r3, #6]

}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <USBD_CtlError>:
 * @param  req: usb request
 * @retval None
 */

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
	USBD_LL_StallEP(pdev, 0x80U);
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe ffb2 	bl	8003598 <USBD_LL_StallEP>
	USBD_LL_StallEP(pdev, 0U);
 8004634:	2100      	movs	r1, #0
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe ffae 	bl	8003598 <USBD_LL_StallEP>
}
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <USBD_GetString>:
 * @param  unicode : Formatted string buffer (unicode)
 * @param  len : descriptor length
 * @retval None
 */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
	uint8_t idx = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	75fb      	strb	r3, [r7, #23]

	if (desc != NULL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d032      	beq.n	80046c0 <USBD_GetString+0x7c>
	{
		*len = (uint16_t) USBD_GetLen(desc) * 2U + 2U;
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f834 	bl	80046c8 <USBD_GetLen>
 8004660:	4603      	mov	r3, r0
 8004662:	3301      	adds	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	801a      	strh	r2, [r3, #0]
		unicode[idx++] = *(uint8_t *) (void *) len;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	75fa      	strb	r2, [r7, #23]
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4413      	add	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
		unicode[idx++] = USB_DESC_TYPE_STRING;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	75fa      	strb	r2, [r7, #23]
 8004686:	461a      	mov	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4413      	add	r3, r2
 800468c:	2203      	movs	r2, #3
 800468e:	701a      	strb	r2, [r3, #0]

		while (*desc != '\0')
 8004690:	e012      	b.n	80046b8 <USBD_GetString+0x74>
		{
			unicode[idx++] = *desc++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	60fa      	str	r2, [r7, #12]
 8004698:	7dfa      	ldrb	r2, [r7, #23]
 800469a:	1c51      	adds	r1, r2, #1
 800469c:	75f9      	strb	r1, [r7, #23]
 800469e:	4611      	mov	r1, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	440a      	add	r2, r1
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	7013      	strb	r3, [r2, #0]
			unicode[idx++] = 0U;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	75fa      	strb	r2, [r7, #23]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4413      	add	r3, r2
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
		while (*desc != '\0')
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e8      	bne.n	8004692 <USBD_GetString+0x4e>
		}
	}
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <USBD_GetLen>:
 *         return the string length
 * @param  buf : pointer to the ascii string buffer
 * @retval string length
 */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	uint8_t len = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]

	while (*buf != '\0')
 80046d4:	e005      	b.n	80046e2 <USBD_GetLen+0x1a>
	{
		len++;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	3301      	adds	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
		buf++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3301      	adds	r3, #1
 80046e0:	607b      	str	r3, [r7, #4]
	while (*buf != '\0')
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f5      	bne.n	80046d6 <USBD_GetLen+0xe>
	}

	return len;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
	...

080046f8 <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	71fb      	strb	r3, [r7, #7]
	*length = sizeof(USBD_FS_DeviceDesc);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2212      	movs	r2, #18
 8004708:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 800470a:	4b03      	ldr	r3, [pc, #12]	; (8004718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000024 	.word	0x20000024

0800471c <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	6039      	str	r1, [r7, #0]
 8004726:	71fb      	strb	r3, [r7, #7]
	*length = sizeof(USBD_LangIDDesc);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2204      	movs	r2, #4
 800472c:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000038 	.word	0x20000038

08004740 <USBD_FS_ProductStrDescriptor>:
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed,
		uint16_t *length)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *) USBD_PRODUCT_STRING_FS, USBD_StrDesc,
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	4907      	ldr	r1, [pc, #28]	; (8004774 <USBD_FS_ProductStrDescriptor+0x34>)
 8004756:	4808      	ldr	r0, [pc, #32]	; (8004778 <USBD_FS_ProductStrDescriptor+0x38>)
 8004758:	f7ff ff74 	bl	8004644 <USBD_GetString>
 800475c:	e004      	b.n	8004768 <USBD_FS_ProductStrDescriptor+0x28>
				length);
	}
	else
	{
		USBD_GetString((uint8_t *) USBD_PRODUCT_STRING_FS, USBD_StrDesc,
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <USBD_FS_ProductStrDescriptor+0x34>)
 8004762:	4805      	ldr	r0, [pc, #20]	; (8004778 <USBD_FS_ProductStrDescriptor+0x38>)
 8004764:	f7ff ff6e 	bl	8004644 <USBD_GetString>
				length);
	}
	return USBD_StrDesc;
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000794 	.word	0x20000794
 8004778:	08005d20 	.word	0x08005d20

0800477c <USBD_FS_ManufacturerStrDescriptor>:
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed,
		uint16_t *length)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	71fb      	strb	r3, [r7, #7]
	USBD_GetString((uint8_t *) USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	4904      	ldr	r1, [pc, #16]	; (800479c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800478c:	4804      	ldr	r0, [pc, #16]	; (80047a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800478e:	f7ff ff59 	bl	8004644 <USBD_GetString>
	return USBD_StrDesc;
 8004792:	4b02      	ldr	r3, [pc, #8]	; (800479c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000794 	.word	0x20000794
 80047a0:	08005d2c 	.word	0x08005d2c

080047a4 <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
	*length = USB_SIZ_STRING_SERIAL;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	221a      	movs	r2, #26
 80047b4:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 80047b6:	f000 f843 	bl	8004840 <Get_SerialNum>

	return (uint8_t *) USBD_StringSerial;
 80047ba:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000003c 	.word	0x2000003c

080047c8 <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	71fb      	strb	r3, [r7, #7]
	if (speed == USBD_SPEED_HIGH)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc,
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4907      	ldr	r1, [pc, #28]	; (80047fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80047de:	4808      	ldr	r0, [pc, #32]	; (8004800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80047e0:	f7ff ff30 	bl	8004644 <USBD_GetString>
 80047e4:	e004      	b.n	80047f0 <USBD_FS_ConfigStrDescriptor+0x28>
				length);
	}
	else
	{
		USBD_GetString((uint8_t *) USBD_CONFIGURATION_STRING_FS, USBD_StrDesc,
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80047ea:	4805      	ldr	r0, [pc, #20]	; (8004800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80047ec:	f7ff ff2a 	bl	8004644 <USBD_GetString>
				length);
	}
	return USBD_StrDesc;
 80047f0:	4b02      	ldr	r3, [pc, #8]	; (80047fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000794 	.word	0x20000794
 8004800:	08005d40 	.word	0x08005d40

08004804 <USBD_FS_InterfaceStrDescriptor>:
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed,
		uint16_t *length)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
	if (speed == 0)
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *) USBD_INTERFACE_STRING_FS, USBD_StrDesc,
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4907      	ldr	r1, [pc, #28]	; (8004838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800481a:	4808      	ldr	r0, [pc, #32]	; (800483c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800481c:	f7ff ff12 	bl	8004644 <USBD_GetString>
 8004820:	e004      	b.n	800482c <USBD_FS_InterfaceStrDescriptor+0x28>
				length);
	}
	else
	{
		USBD_GetString((uint8_t *) USBD_INTERFACE_STRING_FS, USBD_StrDesc,
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004826:	4805      	ldr	r0, [pc, #20]	; (800483c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004828:	f7ff ff0c 	bl	8004644 <USBD_GetString>
				length);
	}
	return USBD_StrDesc;
 800482c:	4b02      	ldr	r3, [pc, #8]	; (8004838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000794 	.word	0x20000794
 800483c:	08005d4c 	.word	0x08005d4c

08004840 <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <Get_SerialNum+0x44>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <Get_SerialNum+0x48>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <Get_SerialNum+0x4c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004866:	2208      	movs	r2, #8
 8004868:	4909      	ldr	r1, [pc, #36]	; (8004890 <Get_SerialNum+0x50>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f814 	bl	8004898 <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004870:	2204      	movs	r2, #4
 8004872:	4908      	ldr	r1, [pc, #32]	; (8004894 <Get_SerialNum+0x54>)
 8004874:	68b8      	ldr	r0, [r7, #8]
 8004876:	f000 f80f 	bl	8004898 <IntToUnicode>
	}
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	1ffff7e8 	.word	0x1ffff7e8
 8004888:	1ffff7ec 	.word	0x1ffff7ec
 800488c:	1ffff7f0 	.word	0x1ffff7f0
 8004890:	2000003e 	.word	0x2000003e
 8004894:	2000004e 	.word	0x2000004e

08004898 <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
 80048ae:	e027      	b.n	8004900 <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	0f1b      	lsrs	r3, r3, #28
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d80b      	bhi.n	80048d0 <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4619      	mov	r1, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	440b      	add	r3, r1
 80048c8:	3230      	adds	r2, #48	; 0x30
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e00a      	b.n	80048e6 <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	0f1b      	lsrs	r3, r3, #28
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4619      	mov	r1, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	440b      	add	r3, r1
 80048e0:	3237      	adds	r2, #55	; 0x37
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	3301      	adds	r3, #1
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	3301      	adds	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
 8004900:	7dfa      	ldrb	r2, [r7, #23]
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d3d3      	bcc.n	80048b0 <IntToUnicode+0x18>
	}
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <USBD_CtlSendData>:
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
		uint16_t len)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
	/* Set EP0 State */
	pdev->ep0_state = USBD_EP0_DATA_IN;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2202      	movs	r2, #2
 8004926:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	pdev->ep_in[0].total_length = len;
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	61da      	str	r2, [r3, #28]
	pdev->ep_in[0].rem_length = len;
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]

	/* Start the transfer */
	USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	2100      	movs	r1, #0
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7fe feb4 	bl	80036aa <USBD_LL_Transmit>

	return USBD_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <USBD_CtlContinueSendData>:
 * @param  len: length of data to be sent
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
		uint8_t *pbuf, uint16_t len)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	80fb      	strh	r3, [r7, #6]
	/* Start the next transfer */
	USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	2100      	movs	r1, #0
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fe fea2 	bl	80036aa <USBD_LL_Transmit>

	return USBD_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <USBD_CtlPrepareRx>:
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
		uint16_t len)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
	/* Set EP0 State */
	pdev->ep0_state = USBD_EP0_DATA_OUT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2203      	movs	r2, #3
 8004982:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	pdev->ep_out[0].total_length = len;
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	pdev->ep_out[0].rem_length = len;
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	/* Start the transfer */
	USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	2100      	movs	r1, #0
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7fe fea7 	bl	80036f0 <USBD_LL_PrepareReceive>

	return USBD_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <USBD_CtlContinueRx>:
 * @param  len: length of data to be received
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
		uint16_t len)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
	USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	2100      	movs	r1, #0
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7fe fe95 	bl	80036f0 <USBD_LL_PrepareReceive>

	return USBD_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <USBD_CtlSendStatus>:
 *         send zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	/* Set EP0 State */
	pdev->ep0_state = USBD_EP0_STATUS_IN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

	/* Start the transfer */
	USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80049e0:	2300      	movs	r3, #0
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fe fe5f 	bl	80036aa <USBD_LL_Transmit>

	return USBD_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USBD_CtlReceiveStatus>:
 *         receive zero lzngth packet on the ctl pipe
 * @param  pdev: device instance
 * @retval status
 */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	/* Set EP0 State */
	pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2205      	movs	r2, #5
 8004a02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

	/* Start the transfer */
	USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a06:	2300      	movs	r3, #0
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe fe6f 	bl	80036f0 <USBD_LL_PrepareReceive>

	return USBD_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USBD_MIDI_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
	USBD_MIDI_HandleTypeDef *hcdc;

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7c1b      	ldrb	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d115      	bne.n	8004a60 <USBD_MIDI_Init+0x44>
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK,
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a38:	2202      	movs	r2, #2
 8004a3a:	2181      	movs	r1, #129	; 0x81
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fe fd66 	bl	800350e <USBD_LL_OpenEP>
		MIDI_DATA_HS_IN_PACKET_SIZE);

		pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK,
 8004a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	2101      	movs	r1, #1
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fe fd5c 	bl	800350e <USBD_LL_OpenEP>
		MIDI_DATA_HS_OUT_PACKET_SIZE);

		pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004a5e:	e012      	b.n	8004a86 <USBD_MIDI_Init+0x6a>

	}
	else
	{
		/* Open EP IN */
		USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK,
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	2202      	movs	r2, #2
 8004a64:	2181      	movs	r1, #129	; 0x81
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe fd51 	bl	800350e <USBD_LL_OpenEP>
		MIDI_DATA_FS_IN_PACKET_SIZE);

		pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Open EP OUT */
		USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK,
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	2202      	movs	r2, #2
 8004a76:	2101      	movs	r1, #1
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fe fd48 	bl	800350e <USBD_LL_OpenEP>
		MIDI_DATA_FS_OUT_PACKET_SIZE);

		pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	/* Open Command IN EP */
	USBD_LL_OpenEP(pdev, MIDI_CMD_EP, USBD_EP_TYPE_INTR, MIDI_CMD_PACKET_SIZE);
 8004a86:	2308      	movs	r3, #8
 8004a88:	2203      	movs	r2, #3
 8004a8a:	2182      	movs	r1, #130	; 0x82
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fe fd3e 	bl	800350e <USBD_LL_OpenEP>
	pdev->ep_in[MIDI_CMD_EP & 0xFU].is_used = 1U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

	pdev->pClassData = USBD_malloc(sizeof(USBD_MIDI_HandleTypeDef));
 8004a98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a9c:	f001 f860 	bl	8005b60 <malloc>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

	if (pdev->pClassData == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <USBD_MIDI_Init+0x9e>
	{
		ret = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e026      	b.n	8004b08 <USBD_MIDI_Init+0xec>
	}
	else
	{
		hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ac0:	60bb      	str	r3, [r7, #8]

		/* Init  physical Interface components */
		((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Init();
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4798      	blx	r3

		/* Init Xfer states */
		hcdc->TxState = 0U;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		hcdc->RxState = 0U;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

		if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7c1b      	ldrb	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <USBD_MIDI_Init+0xdc>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hcdc->RxBuffer,
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aee:	2101      	movs	r1, #1
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fe fdfd 	bl	80036f0 <USBD_LL_PrepareReceive>
 8004af6:	e007      	b.n	8004b08 <USBD_MIDI_Init+0xec>
			MIDI_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hcdc->RxBuffer,
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004afe:	2340      	movs	r3, #64	; 0x40
 8004b00:	2101      	movs	r1, #1
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fdf4 	bl	80036f0 <USBD_LL_PrepareReceive>
			MIDI_DATA_FS_OUT_PACKET_SIZE);
		}
	}
	return ret;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <USBD_MIDI_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_MIDI_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]

	/* Close EP IN */
	USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 8004b22:	2181      	movs	r1, #129	; 0x81
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fe fd18 	bl	800355a <USBD_LL_CloseEP>
	pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Close EP OUT */
	USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 8004b30:	2101      	movs	r1, #1
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fe fd11 	bl	800355a <USBD_LL_CloseEP>
	pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* Close Command IN EP */
	USBD_LL_CloseEP(pdev, MIDI_CMD_EP);
 8004b40:	2182      	movs	r1, #130	; 0x82
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fe fd09 	bl	800355a <USBD_LL_CloseEP>
	pdev->ep_in[MIDI_CMD_EP & 0xFU].is_used = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

	/* DeInit  physical Interface components */
	if (pdev->pClassData != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <USBD_MIDI_DeInit+0x64>
	{
		((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->DeInit();
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 f801 	bl	8005b70 <free>
		pdev->pClassData = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	}

	return ret;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <USBD_MIDI_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_MIDI_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b90:	613b      	str	r3, [r7, #16]
	uint8_t ifalt = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
	uint16_t status_info = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = USBD_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d039      	beq.n	8004c1e <USBD_MIDI_Setup+0x9e>
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d17f      	bne.n	8004cae <USBD_MIDI_Setup+0x12e>
	{
	case USB_REQ_TYPE_CLASS:
		if (req->wLength)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	88db      	ldrh	r3, [r3, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d029      	beq.n	8004c0a <USBD_MIDI_Setup+0x8a>
		{
			if (req->bmRequest & 0x80U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da11      	bge.n	8004be4 <USBD_MIDI_Setup+0x64>
			{
				((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	7850      	ldrb	r0, [r2, #1]
						req->bRequest, (uint8_t *) (void *) hcdc->data,
 8004bcc:	6939      	ldr	r1, [r7, #16]
				((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	88d2      	ldrh	r2, [r2, #6]
 8004bd2:	4798      	blx	r3
						req->wLength);

				USBD_CtlSendData(pdev, (uint8_t *) (void *) hcdc->data,
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	88db      	ldrh	r3, [r3, #6]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fe99 	bl	8004914 <USBD_CtlSendData>
		else
		{
			((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(req->bRequest,
					(uint8_t *) (void *) req, 0U);
		}
		break;
 8004be2:	e06b      	b.n	8004cbc <USBD_MIDI_Setup+0x13c>
				hcdc->CmdOpCode = req->bRequest;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785a      	ldrb	r2, [r3, #1]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				hcdc->CmdLength = (uint8_t) req->wLength;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	88db      	ldrh	r3, [r3, #6]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
				USBD_CtlPrepareRx(pdev, (uint8_t *) (void *) hcdc->data,
 8004bfa:	6939      	ldr	r1, [r7, #16]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	88db      	ldrh	r3, [r3, #6]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff feb4 	bl	8004970 <USBD_CtlPrepareRx>
		break;
 8004c08:	e058      	b.n	8004cbc <USBD_MIDI_Setup+0x13c>
			((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(req->bRequest,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	7850      	ldrb	r0, [r2, #1]
 8004c16:	2200      	movs	r2, #0
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4798      	blx	r3
		break;
 8004c1c:	e04e      	b.n	8004cbc <USBD_MIDI_Setup+0x13c>

	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	2b0b      	cmp	r3, #11
 8004c24:	d02e      	beq.n	8004c84 <USBD_MIDI_Setup+0x104>
 8004c26:	2b0b      	cmp	r3, #11
 8004c28:	dc38      	bgt.n	8004c9c <USBD_MIDI_Setup+0x11c>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <USBD_MIDI_Setup+0xb4>
 8004c2e:	2b0a      	cmp	r3, #10
 8004c30:	d014      	beq.n	8004c5c <USBD_MIDI_Setup+0xdc>
 8004c32:	e033      	b.n	8004c9c <USBD_MIDI_Setup+0x11c>
		{
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <USBD_MIDI_Setup+0xce>
			{
				USBD_CtlSendData(pdev, (uint8_t *) (void *) &status_info, 2U);
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2202      	movs	r2, #2
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fe64 	bl	8004914 <USBD_CtlSendData>
			else
			{
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8004c4c:	e02e      	b.n	8004cac <USBD_MIDI_Setup+0x12c>
				USBD_CtlError(pdev, req);
 8004c4e:	6839      	ldr	r1, [r7, #0]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fce6 	bl	8004622 <USBD_CtlError>
				ret = USBD_FAIL;
 8004c56:	2302      	movs	r3, #2
 8004c58:	75fb      	strb	r3, [r7, #23]
			break;
 8004c5a:	e027      	b.n	8004cac <USBD_MIDI_Setup+0x12c>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <USBD_MIDI_Setup+0xf6>
			{
				USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c66:	f107 030f 	add.w	r3, r7, #15
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe50 	bl	8004914 <USBD_CtlSendData>
			else
			{
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8004c74:	e01a      	b.n	8004cac <USBD_MIDI_Setup+0x12c>
				USBD_CtlError(pdev, req);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fcd2 	bl	8004622 <USBD_CtlError>
				ret = USBD_FAIL;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	75fb      	strb	r3, [r7, #23]
			break;
 8004c82:	e013      	b.n	8004cac <USBD_MIDI_Setup+0x12c>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d00d      	beq.n	8004caa <USBD_MIDI_Setup+0x12a>
			{
				USBD_CtlError(pdev, req);
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fcc6 	bl	8004622 <USBD_CtlError>
				ret = USBD_FAIL;
 8004c96:	2302      	movs	r3, #2
 8004c98:	75fb      	strb	r3, [r7, #23]
			}
			break;
 8004c9a:	e006      	b.n	8004caa <USBD_MIDI_Setup+0x12a>

		default:
			USBD_CtlError(pdev, req);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fcbf 	bl	8004622 <USBD_CtlError>
			ret = USBD_FAIL;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	75fb      	strb	r3, [r7, #23]
			break;
 8004ca8:	e000      	b.n	8004cac <USBD_MIDI_Setup+0x12c>
			break;
 8004caa:	bf00      	nop
		}
		break;
 8004cac:	e006      	b.n	8004cbc <USBD_MIDI_Setup+0x13c>

	default:
		USBD_CtlError(pdev, req);
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fcb6 	bl	8004622 <USBD_CtlError>
		ret = USBD_FAIL;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	75fb      	strb	r3, [r7, #23]
		break;
 8004cba:	bf00      	nop
	}

	return ret;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <USBD_MIDI_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_MIDI_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004cd8:	60fb      	str	r3, [r7, #12]
	PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8004ce0:	60bb      	str	r3, [r7, #8]

	if (pdev->pClassData != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03a      	beq.n	8004d62 <USBD_MIDI_DataIn+0x9c>
	{
		if ((pdev->ep_in[epnum].total_length > 0U)
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	331c      	adds	r3, #28
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d029      	beq.n	8004d56 <USBD_MIDI_DataIn+0x90>
				&& ((pdev->ep_in[epnum].total_length
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331c      	adds	r3, #28
 8004d12:	681a      	ldr	r2, [r3, #0]
						% hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d14:	78f9      	ldrb	r1, [r7, #3]
 8004d16:	68b8      	ldr	r0, [r7, #8]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4403      	add	r3, r0
 8004d22:	3338      	adds	r3, #56	; 0x38
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d2a:	fb03 f301 	mul.w	r3, r3, r1
 8004d2e:	1ad3      	subs	r3, r2, r3
				&& ((pdev->ep_in[epnum].total_length
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d110      	bne.n	8004d56 <USBD_MIDI_DataIn+0x90>
		{
			/* Update the packet total length */
			pdev->ep_in[epnum].total_length = 0U;
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	331c      	adds	r3, #28
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

			/* Send ZLP */
			USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d48:	78f9      	ldrb	r1, [r7, #3]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fe fcab 	bl	80036aa <USBD_LL_Transmit>
 8004d54:	e003      	b.n	8004d5e <USBD_MIDI_DataIn+0x98>
		}
		else
		{
			hcdc->TxState = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		}
		return USBD_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <USBD_MIDI_DataIn+0x9e>
	}
	else
	{
		return USBD_FAIL;
 8004d62:	2302      	movs	r3, #2
	}
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_MIDI_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t USBD_MIDI_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004d7e:	60fb      	str	r3, [r7, #12]

	/* Get the received data length */
	hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fe fcd6 	bl	8003736 <USBD_LL_GetRxDataSize>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* USB data will be immediately processed, this allow next USB traffic being
	 NAKed till the end of the application Xfer */
	if (pdev->pClassData != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <USBD_MIDI_DataOut+0x4c>
	{
		((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Receive(hcdc->RxBuffer,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004db0:	4611      	mov	r1, r2
 8004db2:	4798      	blx	r3
				&hcdc->RxLength);

		return USBD_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <USBD_MIDI_DataOut+0x4e>
	}
	else
	{
		return USBD_FAIL;
 8004db8:	2302      	movs	r3, #2
	}
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <USBD_MIDI_EP0_RxReady>:
 *         Handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_MIDI_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004dd0:	60fb      	str	r3, [r7, #12]

	if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <USBD_MIDI_EP0_RxReady+0x46>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004de2:	2bff      	cmp	r3, #255	; 0xff
 8004de4:	d010      	beq.n	8004e08 <USBD_MIDI_EP0_RxReady+0x46>
	{
		((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
				(uint8_t *) (void *) hcdc->data, (uint16_t) hcdc->CmdLength);
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
		((USBD_MIDI_ItfTypeDef *) pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	4798      	blx	r3
		hcdc->CmdOpCode = 0xFFU;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

	}
	return USBD_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <USBD_MIDI_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_MIDI_GetFSCfgDesc(uint16_t *length)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_MIDI_CfgFSDesc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2265      	movs	r2, #101	; 0x65
 8004e20:	801a      	strh	r2, [r3, #0]
	return USBD_MIDI_CfgFSDesc;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <USBD_MIDI_GetFSCfgDesc+0x1c>)
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000009c 	.word	0x2000009c

08004e34 <USBD_MIDI_GetDeviceQualifierDescriptor>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t *USBD_MIDI_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_MIDI_DeviceQualifierDesc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	220a      	movs	r2, #10
 8004e40:	801a      	strh	r2, [r3, #0]
	return USBD_MIDI_DeviceQualifierDesc;
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <USBD_MIDI_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000058 	.word	0x20000058

08004e54 <USBD_MIDI_RegisterInterface>:
 * @param  fops: CD  Interface callback
 * @retval status
 */
uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev,
		USBD_MIDI_ItfTypeDef *fops)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	uint8_t ret = USBD_FAIL;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	73fb      	strb	r3, [r7, #15]

	if (fops != NULL)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <USBD_MIDI_RegisterInterface+0x20>
	{
		pdev->pUserData = fops;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		ret = USBD_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <USBD_MIDI_SetTxBuffer>:
 * @param  pbuff: Tx Buffer
 * @retval status
 */
uint8_t USBD_MIDI_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff,
		uint16_t length)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004e94:	617b      	str	r3, [r7, #20]

	hcdc->TxBuffer = pbuff;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	hcdc->TxLength = length;
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return USBD_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <USBD_MIDI_SetRxBuffer>:
 * @param  pdev: device instance
 * @param  pbuff: Rx Buffer
 * @retval status
 */
uint8_t USBD_MIDI_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ec2:	60fb      	str	r3, [r7, #12]

	hcdc->RxBuffer = pbuff;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	return USBD_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <USBD_MIDI_TransmitPacket>:
 *         Transmit packet on IN endpoint
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_MIDI_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004ee6:	60fb      	str	r3, [r7, #12]

	if (pdev->pClassData != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01c      	beq.n	8004f2c <USBD_MIDI_TransmitPacket+0x54>
	{
		if (hcdc->TxState == 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <USBD_MIDI_TransmitPacket+0x50>
		{
			/* Tx Transfer in progress */
			hcdc->TxState = 1U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

			/* Update the packet total length */
			pdev->ep_in[MIDI_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30

			/* Transmit next packet */
			USBD_LL_Transmit(pdev, MIDI_IN_EP, hcdc->TxBuffer,
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
					(uint16_t) hcdc->TxLength);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
			USBD_LL_Transmit(pdev, MIDI_IN_EP, hcdc->TxBuffer,
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2181      	movs	r1, #129	; 0x81
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fe fbc3 	bl	80036aa <USBD_LL_Transmit>

			return USBD_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e002      	b.n	8004f2e <USBD_MIDI_TransmitPacket+0x56>
		}
		else
		{
			return USBD_BUSY;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <USBD_MIDI_TransmitPacket+0x56>
		}
	}
	else
	{
		return USBD_FAIL;
 8004f2c:	2302      	movs	r3, #2
	}
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USBD_MIDI_ReceivePacket>:
 *         prepare OUT Endpoint for reception
 * @param  pdev: device instance
 * @retval status
 */
uint8_t USBD_MIDI_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
	USBD_MIDI_HandleTypeDef *hcdc = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f44:	60fb      	str	r3, [r7, #12]

	/* Suspend or Resume USB Out process */
	if (pdev->pClassData != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d017      	beq.n	8004f80 <USBD_MIDI_ReceivePacket+0x4a>
	{
		if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7c1b      	ldrb	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <USBD_MIDI_ReceivePacket+0x36>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f62:	2101      	movs	r1, #1
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fe fbc3 	bl	80036f0 <USBD_LL_PrepareReceive>
 8004f6a:	e007      	b.n	8004f7c <USBD_MIDI_ReceivePacket+0x46>
			MIDI_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	2101      	movs	r1, #1
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fbba 	bl	80036f0 <USBD_LL_PrepareReceive>
			MIDI_OUT_EP, hcdc->RxBuffer,
			MIDI_DATA_FS_OUT_PACKET_SIZE);
		}
		return USBD_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e000      	b.n	8004f82 <USBD_MIDI_ReceivePacket+0x4c>
	}
	else
	{
		return USBD_FAIL;
 8004f80:	2302      	movs	r3, #2
	}
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <MIDI_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t MIDI_Init_FS(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004f90:	2200      	movs	r2, #0
 8004f92:	4905      	ldr	r1, [pc, #20]	; (8004fa8 <MIDI_Init_FS+0x1c>)
 8004f94:	4805      	ldr	r0, [pc, #20]	; (8004fac <MIDI_Init_FS+0x20>)
 8004f96:	f7ff ff73 	bl	8004e80 <USBD_MIDI_SetTxBuffer>
	USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004f9a:	4905      	ldr	r1, [pc, #20]	; (8004fb0 <MIDI_Init_FS+0x24>)
 8004f9c:	4803      	ldr	r0, [pc, #12]	; (8004fac <MIDI_Init_FS+0x20>)
 8004f9e:	f7ff ff88 	bl	8004eb2 <USBD_MIDI_SetRxBuffer>
	return (USBD_OK);
 8004fa2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20001194 	.word	0x20001194
 8004fac:	2000020c 	.word	0x2000020c
 8004fb0:	20000994 	.word	0x20000994

08004fb4 <MIDI_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t MIDI_DeInit_FS(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8004fb8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
	...

08004fc4 <MIDI_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t MIDI_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	71fb      	strb	r3, [r7, #7]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b23      	cmp	r3, #35	; 0x23
 8004fd8:	d84a      	bhi.n	8005070 <MIDI_Control_FS+0xac>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <MIDI_Control_FS+0x1c>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005071 	.word	0x08005071
 8004fe4:	08005071 	.word	0x08005071
 8004fe8:	08005071 	.word	0x08005071
 8004fec:	08005071 	.word	0x08005071
 8004ff0:	08005071 	.word	0x08005071
 8004ff4:	08005071 	.word	0x08005071
 8004ff8:	08005071 	.word	0x08005071
 8004ffc:	08005071 	.word	0x08005071
 8005000:	08005071 	.word	0x08005071
 8005004:	08005071 	.word	0x08005071
 8005008:	08005071 	.word	0x08005071
 800500c:	08005071 	.word	0x08005071
 8005010:	08005071 	.word	0x08005071
 8005014:	08005071 	.word	0x08005071
 8005018:	08005071 	.word	0x08005071
 800501c:	08005071 	.word	0x08005071
 8005020:	08005071 	.word	0x08005071
 8005024:	08005071 	.word	0x08005071
 8005028:	08005071 	.word	0x08005071
 800502c:	08005071 	.word	0x08005071
 8005030:	08005071 	.word	0x08005071
 8005034:	08005071 	.word	0x08005071
 8005038:	08005071 	.word	0x08005071
 800503c:	08005071 	.word	0x08005071
 8005040:	08005071 	.word	0x08005071
 8005044:	08005071 	.word	0x08005071
 8005048:	08005071 	.word	0x08005071
 800504c:	08005071 	.word	0x08005071
 8005050:	08005071 	.word	0x08005071
 8005054:	08005071 	.word	0x08005071
 8005058:	08005071 	.word	0x08005071
 800505c:	08005071 	.word	0x08005071
 8005060:	08005071 	.word	0x08005071
 8005064:	08005071 	.word	0x08005071
 8005068:	08005071 	.word	0x08005071
 800506c:	08005071 	.word	0x08005071
	case MIDI_SEND_BREAK:

		break;

	default:
		break;
 8005070:	bf00      	nop
	}

	return (USBD_OK);
 8005072:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop

08005080 <MIDI_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t MIDI_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_MIDI_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4805      	ldr	r0, [pc, #20]	; (80050a4 <MIDI_Receive_FS+0x24>)
 800508e:	f7ff ff10 	bl	8004eb2 <USBD_MIDI_SetRxBuffer>
	USBD_MIDI_ReceivePacket(&hUsbDeviceFS);
 8005092:	4804      	ldr	r0, [pc, #16]	; (80050a4 <MIDI_Receive_FS+0x24>)
 8005094:	f7ff ff4f 	bl	8004f36 <USBD_MIDI_ReceivePacket>
	return (USBD_OK);
 8005098:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000020c 	.word	0x2000020c

080050a8 <MIDI_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t MIDI_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_MIDI_HandleTypeDef *hcdc =
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <MIDI_Transmit_FS+0x48>)
 80050ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80050be:	60bb      	str	r3, [r7, #8]
			(USBD_MIDI_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <MIDI_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e00b      	b.n	80050e6 <MIDI_Transmit_FS+0x3e>
	}
	USBD_MIDI_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4806      	ldr	r0, [pc, #24]	; (80050f0 <MIDI_Transmit_FS+0x48>)
 80050d6:	f7ff fed3 	bl	8004e80 <USBD_MIDI_SetTxBuffer>
	result = USBD_MIDI_TransmitPacket(&hUsbDeviceFS);
 80050da:	4805      	ldr	r0, [pc, #20]	; (80050f0 <MIDI_Transmit_FS+0x48>)
 80050dc:	f7ff fefc 	bl	8004ed8 <USBD_MIDI_TransmitPacket>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	2000020c 	.word	0x2000020c

080050f4 <initialize>:
static uint8_t KInp = 0; //entrada para varredura do teclado
static uint8_t Split = 0; //divisão do teclado: 0 - não dividido, 1 - dividido
static uint8_t Shift = 0; //shift: 0 - destivado, 1 - ativado

void initialize()
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <keypad_scan>:
void setup()
{
}

void keypad_scan()
{
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	af00      	add	r7, sp, #0
	for(KOut = 0; KOut < 8; KOut++)
 8005104:	4b86      	ldr	r3, [pc, #536]	; (8005320 <keypad_scan+0x220>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e101      	b.n	8005310 <keypad_scan+0x210>
	{
		//coloca todas as saídas em nível 1
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 \
 800510c:	2201      	movs	r2, #1
 800510e:	21ff      	movs	r1, #255	; 0xff
 8005110:	4884      	ldr	r0, [pc, #528]	; (8005324 <keypad_scan+0x224>)
 8005112:	f7fb f9f8 	bl	8000506 <HAL_GPIO_WritePin>
				| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
		switch(KOut) //coloca uma saída em nível 0
 8005116:	4b82      	ldr	r3, [pc, #520]	; (8005320 <keypad_scan+0x220>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b07      	cmp	r3, #7
 800511c:	d842      	bhi.n	80051a4 <keypad_scan+0xa4>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <keypad_scan+0x24>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005145 	.word	0x08005145
 8005128:	08005151 	.word	0x08005151
 800512c:	0800515d 	.word	0x0800515d
 8005130:	08005169 	.word	0x08005169
 8005134:	08005175 	.word	0x08005175
 8005138:	08005181 	.word	0x08005181
 800513c:	0800518d 	.word	0x0800518d
 8005140:	08005199 	.word	0x08005199
		{
			case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005144:	2200      	movs	r2, #0
 8005146:	2101      	movs	r1, #1
 8005148:	4876      	ldr	r0, [pc, #472]	; (8005324 <keypad_scan+0x224>)
 800514a:	f7fb f9dc 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 800514e:	e029      	b.n	80051a4 <keypad_scan+0xa4>
			case 1:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005150:	2200      	movs	r2, #0
 8005152:	2102      	movs	r1, #2
 8005154:	4873      	ldr	r0, [pc, #460]	; (8005324 <keypad_scan+0x224>)
 8005156:	f7fb f9d6 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 800515a:	e023      	b.n	80051a4 <keypad_scan+0xa4>
			case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800515c:	2200      	movs	r2, #0
 800515e:	2104      	movs	r1, #4
 8005160:	4870      	ldr	r0, [pc, #448]	; (8005324 <keypad_scan+0x224>)
 8005162:	f7fb f9d0 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 8005166:	e01d      	b.n	80051a4 <keypad_scan+0xa4>
			case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	2108      	movs	r1, #8
 800516c:	486d      	ldr	r0, [pc, #436]	; (8005324 <keypad_scan+0x224>)
 800516e:	f7fb f9ca 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 8005172:	e017      	b.n	80051a4 <keypad_scan+0xa4>
			case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	2110      	movs	r1, #16
 8005178:	486a      	ldr	r0, [pc, #424]	; (8005324 <keypad_scan+0x224>)
 800517a:	f7fb f9c4 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 800517e:	e011      	b.n	80051a4 <keypad_scan+0xa4>
			case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8005180:	2200      	movs	r2, #0
 8005182:	2120      	movs	r1, #32
 8005184:	4867      	ldr	r0, [pc, #412]	; (8005324 <keypad_scan+0x224>)
 8005186:	f7fb f9be 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 800518a:	e00b      	b.n	80051a4 <keypad_scan+0xa4>
			case 6:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800518c:	2200      	movs	r2, #0
 800518e:	2140      	movs	r1, #64	; 0x40
 8005190:	4864      	ldr	r0, [pc, #400]	; (8005324 <keypad_scan+0x224>)
 8005192:	f7fb f9b8 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 8005196:	e005      	b.n	80051a4 <keypad_scan+0xa4>
			case 7:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005198:	2200      	movs	r2, #0
 800519a:	2180      	movs	r1, #128	; 0x80
 800519c:	4861      	ldr	r0, [pc, #388]	; (8005324 <keypad_scan+0x224>)
 800519e:	f7fb f9b2 	bl	8000506 <HAL_GPIO_WritePin>
				break;
 80051a2:	bf00      	nop
		}
		for(KInp = 0; KInp < 7; KInp++) //testa o estado de todas as entradas
 80051a4:	4b60      	ldr	r3, [pc, #384]	; (8005328 <keypad_scan+0x228>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e0a3      	b.n	80052f4 <keypad_scan+0x1f4>
		{
			Note = (KInp * 8) + KOut; //obtem a nota
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <keypad_scan+0x228>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <keypad_scan+0x220>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	4413      	add	r3, r2
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b5b      	ldr	r3, [pc, #364]	; (800532c <keypad_scan+0x22c>)
 80051be:	701a      	strb	r2, [r3, #0]
			NoteBit = 1;
 80051c0:	495b      	ldr	r1, [pc, #364]	; (8005330 <keypad_scan+0x230>)
 80051c2:	f04f 0201 	mov.w	r2, #1
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9c1 2300 	strd	r2, r3, [r1]
			NoteBit <<= Note;
 80051ce:	4b58      	ldr	r3, [pc, #352]	; (8005330 <keypad_scan+0x230>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	4955      	ldr	r1, [pc, #340]	; (800532c <keypad_scan+0x22c>)
 80051d6:	7809      	ldrb	r1, [r1, #0]
 80051d8:	f1a1 0620 	sub.w	r6, r1, #32
 80051dc:	f1c1 0020 	rsb	r0, r1, #32
 80051e0:	fa03 f501 	lsl.w	r5, r3, r1
 80051e4:	fa02 f606 	lsl.w	r6, r2, r6
 80051e8:	4335      	orrs	r5, r6
 80051ea:	fa22 f000 	lsr.w	r0, r2, r0
 80051ee:	4305      	orrs	r5, r0
 80051f0:	fa02 f401 	lsl.w	r4, r2, r1
 80051f4:	4b4e      	ldr	r3, [pc, #312]	; (8005330 <keypad_scan+0x230>)
 80051f6:	e9c3 4500 	strd	r4, r5, [r3]
			switch(KInp)
 80051fa:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <keypad_scan+0x228>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d872      	bhi.n	80052e8 <keypad_scan+0x1e8>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <keypad_scan+0x108>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005225 	.word	0x08005225
 800520c:	08005241 	.word	0x08005241
 8005210:	0800525d 	.word	0x0800525d
 8005214:	08005279 	.word	0x08005279
 8005218:	08005295 	.word	0x08005295
 800521c:	080052b1 	.word	0x080052b1
 8005220:	080052cd 	.word	0x080052cd
			{
				case 0:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 8005224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005228:	483e      	ldr	r0, [pc, #248]	; (8005324 <keypad_scan+0x224>)
 800522a:	f7fb f965 	bl	80004f8 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <keypad_scan+0x13a>
 8005234:	f000 f87e 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 8005238:	e056      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 800523a:	f000 f9df 	bl	80055fc <key_unpressed>
					break;
 800523e:	e053      	b.n	80052e8 <keypad_scan+0x1e8>
				case 1:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 8005240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005244:	4837      	ldr	r0, [pc, #220]	; (8005324 <keypad_scan+0x224>)
 8005246:	f7fb f957 	bl	80004f8 <HAL_GPIO_ReadPin>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <keypad_scan+0x156>
 8005250:	f000 f870 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 8005254:	e048      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 8005256:	f000 f9d1 	bl	80055fc <key_unpressed>
					break;
 800525a:	e045      	b.n	80052e8 <keypad_scan+0x1e8>
				case 2:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 800525c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005260:	4830      	ldr	r0, [pc, #192]	; (8005324 <keypad_scan+0x224>)
 8005262:	f7fb f949 	bl	80004f8 <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <keypad_scan+0x172>
 800526c:	f000 f862 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 8005270:	e03a      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 8005272:	f000 f9c3 	bl	80055fc <key_unpressed>
					break;
 8005276:	e037      	b.n	80052e8 <keypad_scan+0x1e8>
				case 3:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 8005278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800527c:	4829      	ldr	r0, [pc, #164]	; (8005324 <keypad_scan+0x224>)
 800527e:	f7fb f93b 	bl	80004f8 <HAL_GPIO_ReadPin>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <keypad_scan+0x18e>
 8005288:	f000 f854 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 800528c:	e02c      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 800528e:	f000 f9b5 	bl	80055fc <key_unpressed>
					break;
 8005292:	e029      	b.n	80052e8 <keypad_scan+0x1e8>
				case 4:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 8005294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005298:	4822      	ldr	r0, [pc, #136]	; (8005324 <keypad_scan+0x224>)
 800529a:	f7fb f92d 	bl	80004f8 <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <keypad_scan+0x1aa>
 80052a4:	f000 f846 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 80052a8:	e01e      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 80052aa:	f000 f9a7 	bl	80055fc <key_unpressed>
					break;
 80052ae:	e01b      	b.n	80052e8 <keypad_scan+0x1e8>
				case 5:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 80052b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b4:	481b      	ldr	r0, [pc, #108]	; (8005324 <keypad_scan+0x224>)
 80052b6:	f7fb f91f 	bl	80004f8 <HAL_GPIO_ReadPin>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <keypad_scan+0x1c6>
 80052c0:	f000 f838 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 80052c4:	e010      	b.n	80052e8 <keypad_scan+0x1e8>
					else key_unpressed(); //tecla não pressionada
 80052c6:	f000 f999 	bl	80055fc <key_unpressed>
					break;
 80052ca:	e00d      	b.n	80052e8 <keypad_scan+0x1e8>
				case 6:
					if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET) key_pressed(); //tecla pressionada
 80052cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d0:	4814      	ldr	r0, [pc, #80]	; (8005324 <keypad_scan+0x224>)
 80052d2:	f7fb f911 	bl	80004f8 <HAL_GPIO_ReadPin>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <keypad_scan+0x1e2>
 80052dc:	f000 f82a 	bl	8005334 <key_pressed>
					else key_unpressed(); //tecla não pressionada
					break;
 80052e0:	e001      	b.n	80052e6 <keypad_scan+0x1e6>
					else key_unpressed(); //tecla não pressionada
 80052e2:	f000 f98b 	bl	80055fc <key_unpressed>
					break;
 80052e6:	bf00      	nop
		for(KInp = 0; KInp < 7; KInp++) //testa o estado de todas as entradas
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <keypad_scan+0x228>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <keypad_scan+0x228>)
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <keypad_scan+0x228>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	f67f af57 	bls.w	80051ac <keypad_scan+0xac>
			}
		}
		HAL_Delay(1);
 80052fe:	2001      	movs	r0, #1
 8005300:	f7fa ff6c 	bl	80001dc <HAL_Delay>
	for(KOut = 0; KOut < 8; KOut++)
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <keypad_scan+0x220>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <keypad_scan+0x220>)
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <keypad_scan+0x220>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b07      	cmp	r3, #7
 8005316:	f67f aef9 	bls.w	800510c <keypad_scan+0xc>
	}
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005320:	200001f1 	.word	0x200001f1
 8005324:	40010c00 	.word	0x40010c00
 8005328:	200001f2 	.word	0x200001f2
 800532c:	200001f0 	.word	0x200001f0
 8005330:	200001e8 	.word	0x200001e8

08005334 <key_pressed>:

void key_pressed()
{
 8005334:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005338:	af00      	add	r7, sp, #0
	if(!(KeypadState & NoteBit)) //estava pressionada?
 800533a:	4ca7      	ldr	r4, [pc, #668]	; (80055d8 <key_pressed+0x2a4>)
 800533c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005340:	4ca6      	ldr	r4, [pc, #664]	; (80055dc <key_pressed+0x2a8>)
 8005342:	cc30      	ldmia	r4, {r4, r5}
 8005344:	ea08 0004 	and.w	r0, r8, r4
 8005348:	ea09 0105 	and.w	r1, r9, r5
 800534c:	4301      	orrs	r1, r0
 800534e:	f040 8140 	bne.w	80055d2 <key_pressed+0x29e>
	{ //não
		KeypadState |= NoteBit; //sinaliza tecla pressionada
 8005352:	49a1      	ldr	r1, [pc, #644]	; (80055d8 <key_pressed+0x2a4>)
 8005354:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005358:	49a0      	ldr	r1, [pc, #640]	; (80055dc <key_pressed+0x2a8>)
 800535a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800535e:	ea44 0200 	orr.w	r2, r4, r0
 8005362:	ea45 0301 	orr.w	r3, r5, r1
 8005366:	499c      	ldr	r1, [pc, #624]	; (80055d8 <key_pressed+0x2a4>)
 8005368:	e9c1 2300 	strd	r2, r3, [r1]
		if(Note >= 0 && Note <= 48) //nota dentro do intervalo válido?
 800536c:	4b9c      	ldr	r3, [pc, #624]	; (80055e0 <key_pressed+0x2ac>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d863      	bhi.n	800543c <key_pressed+0x108>
		{ //sim
			if(Split == 1) //Split ativado?
 8005374:	4b9b      	ldr	r3, [pc, #620]	; (80055e4 <key_pressed+0x2b0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d11d      	bne.n	80053b8 <key_pressed+0x84>
			{ //sim
				SNote = Note; //define a divisão do teclado
 800537c:	4b98      	ldr	r3, [pc, #608]	; (80055e0 <key_pressed+0x2ac>)
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	4b99      	ldr	r3, [pc, #612]	; (80055e8 <key_pressed+0x2b4>)
 8005382:	701a      	strb	r2, [r3, #0]
				if(SNote == 48) beep(1, 100,100); //1 bip curto
 8005384:	4b98      	ldr	r3, [pc, #608]	; (80055e8 <key_pressed+0x2b4>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d105      	bne.n	8005398 <key_pressed+0x64>
 800538c:	2264      	movs	r2, #100	; 0x64
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	2001      	movs	r0, #1
 8005392:	f000 f9b3 	bl	80056fc <beep>
				beep(1, 500, 100); //1 bip longo
			}
			else beep(1, 100, 100); //um bip curto
		}
	}
}
 8005396:	e11c      	b.n	80055d2 <key_pressed+0x29e>
				else if(SNote == 0) beep(2, 100, 100); //2 bips curtos
 8005398:	4b93      	ldr	r3, [pc, #588]	; (80055e8 <key_pressed+0x2b4>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <key_pressed+0x78>
 80053a0:	2264      	movs	r2, #100	; 0x64
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	2002      	movs	r0, #2
 80053a6:	f000 f9a9 	bl	80056fc <beep>
}
 80053aa:	e112      	b.n	80055d2 <key_pressed+0x29e>
				else  beep(3, 100, 100); //3 bips curtos
 80053ac:	2264      	movs	r2, #100	; 0x64
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	2003      	movs	r0, #3
 80053b2:	f000 f9a3 	bl	80056fc <beep>
}
 80053b6:	e10c      	b.n	80055d2 <key_pressed+0x29e>
				if(SNote == 48) //somente canal 0?
 80053b8:	4b8b      	ldr	r3, [pc, #556]	; (80055e8 <key_pressed+0x2b4>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d10c      	bne.n	80053da <key_pressed+0xa6>
					midiMessage(MIDI_NOTE_ON, 0, FirstNote0 + Note, Velocit); //envia mensagem
 80053c0:	4b8a      	ldr	r3, [pc, #552]	; (80055ec <key_pressed+0x2b8>)
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	4b86      	ldr	r3, [pc, #536]	; (80055e0 <key_pressed+0x2ac>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	4413      	add	r3, r2
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <key_pressed+0x2bc>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2100      	movs	r1, #0
 80053d2:	2090      	movs	r0, #144	; 0x90
 80053d4:	f7fd fee6 	bl	80031a4 <midiMessage>
}
 80053d8:	e0fb      	b.n	80055d2 <key_pressed+0x29e>
				else if(SNote == 0) //somente canal 1?
 80053da:	4b83      	ldr	r3, [pc, #524]	; (80055e8 <key_pressed+0x2b4>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <key_pressed+0xc8>
					midiMessage(MIDI_NOTE_ON, 1, FirstNote1 + Note, Velocit); //envia mensagem
 80053e2:	4b84      	ldr	r3, [pc, #528]	; (80055f4 <key_pressed+0x2c0>)
 80053e4:	781a      	ldrb	r2, [r3, #0]
 80053e6:	4b7e      	ldr	r3, [pc, #504]	; (80055e0 <key_pressed+0x2ac>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	4b80      	ldr	r3, [pc, #512]	; (80055f0 <key_pressed+0x2bc>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2101      	movs	r1, #1
 80053f4:	2090      	movs	r0, #144	; 0x90
 80053f6:	f7fd fed5 	bl	80031a4 <midiMessage>
}
 80053fa:	e0ea      	b.n	80055d2 <key_pressed+0x29e>
					if(Note < SNote) //teclas do canal 0?
 80053fc:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <key_pressed+0x2ac>)
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	4b79      	ldr	r3, [pc, #484]	; (80055e8 <key_pressed+0x2b4>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d20c      	bcs.n	8005422 <key_pressed+0xee>
						midiMessage(MIDI_NOTE_ON, 0, FirstNote0 + Note, Velocit); //envia mensagem
 8005408:	4b78      	ldr	r3, [pc, #480]	; (80055ec <key_pressed+0x2b8>)
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	4b74      	ldr	r3, [pc, #464]	; (80055e0 <key_pressed+0x2ac>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4413      	add	r3, r2
 8005412:	b2da      	uxtb	r2, r3
 8005414:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <key_pressed+0x2bc>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2100      	movs	r1, #0
 800541a:	2090      	movs	r0, #144	; 0x90
 800541c:	f7fd fec2 	bl	80031a4 <midiMessage>
}
 8005420:	e0d7      	b.n	80055d2 <key_pressed+0x29e>
						midiMessage(MIDI_NOTE_ON, 1, FirstNote1 + Note, Velocit); //envia mensagem
 8005422:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <key_pressed+0x2c0>)
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	4b6e      	ldr	r3, [pc, #440]	; (80055e0 <key_pressed+0x2ac>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	4413      	add	r3, r2
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b70      	ldr	r3, [pc, #448]	; (80055f0 <key_pressed+0x2bc>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2101      	movs	r1, #1
 8005434:	2090      	movs	r0, #144	; 0x90
 8005436:	f7fd feb5 	bl	80031a4 <midiMessage>
}
 800543a:	e0ca      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 49) //função SHIFT?
 800543c:	4b68      	ldr	r3, [pc, #416]	; (80055e0 <key_pressed+0x2ac>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b31      	cmp	r3, #49	; 0x31
 8005442:	d103      	bne.n	800544c <key_pressed+0x118>
			Shift = 1; //ativa
 8005444:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <key_pressed+0x2c4>)
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
}
 800544a:	e0c2      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 50) //função SPLIT?
 800544c:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <key_pressed+0x2ac>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b32      	cmp	r3, #50	; 0x32
 8005452:	d103      	bne.n	800545c <key_pressed+0x128>
			Split = 1; //ativa
 8005454:	4b63      	ldr	r3, [pc, #396]	; (80055e4 <key_pressed+0x2b0>)
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
}
 800545a:	e0ba      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 51) //função <OCT?
 800545c:	4b60      	ldr	r3, [pc, #384]	; (80055e0 <key_pressed+0x2ac>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b33      	cmp	r3, #51	; 0x33
 8005462:	d137      	bne.n	80054d4 <key_pressed+0x1a0>
			if(Shift == 1) //Shif ativado?
 8005464:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <key_pressed+0x2c4>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <key_pressed+0x16c>
				FirstNote1 += 12; //desloca uma oitava para direita
 800546c:	4b61      	ldr	r3, [pc, #388]	; (80055f4 <key_pressed+0x2c0>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4b5f      	ldr	r3, [pc, #380]	; (80055f4 <key_pressed+0x2c0>)
 8005476:	701a      	strb	r2, [r3, #0]
				if(FirstNote1 > 72)
 8005478:	4b5e      	ldr	r3, [pc, #376]	; (80055f4 <key_pressed+0x2c0>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b48      	cmp	r3, #72	; 0x48
 800547e:	d909      	bls.n	8005494 <key_pressed+0x160>
					FirstNote1 = 72; //limita em C4
 8005480:	4b5c      	ldr	r3, [pc, #368]	; (80055f4 <key_pressed+0x2c0>)
 8005482:	2248      	movs	r2, #72	; 0x48
 8005484:	701a      	strb	r2, [r3, #0]
					beep(1, 500, 100); //1 bip longo
 8005486:	2264      	movs	r2, #100	; 0x64
 8005488:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800548c:	2001      	movs	r0, #1
 800548e:	f000 f935 	bl	80056fc <beep>
}
 8005492:	e09e      	b.n	80055d2 <key_pressed+0x29e>
				else beep(1, 100, 100); //um bip curto
 8005494:	2264      	movs	r2, #100	; 0x64
 8005496:	2164      	movs	r1, #100	; 0x64
 8005498:	2001      	movs	r0, #1
 800549a:	f000 f92f 	bl	80056fc <beep>
}
 800549e:	e098      	b.n	80055d2 <key_pressed+0x29e>
				FirstNote0 += 12; //desloca uma oitava para direita
 80054a0:	4b52      	ldr	r3, [pc, #328]	; (80055ec <key_pressed+0x2b8>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <key_pressed+0x2b8>)
 80054aa:	701a      	strb	r2, [r3, #0]
				if(FirstNote0 > 72)
 80054ac:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <key_pressed+0x2b8>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b48      	cmp	r3, #72	; 0x48
 80054b2:	d909      	bls.n	80054c8 <key_pressed+0x194>
					FirstNote0 = 72; //limita em C4
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <key_pressed+0x2b8>)
 80054b6:	2248      	movs	r2, #72	; 0x48
 80054b8:	701a      	strb	r2, [r3, #0]
					beep(1, 500, 100); //1 bip longo
 80054ba:	2264      	movs	r2, #100	; 0x64
 80054bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80054c0:	2001      	movs	r0, #1
 80054c2:	f000 f91b 	bl	80056fc <beep>
}
 80054c6:	e084      	b.n	80055d2 <key_pressed+0x29e>
				else beep(1, 100, 100); //um bip curto
 80054c8:	2264      	movs	r2, #100	; 0x64
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	2001      	movs	r0, #1
 80054ce:	f000 f915 	bl	80056fc <beep>
}
 80054d2:	e07e      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 52) //função OCT>?
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <key_pressed+0x2ac>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b34      	cmp	r3, #52	; 0x34
 80054da:	d137      	bne.n	800554c <key_pressed+0x218>
			if(Shift == 1) //Shif ativado?
 80054dc:	4b46      	ldr	r3, [pc, #280]	; (80055f8 <key_pressed+0x2c4>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d119      	bne.n	8005518 <key_pressed+0x1e4>
				FirstNote1 -= 12; //desloca uma oitava para esquerda
 80054e4:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <key_pressed+0x2c0>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	3b0c      	subs	r3, #12
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <key_pressed+0x2c0>)
 80054ee:	701a      	strb	r2, [r3, #0]
				if(FirstNote1 < 24)
 80054f0:	4b40      	ldr	r3, [pc, #256]	; (80055f4 <key_pressed+0x2c0>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b17      	cmp	r3, #23
 80054f6:	d809      	bhi.n	800550c <key_pressed+0x1d8>
					FirstNote1 = 24; //limita em C0
 80054f8:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <key_pressed+0x2c0>)
 80054fa:	2218      	movs	r2, #24
 80054fc:	701a      	strb	r2, [r3, #0]
					beep(1, 500, 100); //1 bip longo
 80054fe:	2264      	movs	r2, #100	; 0x64
 8005500:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005504:	2001      	movs	r0, #1
 8005506:	f000 f8f9 	bl	80056fc <beep>
}
 800550a:	e062      	b.n	80055d2 <key_pressed+0x29e>
				else beep(1, 100, 100); //um bip curto
 800550c:	2264      	movs	r2, #100	; 0x64
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	2001      	movs	r0, #1
 8005512:	f000 f8f3 	bl	80056fc <beep>
}
 8005516:	e05c      	b.n	80055d2 <key_pressed+0x29e>
				FirstNote0 -= 12; //desloca uma oitava para esquerda
 8005518:	4b34      	ldr	r3, [pc, #208]	; (80055ec <key_pressed+0x2b8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	3b0c      	subs	r3, #12
 800551e:	b2da      	uxtb	r2, r3
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <key_pressed+0x2b8>)
 8005522:	701a      	strb	r2, [r3, #0]
				if(FirstNote0 < 24)
 8005524:	4b31      	ldr	r3, [pc, #196]	; (80055ec <key_pressed+0x2b8>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b17      	cmp	r3, #23
 800552a:	d809      	bhi.n	8005540 <key_pressed+0x20c>
					FirstNote0 = 24; //limita em C0
 800552c:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <key_pressed+0x2b8>)
 800552e:	2218      	movs	r2, #24
 8005530:	701a      	strb	r2, [r3, #0]
					beep(1, 500, 100); //1 bip longo
 8005532:	2264      	movs	r2, #100	; 0x64
 8005534:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005538:	2001      	movs	r0, #1
 800553a:	f000 f8df 	bl	80056fc <beep>
}
 800553e:	e048      	b.n	80055d2 <key_pressed+0x29e>
				else beep(1, 100, 100); //um bip curto
 8005540:	2264      	movs	r2, #100	; 0x64
 8005542:	2164      	movs	r1, #100	; 0x64
 8005544:	2001      	movs	r0, #1
 8005546:	f000 f8d9 	bl	80056fc <beep>
}
 800554a:	e042      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 53) //função <VEL?
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <key_pressed+0x2ac>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b35      	cmp	r3, #53	; 0x35
 8005552:	d120      	bne.n	8005596 <key_pressed+0x262>
			if(Velocit == 127) Velocit = 128; //ajusta para subtrair
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <key_pressed+0x2bc>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b7f      	cmp	r3, #127	; 0x7f
 800555a:	d102      	bne.n	8005562 <key_pressed+0x22e>
 800555c:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <key_pressed+0x2bc>)
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	701a      	strb	r2, [r3, #0]
			if(Velocit -= 8); //diminui a velocidade
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <key_pressed+0x2bc>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	3b08      	subs	r3, #8
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <key_pressed+0x2bc>)
 800556c:	701a      	strb	r2, [r3, #0]
			if(Velocit < 64)
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <key_pressed+0x2bc>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b3f      	cmp	r3, #63	; 0x3f
 8005574:	d809      	bhi.n	800558a <key_pressed+0x256>
				Velocit = 64; //limita em 64
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <key_pressed+0x2bc>)
 8005578:	2240      	movs	r2, #64	; 0x40
 800557a:	701a      	strb	r2, [r3, #0]
				beep(1, 500, 100); //1 bip longo
 800557c:	2264      	movs	r2, #100	; 0x64
 800557e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005582:	2001      	movs	r0, #1
 8005584:	f000 f8ba 	bl	80056fc <beep>
}
 8005588:	e023      	b.n	80055d2 <key_pressed+0x29e>
			else beep(1, 100, 100); //um bip curto
 800558a:	2264      	movs	r2, #100	; 0x64
 800558c:	2164      	movs	r1, #100	; 0x64
 800558e:	2001      	movs	r0, #1
 8005590:	f000 f8b4 	bl	80056fc <beep>
}
 8005594:	e01d      	b.n	80055d2 <key_pressed+0x29e>
		else if(Note == 54) //função VEL>?
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <key_pressed+0x2ac>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b36      	cmp	r3, #54	; 0x36
 800559c:	d119      	bne.n	80055d2 <key_pressed+0x29e>
			Velocit += 8; //aumenta a velocidade
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <key_pressed+0x2bc>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	3308      	adds	r3, #8
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <key_pressed+0x2bc>)
 80055a8:	701a      	strb	r2, [r3, #0]
			if(Velocit > 127)
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <key_pressed+0x2bc>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da09      	bge.n	80055c8 <key_pressed+0x294>
				Velocit = 127; //limita em 127
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <key_pressed+0x2bc>)
 80055b6:	227f      	movs	r2, #127	; 0x7f
 80055b8:	701a      	strb	r2, [r3, #0]
				beep(1, 500, 100); //1 bip longo
 80055ba:	2264      	movs	r2, #100	; 0x64
 80055bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055c0:	2001      	movs	r0, #1
 80055c2:	f000 f89b 	bl	80056fc <beep>
}
 80055c6:	e004      	b.n	80055d2 <key_pressed+0x29e>
			else beep(1, 100, 100); //um bip curto
 80055c8:	2264      	movs	r2, #100	; 0x64
 80055ca:	2164      	movs	r1, #100	; 0x64
 80055cc:	2001      	movs	r0, #1
 80055ce:	f000 f895 	bl	80056fc <beep>
}
 80055d2:	bf00      	nop
 80055d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055d8:	200001e0 	.word	0x200001e0
 80055dc:	200001e8 	.word	0x200001e8
 80055e0:	200001f0 	.word	0x200001f0
 80055e4:	200001f3 	.word	0x200001f3
 80055e8:	20000116 	.word	0x20000116
 80055ec:	20000114 	.word	0x20000114
 80055f0:	20000117 	.word	0x20000117
 80055f4:	20000115 	.word	0x20000115
 80055f8:	200001f4 	.word	0x200001f4

080055fc <key_unpressed>:

void key_unpressed()
{
 80055fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	af00      	add	r7, sp, #0
	if(KeypadState & NoteBit) //estava pressionada?
 8005602:	4e36      	ldr	r6, [pc, #216]	; (80056dc <key_unpressed+0xe0>)
 8005604:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8005608:	4e35      	ldr	r6, [pc, #212]	; (80056e0 <key_unpressed+0xe4>)
 800560a:	e9d6 8900 	ldrd	r8, r9, [r6]
 800560e:	ea0a 0408 	and.w	r4, sl, r8
 8005612:	ea0b 0509 	and.w	r5, fp, r9
 8005616:	432c      	orrs	r4, r5
 8005618:	d05d      	beq.n	80056d6 <key_unpressed+0xda>
	{ //sim
		KeypadState &= ~(NoteBit); //muda sinalização da tecla
 800561a:	4c31      	ldr	r4, [pc, #196]	; (80056e0 <key_unpressed+0xe4>)
 800561c:	cc30      	ldmia	r4, {r4, r5}
 800561e:	43e2      	mvns	r2, r4
 8005620:	43eb      	mvns	r3, r5
 8005622:	4c2e      	ldr	r4, [pc, #184]	; (80056dc <key_unpressed+0xe0>)
 8005624:	cc30      	ldmia	r4, {r4, r5}
 8005626:	ea02 0004 	and.w	r0, r2, r4
 800562a:	ea03 0105 	and.w	r1, r3, r5
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <key_unpressed+0xe0>)
 8005630:	e9c3 0100 	strd	r0, r1, [r3]
		if(Note >= 0 && Note <= 48) //nota dentro do intervalo válido?
 8005634:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <key_unpressed+0xe8>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d83d      	bhi.n	80056b8 <key_unpressed+0xbc>
		{ //sim
			if(SNote == 48) //somente canal 0?
 800563c:	4b2a      	ldr	r3, [pc, #168]	; (80056e8 <key_unpressed+0xec>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b30      	cmp	r3, #48	; 0x30
 8005642:	d10b      	bne.n	800565c <key_unpressed+0x60>
			{ // sim
				midiMessage(MIDI_NOTE_OFF, 0, FirstNote0 + Note, 0); //envia mensagem
 8005644:	4b29      	ldr	r3, [pc, #164]	; (80056ec <key_unpressed+0xf0>)
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <key_unpressed+0xe8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4413      	add	r3, r2
 800564e:	b2da      	uxtb	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	2100      	movs	r1, #0
 8005654:	2080      	movs	r0, #128	; 0x80
 8005656:	f7fd fda5 	bl	80031a4 <midiMessage>
		else if(Note == 50) //função SPLIT?
		{ //sim
			Split = 0; //desativa
		}
	}
}
 800565a:	e03c      	b.n	80056d6 <key_unpressed+0xda>
			else if(SNote == 0) //somente canal 1?
 800565c:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <key_unpressed+0xec>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <key_unpressed+0x80>
				midiMessage(MIDI_NOTE_OFF, 1, FirstNote1 + Note, 0); //envia mensagem
 8005664:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <key_unpressed+0xf4>)
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <key_unpressed+0xe8>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4413      	add	r3, r2
 800566e:	b2da      	uxtb	r2, r3
 8005670:	2300      	movs	r3, #0
 8005672:	2101      	movs	r1, #1
 8005674:	2080      	movs	r0, #128	; 0x80
 8005676:	f7fd fd95 	bl	80031a4 <midiMessage>
}
 800567a:	e02c      	b.n	80056d6 <key_unpressed+0xda>
				if(Note < SNote) //teclas do canal 0?
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <key_unpressed+0xe8>)
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <key_unpressed+0xec>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d20b      	bcs.n	80056a0 <key_unpressed+0xa4>
					midiMessage(MIDI_NOTE_OFF, 0, FirstNote0 + Note, 0); //envia mensagem
 8005688:	4b18      	ldr	r3, [pc, #96]	; (80056ec <key_unpressed+0xf0>)
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <key_unpressed+0xe8>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	4413      	add	r3, r2
 8005692:	b2da      	uxtb	r2, r3
 8005694:	2300      	movs	r3, #0
 8005696:	2100      	movs	r1, #0
 8005698:	2080      	movs	r0, #128	; 0x80
 800569a:	f7fd fd83 	bl	80031a4 <midiMessage>
}
 800569e:	e01a      	b.n	80056d6 <key_unpressed+0xda>
					midiMessage(MIDI_NOTE_OFF, 1, FirstNote1 + Note, 0); //envia mensagem
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <key_unpressed+0xf4>)
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <key_unpressed+0xe8>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4413      	add	r3, r2
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	2300      	movs	r3, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	2080      	movs	r0, #128	; 0x80
 80056b2:	f7fd fd77 	bl	80031a4 <midiMessage>
}
 80056b6:	e00e      	b.n	80056d6 <key_unpressed+0xda>
		else if(Note == 49) //função SHIFT?
 80056b8:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <key_unpressed+0xe8>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b31      	cmp	r3, #49	; 0x31
 80056be:	d103      	bne.n	80056c8 <key_unpressed+0xcc>
			Shift = 0; //desativa
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <key_unpressed+0xf8>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
}
 80056c6:	e006      	b.n	80056d6 <key_unpressed+0xda>
		else if(Note == 50) //função SPLIT?
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <key_unpressed+0xe8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b32      	cmp	r3, #50	; 0x32
 80056ce:	d102      	bne.n	80056d6 <key_unpressed+0xda>
			Split = 0; //desativa
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <key_unpressed+0xfc>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	200001e0 	.word	0x200001e0
 80056e0:	200001e8 	.word	0x200001e8
 80056e4:	200001f0 	.word	0x200001f0
 80056e8:	20000116 	.word	0x20000116
 80056ec:	20000114 	.word	0x20000114
 80056f0:	20000115 	.word	0x20000115
 80056f4:	200001f4 	.word	0x200001f4
 80056f8:	200001f3 	.word	0x200001f3

080056fc <beep>:

void beep(uint8_t Qte, uint16_t On, uint16_t Off)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	71fb      	strb	r3, [r7, #7]
 8005706:	460b      	mov	r3, r1
 8005708:	80bb      	strh	r3, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	807b      	strh	r3, [r7, #2]
	uint8_t n;
	for(n = 0; n < Qte; n++)
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
 8005712:	e012      	b.n	800573a <beep+0x3e>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005714:	2104      	movs	r1, #4
 8005716:	480d      	ldr	r0, [pc, #52]	; (800574c <beep+0x50>)
 8005718:	f7fc fc9e 	bl	8002058 <HAL_TIM_PWM_Start>
		HAL_Delay(On);
 800571c:	88bb      	ldrh	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa fd5c 	bl	80001dc <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8005724:	2104      	movs	r1, #4
 8005726:	4809      	ldr	r0, [pc, #36]	; (800574c <beep+0x50>)
 8005728:	f7fc fd04 	bl	8002134 <HAL_TIM_PWM_Stop>
		HAL_Delay(Off);
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fa fd54 	bl	80001dc <HAL_Delay>
	for(n = 0; n < Qte; n++)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	3301      	adds	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3e8      	bcc.n	8005714 <beep+0x18>
	}
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20001994 	.word	0x20001994

08005750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	2400      	movs	r4, #0
 8005756:	9404      	str	r4, [sp, #16]
 8005758:	9405      	str	r4, [sp, #20]
 800575a:	9406      	str	r4, [sp, #24]
 800575c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <MX_GPIO_Init+0x80>)
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	f042 0220 	orr.w	r2, r2, #32
 8005766:	619a      	str	r2, [r3, #24]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	f002 0220 	and.w	r2, r2, #32
 800576e:	9201      	str	r2, [sp, #4]
 8005770:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	f042 0204 	orr.w	r2, r2, #4
 8005778:	619a      	str	r2, [r3, #24]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	f002 0204 	and.w	r2, r2, #4
 8005780:	9202      	str	r2, [sp, #8]
 8005782:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	619a      	str	r2, [r3, #24]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005796:	4d0f      	ldr	r5, [pc, #60]	; (80057d4 <MX_GPIO_Init+0x84>)
 8005798:	2201      	movs	r2, #1
 800579a:	21ff      	movs	r1, #255	; 0xff
 800579c:	4628      	mov	r0, r5
 800579e:	f7fa feb2 	bl	8000506 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80057a2:	23ff      	movs	r3, #255	; 0xff
 80057a4:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057a6:	2601      	movs	r6, #1
 80057a8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ac:	2302      	movs	r3, #2
 80057ae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b0:	a904      	add	r1, sp, #16
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa fd90 	bl	80002d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80057b8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80057bc:	9304      	str	r3, [sp, #16]
                          |GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057be:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057c0:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	a904      	add	r1, sp, #16
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7fa fd87 	bl	80002d8 <HAL_GPIO_Init>

}
 80057ca:	b008      	add	sp, #32
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40010c00 	.word	0x40010c00

080057d8 <MX_USB_PCD_Init>:
{
 80057d8:	b508      	push	{r3, lr}
  hpcd_USB_FS.Instance = USB;
 80057da:	4807      	ldr	r0, [pc, #28]	; (80057f8 <MX_USB_PCD_Init+0x20>)
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <MX_USB_PCD_Init+0x24>)
 80057de:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80057e0:	2308      	movs	r3, #8
 80057e2:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80057e4:	2302      	movs	r3, #2
 80057e6:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80057ec:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80057ee:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80057f0:	f7fa ff1a 	bl	8000628 <HAL_PCD_Init>
}
 80057f4:	bd08      	pop	{r3, pc}
 80057f6:	bf00      	nop
 80057f8:	200004a8 	.word	0x200004a8
 80057fc:	40005c00 	.word	0x40005c00

08005800 <MX_TIM3_Init>:
{
 8005800:	b530      	push	{r4, r5, lr}
 8005802:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005804:	2400      	movs	r4, #0
 8005806:	940a      	str	r4, [sp, #40]	; 0x28
 8005808:	940b      	str	r4, [sp, #44]	; 0x2c
 800580a:	940c      	str	r4, [sp, #48]	; 0x30
 800580c:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800580e:	9408      	str	r4, [sp, #32]
 8005810:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005812:	9401      	str	r4, [sp, #4]
 8005814:	9402      	str	r4, [sp, #8]
 8005816:	9403      	str	r4, [sp, #12]
 8005818:	9404      	str	r4, [sp, #16]
 800581a:	9405      	str	r4, [sp, #20]
 800581c:	9406      	str	r4, [sp, #24]
 800581e:	9407      	str	r4, [sp, #28]
  htim3.Instance = TIM3;
 8005820:	4d17      	ldr	r5, [pc, #92]	; (8005880 <MX_TIM3_Init+0x80>)
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <MX_TIM3_Init+0x84>)
 8005824:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 8005826:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005828:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 18000;
 800582a:	f244 6350 	movw	r3, #18000	; 0x4650
 800582e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005830:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005832:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005834:	4628      	mov	r0, r5
 8005836:	f7fc fa93 	bl	8001d60 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800583a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800583e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005840:	a90a      	add	r1, sp, #40	; 0x28
 8005842:	4628      	mov	r0, r5
 8005844:	f7fc fb89 	bl	8001f5a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005848:	4628      	mov	r0, r5
 800584a:	f7fc fab5 	bl	8001db8 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800584e:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005850:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005852:	a908      	add	r1, sp, #32
 8005854:	4628      	mov	r0, r5
 8005856:	f7fc fcaf 	bl	80021b8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800585a:	2360      	movs	r3, #96	; 0x60
 800585c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 9000;
 800585e:	f242 3328 	movw	r3, #9000	; 0x2328
 8005862:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005864:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005866:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005868:	2204      	movs	r2, #4
 800586a:	eb0d 0102 	add.w	r1, sp, r2
 800586e:	4628      	mov	r0, r5
 8005870:	f7fc fb00 	bl	8001e74 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8005874:	4628      	mov	r0, r5
 8005876:	f000 f88d 	bl	8005994 <HAL_TIM_MspPostInit>
}
 800587a:	b00f      	add	sp, #60	; 0x3c
 800587c:	bd30      	pop	{r4, r5, pc}
 800587e:	bf00      	nop
 8005880:	20001994 	.word	0x20001994
 8005884:	40000400 	.word	0x40000400

08005888 <SystemClock_Config>:
{
 8005888:	b530      	push	{r4, r5, lr}
 800588a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800588c:	2400      	movs	r4, #0
 800588e:	940d      	str	r4, [sp, #52]	; 0x34
 8005890:	940f      	str	r4, [sp, #60]	; 0x3c
 8005892:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005894:	9405      	str	r4, [sp, #20]
 8005896:	9406      	str	r4, [sp, #24]
 8005898:	9407      	str	r4, [sp, #28]
 800589a:	9408      	str	r4, [sp, #32]
 800589c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800589e:	9401      	str	r4, [sp, #4]
 80058a0:	9402      	str	r4, [sp, #8]
 80058a2:	9403      	str	r4, [sp, #12]
 80058a4:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058a6:	2201      	movs	r2, #1
 80058a8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80058b0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058b2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058b4:	2502      	movs	r5, #2
 80058b6:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058b8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80058ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80058be:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058c0:	a80a      	add	r0, sp, #40	; 0x28
 80058c2:	f7fb fde3 	bl	800148c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058c6:	230f      	movs	r3, #15
 80058c8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058ca:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058cc:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058d2:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058d4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80058d6:	4629      	mov	r1, r5
 80058d8:	a805      	add	r0, sp, #20
 80058da:	f7fc f815 	bl	8001908 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80058de:	2310      	movs	r3, #16
 80058e0:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80058e2:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058e4:	a801      	add	r0, sp, #4
 80058e6:	f7fc f8c5 	bl	8001a74 <HAL_RCCEx_PeriphCLKConfig>
}
 80058ea:	b015      	add	sp, #84	; 0x54
 80058ec:	bd30      	pop	{r4, r5, pc}

080058ee <main>:
{
 80058ee:	b508      	push	{r3, lr}
  HAL_Init();
 80058f0:	f7fa fc50 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80058f4:	f7ff ffc8 	bl	8005888 <SystemClock_Config>
	initialize();
 80058f8:	f7ff fbfc 	bl	80050f4 <initialize>
  MX_GPIO_Init();
 80058fc:	f7ff ff28 	bl	8005750 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8005900:	f7ff ff6a 	bl	80057d8 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8005904:	f7ff ff7c 	bl	8005800 <MX_TIM3_Init>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8005908:	2200      	movs	r2, #0
 800590a:	2102      	movs	r1, #2
 800590c:	2014      	movs	r0, #20
 800590e:	f7fa fc8b 	bl	8000228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005912:	2014      	movs	r0, #20
 8005914:	f7fa fcbc 	bl	8000290 <HAL_NVIC_EnableIRQ>
  MX_USB_DEVICE_Init();
 8005918:	f7fd fcb0 	bl	800327c <MX_USB_DEVICE_Init>
    keypad_scan();
 800591c:	f7ff fbf0 	bl	8005100 <keypad_scan>
  while (1)
 8005920:	e7fc      	b.n	800591c <main+0x2e>

08005922 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005922:	4770      	bx	lr

08005924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005924:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005926:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <HAL_MspInit+0x3c>)
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	619a      	str	r2, [r3, #24]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	f002 0201 	and.w	r2, r2, #1
 8005936:	9200      	str	r2, [sp, #0]
 8005938:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005940:	61da      	str	r2, [r3, #28]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800594c:	4a05      	ldr	r2, [pc, #20]	; (8005964 <HAL_MspInit+0x40>)
 800594e:	6853      	ldr	r3, [r2, #4]
 8005950:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800595a:	b002      	add	sp, #8
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40021000 	.word	0x40021000
 8005964:	40010000 	.word	0x40010000

08005968 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8005968:	6802      	ldr	r2, [r0, #0]
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_TIM_Base_MspInit+0x28>)
 800596c:	429a      	cmp	r2, r3
 800596e:	d000      	beq.n	8005972 <HAL_TIM_Base_MspInit+0xa>
 8005970:	4770      	bx	lr
{
 8005972:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005974:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	f042 0202 	orr.w	r2, r2, #2
 800597e:	61da      	str	r2, [r3, #28]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800598a:	b002      	add	sp, #8
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40000400 	.word	0x40000400

08005994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005994:	b500      	push	{lr}
 8005996:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005998:	2300      	movs	r3, #0
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 80059a2:	6802      	ldr	r2, [r0, #0]
 80059a4:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <HAL_TIM_MspPostInit+0x48>)
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d002      	beq.n	80059b0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80059aa:	b007      	add	sp, #28
 80059ac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	f042 0204 	orr.w	r2, r2, #4
 80059ba:	619a      	str	r2, [r3, #24]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ca:	2302      	movs	r3, #2
 80059cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059d0:	a902      	add	r1, sp, #8
 80059d2:	4803      	ldr	r0, [pc, #12]	; (80059e0 <HAL_TIM_MspPostInit+0x4c>)
 80059d4:	f7fa fc80 	bl	80002d8 <HAL_GPIO_Init>
}
 80059d8:	e7e7      	b.n	80059aa <HAL_TIM_MspPostInit+0x16>
 80059da:	bf00      	nop
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40010800 	.word	0x40010800

080059e4 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 80059e4:	6802      	ldr	r2, [r0, #0]
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_PCD_MspInit+0x28>)
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d000      	beq.n	80059ee <HAL_PCD_MspInit+0xa>
 80059ec:	4770      	bx	lr
{
 80059ee:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80059f0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80059f4:	69da      	ldr	r2, [r3, #28]
 80059f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8005a06:	b002      	add	sp, #8
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40005c00 	.word	0x40005c00

08005a10 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a10:	4770      	bx	lr

08005a12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a12:	e7fe      	b.n	8005a12 <HardFault_Handler>

08005a14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a14:	e7fe      	b.n	8005a14 <MemManage_Handler>

08005a16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a16:	e7fe      	b.n	8005a16 <BusFault_Handler>

08005a18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a18:	e7fe      	b.n	8005a18 <UsageFault_Handler>

08005a1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a1a:	4770      	bx	lr

08005a1c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a1c:	4770      	bx	lr

08005a1e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a1e:	4770      	bx	lr

08005a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a22:	f7fa fbc9 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a26:	bd08      	pop	{r3, pc}

08005a28 <USB_LP_CAN1_RX0_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005a28:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005a2a:	4802      	ldr	r0, [pc, #8]	; (8005a34 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8005a2c:	f7fb fadf 	bl	8000fee <HAL_PCD_IRQHandler>
}
 8005a30:	bd08      	pop	{r3, pc}
 8005a32:	bf00      	nop
 8005a34:	200004a8 	.word	0x200004a8

08005a38 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005a38:	b508      	push	{r3, lr}
 8005a3a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <_sbrk+0x34>)
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	b142      	cbz	r2, 8005a54 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <_sbrk+0x34>)
 8005a44:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005a46:	4403      	add	r3, r0
 8005a48:	466a      	mov	r2, sp
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d806      	bhi.n	8005a5c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <_sbrk+0x34>)
 8005a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005a52:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <_sbrk+0x34>)
 8005a56:	4906      	ldr	r1, [pc, #24]	; (8005a70 <_sbrk+0x38>)
 8005a58:	6011      	str	r1, [r2, #0]
 8005a5a:	e7f2      	b.n	8005a42 <_sbrk+0xa>
		errno = ENOMEM;
 8005a5c:	f000 f856 	bl	8005b0c <__errno>
 8005a60:	230c      	movs	r3, #12
 8005a62:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	e7f3      	b.n	8005a52 <_sbrk+0x1a>
 8005a6a:	bf00      	nop
 8005a6c:	200001f8 	.word	0x200001f8
 8005a70:	200019f0 	.word	0x200019f0

08005a74 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <SystemInit+0x40>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	4a0d      	ldr	r2, [pc, #52]	; (8005ab8 <SystemInit+0x44>)
 8005a82:	400a      	ands	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005a8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a90:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a98:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005aa0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005aa2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005aa6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <SystemInit+0x48>)
 8005aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005aae:	609a      	str	r2, [r3, #8]
#endif 
}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	f8ff0000 	.word	0xf8ff0000
 8005abc:	e000ed00 	.word	0xe000ed00

08005ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005ac0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005ac2:	e003      	b.n	8005acc <LoopCopyDataInit>

08005ac4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005ac6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ac8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005aca:	3104      	adds	r1, #4

08005acc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005acc:	480a      	ldr	r0, [pc, #40]	; (8005af8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005ad0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005ad2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ad4:	d3f6      	bcc.n	8005ac4 <CopyDataInit>
  ldr r2, =_sbss
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005ad8:	e002      	b.n	8005ae0 <LoopFillZerobss>

08005ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005ada:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005adc:	f842 3b04 	str.w	r3, [r2], #4

08005ae0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ae4:	d3f9      	bcc.n	8005ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ae6:	f7ff ffc5 	bl	8005a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aea:	f000 f815 	bl	8005b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005aee:	f7ff fefe 	bl	80058ee <main>
  bx lr
 8005af2:	4770      	bx	lr
  ldr r3, =_sidata
 8005af4:	08005d90 	.word	0x08005d90
  ldr r0, =_sdata
 8005af8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005afc:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8005b00:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8005b04:	200019ec 	.word	0x200019ec

08005b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b08:	e7fe      	b.n	8005b08 <ADC1_2_IRQHandler>
	...

08005b0c <__errno>:
 8005b0c:	4b01      	ldr	r3, [pc, #4]	; (8005b14 <__errno+0x8>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2000011c 	.word	0x2000011c

08005b18 <__libc_init_array>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	4d0c      	ldr	r5, [pc, #48]	; (8005b50 <__libc_init_array+0x38>)
 8005b1e:	4c0d      	ldr	r4, [pc, #52]	; (8005b54 <__libc_init_array+0x3c>)
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	42a6      	cmp	r6, r4
 8005b26:	d109      	bne.n	8005b3c <__libc_init_array+0x24>
 8005b28:	f000 f8ee 	bl	8005d08 <_init>
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	4d0a      	ldr	r5, [pc, #40]	; (8005b58 <__libc_init_array+0x40>)
 8005b30:	4c0a      	ldr	r4, [pc, #40]	; (8005b5c <__libc_init_array+0x44>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	d105      	bne.n	8005b46 <__libc_init_array+0x2e>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b40:	4798      	blx	r3
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7ee      	b.n	8005b24 <__libc_init_array+0xc>
 8005b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4a:	4798      	blx	r3
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	e7f2      	b.n	8005b36 <__libc_init_array+0x1e>
 8005b50:	08005d88 	.word	0x08005d88
 8005b54:	08005d88 	.word	0x08005d88
 8005b58:	08005d88 	.word	0x08005d88
 8005b5c:	08005d8c 	.word	0x08005d8c

08005b60 <malloc>:
 8005b60:	4b02      	ldr	r3, [pc, #8]	; (8005b6c <malloc+0xc>)
 8005b62:	4601      	mov	r1, r0
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	f000 b857 	b.w	8005c18 <_malloc_r>
 8005b6a:	bf00      	nop
 8005b6c:	2000011c 	.word	0x2000011c

08005b70 <free>:
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <free+0xc>)
 8005b72:	4601      	mov	r1, r0
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f000 b803 	b.w	8005b80 <_free_r>
 8005b7a:	bf00      	nop
 8005b7c:	2000011c 	.word	0x2000011c

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d043      	beq.n	8005c10 <_free_r+0x90>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f000 f8aa 	bl	8005cec <__malloc_lock>
 8005b98:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <_free_r+0x94>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	b933      	cbnz	r3, 8005bae <_free_r+0x2e>
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	6014      	str	r4, [r2, #0]
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005baa:	f000 b8a5 	b.w	8005cf8 <__malloc_unlock>
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	d90a      	bls.n	8005bc8 <_free_r+0x48>
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	1862      	adds	r2, r4, r1
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bf01      	itttt	eq
 8005bba:	681a      	ldreq	r2, [r3, #0]
 8005bbc:	685b      	ldreq	r3, [r3, #4]
 8005bbe:	1852      	addeq	r2, r2, r1
 8005bc0:	6022      	streq	r2, [r4, #0]
 8005bc2:	6063      	str	r3, [r4, #4]
 8005bc4:	6004      	str	r4, [r0, #0]
 8005bc6:	e7ed      	b.n	8005ba4 <_free_r+0x24>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	b10b      	cbz	r3, 8005bd2 <_free_r+0x52>
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	d9fa      	bls.n	8005bc8 <_free_r+0x48>
 8005bd2:	6811      	ldr	r1, [r2, #0]
 8005bd4:	1850      	adds	r0, r2, r1
 8005bd6:	42a0      	cmp	r0, r4
 8005bd8:	d10b      	bne.n	8005bf2 <_free_r+0x72>
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	4401      	add	r1, r0
 8005bde:	1850      	adds	r0, r2, r1
 8005be0:	4283      	cmp	r3, r0
 8005be2:	6011      	str	r1, [r2, #0]
 8005be4:	d1de      	bne.n	8005ba4 <_free_r+0x24>
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4401      	add	r1, r0
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	6053      	str	r3, [r2, #4]
 8005bf0:	e7d8      	b.n	8005ba4 <_free_r+0x24>
 8005bf2:	d902      	bls.n	8005bfa <_free_r+0x7a>
 8005bf4:	230c      	movs	r3, #12
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	e7d4      	b.n	8005ba4 <_free_r+0x24>
 8005bfa:	6820      	ldr	r0, [r4, #0]
 8005bfc:	1821      	adds	r1, r4, r0
 8005bfe:	428b      	cmp	r3, r1
 8005c00:	bf01      	itttt	eq
 8005c02:	6819      	ldreq	r1, [r3, #0]
 8005c04:	685b      	ldreq	r3, [r3, #4]
 8005c06:	1809      	addeq	r1, r1, r0
 8005c08:	6021      	streq	r1, [r4, #0]
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	6054      	str	r4, [r2, #4]
 8005c0e:	e7c9      	b.n	8005ba4 <_free_r+0x24>
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	20000200 	.word	0x20000200

08005c18 <_malloc_r>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	1ccd      	adds	r5, r1, #3
 8005c1c:	f025 0503 	bic.w	r5, r5, #3
 8005c20:	3508      	adds	r5, #8
 8005c22:	2d0c      	cmp	r5, #12
 8005c24:	bf38      	it	cc
 8005c26:	250c      	movcc	r5, #12
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	db01      	blt.n	8005c32 <_malloc_r+0x1a>
 8005c2e:	42a9      	cmp	r1, r5
 8005c30:	d903      	bls.n	8005c3a <_malloc_r+0x22>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	2000      	movs	r0, #0
 8005c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3a:	f000 f857 	bl	8005cec <__malloc_lock>
 8005c3e:	4921      	ldr	r1, [pc, #132]	; (8005cc4 <_malloc_r+0xac>)
 8005c40:	680a      	ldr	r2, [r1, #0]
 8005c42:	4614      	mov	r4, r2
 8005c44:	b99c      	cbnz	r4, 8005c6e <_malloc_r+0x56>
 8005c46:	4f20      	ldr	r7, [pc, #128]	; (8005cc8 <_malloc_r+0xb0>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	b923      	cbnz	r3, 8005c56 <_malloc_r+0x3e>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f000 f83c 	bl	8005ccc <_sbrk_r>
 8005c54:	6038      	str	r0, [r7, #0]
 8005c56:	4629      	mov	r1, r5
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f837 	bl	8005ccc <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d123      	bne.n	8005caa <_malloc_r+0x92>
 8005c62:	230c      	movs	r3, #12
 8005c64:	4630      	mov	r0, r6
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f000 f846 	bl	8005cf8 <__malloc_unlock>
 8005c6c:	e7e3      	b.n	8005c36 <_malloc_r+0x1e>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	1b5b      	subs	r3, r3, r5
 8005c72:	d417      	bmi.n	8005ca4 <_malloc_r+0x8c>
 8005c74:	2b0b      	cmp	r3, #11
 8005c76:	d903      	bls.n	8005c80 <_malloc_r+0x68>
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	441c      	add	r4, r3
 8005c7c:	6025      	str	r5, [r4, #0]
 8005c7e:	e004      	b.n	8005c8a <_malloc_r+0x72>
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	42a2      	cmp	r2, r4
 8005c84:	bf0c      	ite	eq
 8005c86:	600b      	streq	r3, [r1, #0]
 8005c88:	6053      	strne	r3, [r2, #4]
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f834 	bl	8005cf8 <__malloc_unlock>
 8005c90:	f104 000b 	add.w	r0, r4, #11
 8005c94:	1d23      	adds	r3, r4, #4
 8005c96:	f020 0007 	bic.w	r0, r0, #7
 8005c9a:	1ac2      	subs	r2, r0, r3
 8005c9c:	d0cc      	beq.n	8005c38 <_malloc_r+0x20>
 8005c9e:	1a1b      	subs	r3, r3, r0
 8005ca0:	50a3      	str	r3, [r4, r2]
 8005ca2:	e7c9      	b.n	8005c38 <_malloc_r+0x20>
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	6864      	ldr	r4, [r4, #4]
 8005ca8:	e7cc      	b.n	8005c44 <_malloc_r+0x2c>
 8005caa:	1cc4      	adds	r4, r0, #3
 8005cac:	f024 0403 	bic.w	r4, r4, #3
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d0e3      	beq.n	8005c7c <_malloc_r+0x64>
 8005cb4:	1a21      	subs	r1, r4, r0
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 f808 	bl	8005ccc <_sbrk_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d1dd      	bne.n	8005c7c <_malloc_r+0x64>
 8005cc0:	e7cf      	b.n	8005c62 <_malloc_r+0x4a>
 8005cc2:	bf00      	nop
 8005cc4:	20000200 	.word	0x20000200
 8005cc8:	20000204 	.word	0x20000204

08005ccc <_sbrk_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4d05      	ldr	r5, [pc, #20]	; (8005ce8 <_sbrk_r+0x1c>)
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7ff feae 	bl	8005a38 <_sbrk>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_sbrk_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_sbrk_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	200019dc 	.word	0x200019dc

08005cec <__malloc_lock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__malloc_lock+0x8>)
 8005cee:	f000 b809 	b.w	8005d04 <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	200019e4 	.word	0x200019e4

08005cf8 <__malloc_unlock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_unlock+0x8>)
 8005cfa:	f000 b804 	b.w	8005d06 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200019e4 	.word	0x200019e4

08005d04 <__retarget_lock_acquire_recursive>:
 8005d04:	4770      	bx	lr

08005d06 <__retarget_lock_release_recursive>:
 8005d06:	4770      	bx	lr

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
